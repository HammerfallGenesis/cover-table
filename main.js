/*
 THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
 If you want to view the source, please visit:
 https://github.com/HammerfallGenesis/obsidian-cover-table-plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/core/Plugin.ts
var Plugin_exports = {};
__export(Plugin_exports, {
  default: () => CoverTablePlugin
});
module.exports = __toCommonJS(Plugin_exports);
var import_obsidian6 = require("obsidian");
var import_fs = require("fs");
var import_path = require("path");
var import_obsidian7 = require("obsidian");

// src/theme/tokens.ts
var makeDefault = () => ({
  base: { white: "#ffffff", black: "#000000" },
  heading: {
    h1: "#ff5555",
    h2: "#ffae42",
    h3: "#f7ff50",
    h4: "#4cd964",
    h5: "#5ac8fa",
    h6: "#af52de"
  },
  list: { bullet: "rgb(54,54,190)", olMarker: "red" },
  bold: { bold: "rgb(138,0,119)" },
  italic: { italic: "rgb(255,130,178)" },
  table: {
    border: "#c0c0c0",
    shadow: "rgba(0,0,0,.10)",
    rowEven: "rgba(0,0,0,.03)",
    rowHover: "rgba(0,0,0,.07)"
  },
  image: { border: "#d0d0d0", shadow: "rgba(0,0,0,.10)" }
});
var DEFAULT_TOKENS = {
  light: makeDefault(),
  dark: (() => {
    const d = makeDefault();
    d.list = { bullet: "rgb(89,89,223)", olMarker: "red" };
    d.bold = { bold: "rgb(255,188,188)" };
    d.italic = { italic: "rgb(255, 234, 234)" };
    d.table = {
      border: "#444444",
      shadow: "rgba(0,0,0,.55)",
      rowEven: "transparent",
      rowHover: "rgba(255,255,255,.07)"
    };
    d.image = { border: "#555555", shadow: "rgba(0,0,0,.60)" };
    return d;
  })()
};
var VAR = {
  /* base */
  baseWhite: "--ct-base-white",
  baseBlack: "--ct-base-black",
  /* heading */
  h1: "--ct-h1-dark",
  h2: "--ct-h2-dark",
  h3: "--ct-h3-dark",
  h4: "--ct-h4-dark",
  h5: "--ct-h5-dark",
  h6: "--ct-h6-dark",
  /* list */
  bullet: "--bullet-new-color",
  olMarker: "--ct-ol-marker-dark",
  /* bold */
  bold: "--ct-bold",
  italic: "--ct-italic",
  /* table */
  tBorder: "--ct-table-border",
  tShadow: "--ct-table-shadow",
  tEven: "--ct-table-row-even",
  tHover: "--ct-table-row-hover",
  /* image */
  iBorder: "--ct-image-border",
  iShadow: "--ct-image-shadow"
};
function injectTokens(mode, palette, root = document.documentElement) {
  const P = palette[mode];
  const el = root instanceof Document ? root.documentElement : root;
  const suf = mode === "dark" ? "dark" : "light";
  el.style.setProperty(VAR.baseWhite, P.base.white);
  el.style.setProperty(VAR.baseBlack, P.base.black);
  ["h1", "h2", "h3", "h4", "h5", "h6"].forEach(
    (h) => el.style.setProperty(`--ct-${h}-${suf}`, P.heading[h])
    // ★
  );
  el.style.setProperty(`--ct-bullet-${suf}`, P.list.bullet);
  el.style.setProperty(`--ct-ol-marker-${suf}`, P.list.olMarker);
  el.style.setProperty(`--ct-bold-${suf}`, P.bold.bold);
  el.style.setProperty(`--ct-italic-${suf}`, P.italic.italic);
  el.style.setProperty(VAR.tBorder, P.table.border);
  el.style.setProperty(VAR.tShadow, P.table.shadow);
  el.style.setProperty(VAR.tEven, P.table.rowEven);
  el.style.setProperty(VAR.tHover, P.table.rowHover);
  el.style.setProperty(`--ct-image-border`, P.image.border);
  el.style.setProperty(`--ct-image-shadow`, P.image.shadow);
}

// src/setting.ts
var import_obsidian = require("obsidian");

// src/features/interactive-table/utils/log.ts
function make(method) {
  return (...a) => DEBUG && console[method]("[CT]", ...a);
}
var DEBUG = true;
var Log = {
  /* 토글 스위치 (SettingTab 등에서 호출) */
  setDebug(v) {
    DEBUG = v;
  },
  /* 레벨별 래퍼 */
  d: make("debug"),
  // = debug / log / info → 전부 여기로 통합
  w: make("warn"),
  e: make("error"),
  /* 시간 계측 */
  time(label) {
    DEBUG && console.time(`[CT] ${label}`);
  },
  timeEnd(label) {
    DEBUG && console.timeEnd(`[CT] ${label}`);
  }
};

// src/setting.ts
var DEFAULT_SETTINGS = {
  hideZeroFolders: true,
  listCallouts: [],
  tokens: structuredClone(DEFAULT_TOKENS),
  baseVars: {},
  customCss: "",
  debugLog: false
};
var LABEL = {
  /* Base */
  baseWhite: "Base \u2027 \uBC30\uACBD(\uD770\uC0C9)",
  baseBlack: "Base \u2027 \uAE00\uC790(\uAC80\uC815)",
  /* Heading */
  h1: "H1 (Red)",
  h2: "H2 (Orange)",
  h3: "H3 (Yellow)",
  h4: "H4 (Green)",
  h5: "H5 (Blue)",
  h6: "H6 (Violet)",
  /* List */
  bullet: "List Bullet",
  olMarker: "Ordered-list Number",
  /* Table / Image */
  tBorder: "Table Border",
  tShadow: "Table Shadow",
  tRowEven: "Table Row (even)",
  tRowHover: "Table Row (hover)",
  iBorder: "Image Border",
  iShadow: "Image Shadow"
};
var CALLOUT_LIMIT = 5;
var CoverTableSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async commit() {
    await this.plugin.saveSettings();
    injectTokens("dark", this.plugin.settings.tokens);
    injectTokens("light", this.plugin.settings.tokens);
    this.plugin.rebuildListCallouts();
  }
  /*───────────────────────────────────────────────────────────────
    fillMissing() – 누락값 보충
  ───────────────────────────────────────────────────────────────*/
  fillMissing(tokens) {
    ["dark", "light"].forEach((mode) => {
      const def = DEFAULT_TOKENS[mode];
      const tgt = tokens[mode];
      tgt.base = { ...def.base, ...tgt.base };
      tgt.heading = { ...def.heading, ...tgt.heading };
      tgt.list = { ...def.list, ...tgt.list };
      tgt.bold = { ...def.bold, ...tgt.bold };
      tgt.italic = { ...def.italic, ...tgt.italic };
      const merge = (d, t) => {
        Object.keys(d).forEach((k) => {
          var _a3;
          (_a3 = t[k]) != null ? _a3 : t[k] = d[k];
        });
      };
      tgt.table = { ...def.table, ...tgt.table };
      tgt.image = { ...def.image, ...tgt.image };
    });
  }
  /** 1 행에 ☀(Light) + 🌙(Dark) 두 컬러피커를 그린다 – 안전 버전 */
  addDualPicker(host, label, lightGetter, darkGetter, lightSetter, darkSetter) {
    const row = new import_obsidian.Setting(host).setName(label).setDesc("\u2600 Light \u25B8 left   \xB7   \u{1F319} Dark \u25B8 right");
    const initPicker = (cp, get, set, tip) => {
      var _a3;
      cp.setValue(get()).onChange(async (v) => {
        set(v);
        await this.commit();
      });
      let inp = (_a3 = cp.inputEl) != null ? _a3 : null;
      if (!inp) {
        queueMicrotask(() => {
          var _a4;
          inp = (_a4 = cp.containerEl) == null ? void 0 : _a4.querySelector("input[type='color']");
          inp == null ? void 0 : inp.setAttribute("title", tip);
        });
      } else {
        inp.setAttribute("title", tip);
      }
    };
    row.addColorPicker(
      (cp) => initPicker(cp, lightGetter, lightSetter, "Light mode colour (\u2600)")
    );
    row.addColorPicker(
      (cp) => initPicker(cp, darkGetter, darkSetter, "Dark mode colour (\u{1F319})")
    );
  }
  /* === List-Callout 한 행 생성 === */
  buildCalloutRow(host, co, idx, S) {
    const row = new import_obsidian.Setting(host);
    row.addText(
      (t) => t.setPlaceholder("\u2605").setValue(co.char).onChange(async (v) => {
        co.char = v.trim().charAt(0) || "\u2022";
        await this.commit();
        this.display();
      })
    ).setName(`Marker ${idx + 1}`);
    const addClr = (lab, get, set) => {
      row.addColorPicker((cp) => {
        cp.setValue(get()).onChange(async (v) => {
          set(v);
          await this.commit();
        });
        const setTip = () => {
          var _a3;
          const anyCp = cp;
          const inp = (_a3 = anyCp.containerEl) == null ? void 0 : _a3.querySelector("input[type='color']");
          inp == null ? void 0 : inp.setAttribute("title", lab);
        };
        setTip();
        queueMicrotask(setTip);
      });
    };
    addClr("bgLight", () => co.bgLight, (v) => co.bgLight = v);
    addClr("fgLight", () => co.fgLight, (v) => co.fgLight = v);
    addClr("bgDark", () => co.bgDark, (v) => co.bgDark = v);
    addClr("fgDark", () => co.fgDark, (v) => co.fgDark = v);
    row.addExtraButton(
      (btn) => btn.setIcon("trash").setTooltip("Delete").onClick(async () => {
        S.listCallouts.splice(idx, 1);
        await this.commit();
        this.display();
      })
    );
  }
  /* === 새 Callout 기본값 반환 === */
  newCallout() {
    return {
      char: "\u2605",
      bgLight: "#dbeafe",
      fgLight: "#1e40af",
      bgDark: "#1e3a8a",
      fgDark: "#dbeafe"
    };
  }
  /*──────── 5. UI 렌더링 ────────*/
  display() {
    const c = this.containerEl;
    c.empty();
    const S = this.plugin.settings;
    this.fillMissing(S.tokens);
    new import_obsidian.Setting(c).setName("Debug \uB85C\uADF8 \uD45C\uC2DC").addToggle((t) => t.setValue(this.plugin.settings.debugLog).onChange(async (v) => {
      this.plugin.settings.debugLog = v;
      await this.plugin.saveSettings();
      Log.setDebug(v);
    }));
    new import_obsidian.Setting(c).setName("_0  On / Off").setDesc('Hide every folder whose name starts with "0_" in Explorer; files inside remain visible').addToggle(
      (t) => t.setValue(S.hideZeroFolders).onChange(async (v) => {
        S.hideZeroFolders = v;
        await this.commit();
        this.plugin.applyZeroFolderVisibility();
      })
    );
    c.createEl("h3", { text: "\u{1F3A8} Color palette \u2013 Light / Dark" });
    c.createEl("p", {
      text: "Each row shows two colour pickers:  \u2600  = Light mode   \xB7   \u{1F319}  = Dark mode.",
      cls: "ct-tip"
    });
    this.addDualPicker(
      c,
      LABEL.baseWhite,
      () => S.tokens.light.base.white,
      () => S.tokens.dark.base.white,
      (v) => S.tokens.light.base.white = v,
      (v) => S.tokens.dark.base.white = v
    );
    this.addDualPicker(
      c,
      LABEL.baseBlack,
      () => S.tokens.light.base.black,
      () => S.tokens.dark.base.black,
      (v) => S.tokens.light.base.black = v,
      (v) => S.tokens.dark.base.black = v
    );
    c.createEl("h4", { text: "Headings (H1\u2013H6)" });
    ["h1", "h2", "h3", "h4", "h5", "h6"].forEach(
      (k) => this.addDualPicker(
        c,
        LABEL[k],
        () => S.tokens.light.heading[k],
        () => S.tokens.dark.heading[k],
        (v) => S.tokens.light.heading[k] = v,
        (v) => S.tokens.dark.heading[k] = v
      )
    );
    c.createEl("h4", { text: "List / Bold" });
    ["bullet", "olMarker"].forEach(
      (k) => this.addDualPicker(
        c,
        LABEL[k],
        () => S.tokens.light.list[k],
        () => S.tokens.dark.list[k],
        (v) => S.tokens.light.list[k] = v,
        (v) => S.tokens.dark.list[k] = v
      )
    );
    this.addDualPicker(
      c,
      "Bold text",
      () => S.tokens.light.bold.bold,
      () => S.tokens.dark.bold.bold,
      (v) => S.tokens.light.bold.bold = v,
      (v) => S.tokens.dark.bold.bold = v
    );
    this.addDualPicker(
      c,
      "Italic text",
      () => S.tokens.light.italic.italic,
      () => S.tokens.dark.italic.italic,
      (v) => S.tokens.light.italic.italic = v,
      (v) => S.tokens.dark.italic.italic = v
    );
    c.createEl("h3", { text: "\u{1F4DD} List Callouts" });
    S.listCallouts.forEach((co, i) => this.buildCalloutRow(c, co, i, S));
    new import_obsidian.Setting(c).addButton((btn) => {
      const full = S.listCallouts.length >= CALLOUT_LIMIT;
      btn.setButtonText(full ? "Limit reached" : "+ Add").setDisabled(full).setCta().setTooltip(full ? `You can register up to ${CALLOUT_LIMIT} callouts` : "Add a new callout").onClick(async () => {
        if (S.listCallouts.length >= CALLOUT_LIMIT)
          return;
        S.listCallouts.push(this.newCallout());
        await this.commit();
        this.display();
      });
    }).setName(`\uC0C8 Callout \uCD94\uAC00 (max ${CALLOUT_LIMIT})`);
  }
};

// src/ui/interactive-table/UIManager.ts
var import_obsidian3 = require("obsidian");

// src/ui/molecules/FilterBar.ts
var import_obsidian2 = require("obsidian");

// src/ui/atoms/dom.ts
var Dom = class {
  /**
   * Element 생성 헬퍼
   * @param tag  "div" | "button" | …
   * @param cls  class="" 값 (공백 구분, 선택)
   * @param text textContent (선택)
   * @returns    HTMLElementTagNameMap[K] – 정확한 태그 타입
   *
   * 📌 사용 예
   * ```ts
   * const btn = Dom.el("button",
   *   "it-btn it-btn--primary",
   *   "Click");
   * ```
   */
  static el(tag, cls = "", text = "") {
    const el = document.createElement(tag);
    if (cls)
      el.className = cls;
    if (text)
      el.textContent = text;
    return el;
  }
};

// src/ui/atoms/button.ts
var ButtonFactory = class {
  constructor(app) {
    this.app = app;
  }
  /*───────────────────────────────
    🔹 ➊  새 캔버스 버튼 preset 추가
  ───────────────────────────────*/
  /** ＋ **New canvas** – 공통 스타일만 지정 (onClick 은 FilterBar 쪽에서 재바인딩) */
  newCanvas() {
    return this.create({
      label: "\uFF0B New canvas",
      cls: "interactive_table-button interactive_table-button--new-canvas",
      onClick: () => {
      }
    });
  }
  /*============================================================
    create() – 공통 버튼 생성 헬퍼
  ============================================================*/
  create(opts) {
    const btn = Dom.el("button", opts.cls, opts.label);
    if (opts.disabled) {
      btn.classList.add(`${opts.cls}--disabled`);
      btn.setAttribute("aria-disabled", "true");
      btn.disabled = true;
      return btn;
    }
    btn.onclick = opts.onClick;
    return btn;
  }
  /*============================================================
    2-A. Preset Buttons
  ============================================================*/
  /** ↪ **Open Folder** – 파일 관리자에서 폴더/파일 열기 */
  openFolder(relPath) {
    return this.create({
      label: "\u21AA Open Folder",
      cls: "interactive_table-button interactive_table-button--open-folder",
      onClick: async () => {
        try {
          const { shell } = window.require("electron");
          const pathMod = window.require("path");
          const vaultBase = this.app.vault.adapter.basePath;
          const abs = pathMod.resolve(vaultBase, relPath);
          const isFile = pathMod.extname(abs) !== "";
          isFile ? shell.showItemInFolder(abs) : shell.openPath(abs);
        } catch (_) {
        }
      }
    });
  }
  /** ＋ **New note** – 탐색기 ‘새 파일’ 명령 호출 */
  newNote() {
    return this.create({
      label: "\uFF0B New note",
      cls: "interactive_table-button interactive_table-button--new-note",
      onClick: () => this.app.commands.executeCommandById("file-explorer:new-file")
    });
  }
  /** ↻ **Refresh** – async 재렌더 콜백 전담 */
  refresh(onRefresh) {
    return this.create({
      label: "\u21BB",
      cls: "interactive_table-button interactive_table-button--refresh",
      onClick: onRefresh
    });
  }
  /** **Tag Filter** – 현재 태그 표시 & 선택 모달 */
  tagFilter(curTag, onSelect) {
    return this.create({
      label: curTag,
      cls: "interactive_table-button interactive_table-button--tag-filter",
      onClick: onSelect
    });
  }
  /** **Front-matter Filter** – 프로퍼티명 표시 & 선택 모달 */
  filter(propName, onSelect) {
    return this.create({
      label: propName,
      cls: "interactive_table-button interactive_table-filter__btn",
      onClick: onSelect
    });
  }
  /** **Pagination** – ‘← / → / 1…’ 버튼 (disabled 지원) */
  pagination(label, disabled, onClick) {
    return this.create({
      label,
      cls: "interactive_table-pagination__btn",
      disabled,
      onClick
    });
  }
};

// src/ui/atoms/input.ts
var Input = class {
  /*───────────────────────────────
    2-A. Text Input
  ───────────────────────────────*/
  static text(opts = {}) {
    var _a3, _b;
    const el = Dom.el("input", (_a3 = opts.cls) != null ? _a3 : "");
    el.type = "text";
    el.placeholder = (_b = opts.placeholder) != null ? _b : "";
    if (opts.value != null)
      el.value = String(opts.value);
    if (opts.onEnter)
      el.addEventListener("keydown", (ev) => {
        if (ev.key === "Enter")
          opts.onEnter(el.value.trim());
      });
    if (opts.onChange)
      el.addEventListener("change", () => opts.onChange(el.value.trim()));
    return el;
  }
  /*───────────────────────────────
    2-B. Number Input
  ───────────────────────────────*/
  static number(opts = {}) {
    var _a3;
    const el = Dom.el("input", (_a3 = opts.cls) != null ? _a3 : "");
    el.type = "number";
    if (opts.min != null)
      el.min = String(opts.min);
    if (opts.max != null)
      el.max = String(opts.max);
    if (opts.step != null)
      el.step = String(opts.step);
    if (opts.value != null)
      el.value = String(opts.value);
    if (opts.onChange)
      el.addEventListener(
        "change",
        () => opts.onChange(el.value === "" ? NaN : Number(el.value))
      );
    return el;
  }
  /*───────────────────────────────
    2-C. Date Input (YYYY-MM-DD)
  ───────────────────────────────*/
  static date(opts = {}) {
    var _a3;
    const el = Dom.el("input", (_a3 = opts.cls) != null ? _a3 : "");
    el.type = "date";
    if (opts.value != null) {
      const val = opts.value instanceof Date ? opts.value.toISOString().slice(0, 10) : String(opts.value);
      el.value = val;
    }
    if (opts.onChange)
      el.addEventListener(
        "change",
        () => opts.onChange(
          el.value ? /* @__PURE__ */ new Date(`${el.value}T00:00:00`) : ""
        )
      );
    return el;
  }
};

// src/ui/atoms/spinner.ts
var Spinner = class {
  /**
   * Create a new spinner element.
   *
   * @param small   set to `true` for 12×12 variant
   * @param cls     extra className(s) appended to `.ct-spinner`
   * @returns       HTMLDivElement ready for insertion
   */
  static create(small = false, cls = "") {
    const spinner = Dom.el("div", `ct-spinner${small ? " ct-spinner--sm" : ""}${cls ? " " + cls : ""}`);
    return spinner;
  }
  /*─────────────────────────────────────────────────────────────
    Convenience helpers mirroring legacy ui.ts API
  ─────────────────────────────────────────────────────────────*/
  /** Legacy alias – default 16×16 spinner */
  static default() {
    return Spinner.create();
  }
  /** 12×12 tiny spinner (inline icon size) */
  static tiny() {
    return Spinner.create(true);
  }
};

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    if (typeof crypto === "undefined" || !crypto.getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    getRandomValues = crypto.getRandomValues.bind(crypto);
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = { randomUUID };

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  var _a3, _b, _c;
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = (_c = (_b = options.random) != null ? _b : (_a3 = options.rng) == null ? void 0 : _a3.call(options)) != null ? _c : rng();
  if (rnds.length < 16) {
    throw new Error("Random bytes length must be >= 16");
  }
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    if (offset < 0 || offset + 16 > buf.length) {
      throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
    }
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// src/ui/molecules/FilterBar.ts
var FilterBar = class {
  constructor(app, host, note, vid, cols, cb, opts, fmList, tagList) {
    this.app = app;
    this.note = note;
    this.vid = vid;
    this.cols = cols;
    this.cb = cb;
    this.opts = opts;
    this.fmList = fmList;
    this.tagList = tagList;
    this.btnFactory = new ButtonFactory(app);
    this.wrap = Dom.el("div", "ct-filter-bar");
    host.prepend(this.wrap);
    if (opts.showFrontmatterFilterButton)
      this.buildFrontmatterFilters();
    if (opts.showTagFilterButton)
      this.buildTagFilter();
    if (opts.showSearchBox)
      this.buildSearchBox();
    this.btns = Dom.el("div", "ct-filter-bar__utils");
    this.wrap.appendChild(this.btns);
    if (opts.showOpenFolderButton && opts.folderPath)
      this.btns.appendChild(this.btnFactory.openFolder(opts.folderPath));
    if (opts.showNewNoteButton) {
      const btn = this.btnFactory.newNote();
      btn.onclick = async () => {
        var _a3;
        const folderPath = (_a3 = this.opts.folderPath) != null ? _a3 : this.note.substring(0, this.note.lastIndexOf("/"));
        let tFolder = this.app.vault.getAbstractFileByPath(folderPath);
        if (!(tFolder instanceof import_obsidian2.TFolder)) {
          await this.app.vault.createFolder(folderPath);
          tFolder = this.app.vault.getAbstractFileByPath(folderPath);
        }
        const fileName = `Untitled ${window.moment().format("YYYY-MM-DD HHmmss")}.md`;
        const file = await this.app.fileManager.createNewMarkdownFile(tFolder, fileName);
        await openInNewLeafAndClose(this.app, file.path, host);
      };
      this.btns.appendChild(btn);
    }
    if (opts.showNewCanvasButton) {
      const btn = this.btnFactory.newCanvas();
      btn.onclick = async () => {
        var _a3;
        try {
          const folderPath = (_a3 = this.opts.folderPath) != null ? _a3 : this.note.substring(0, this.note.lastIndexOf("/"));
          let tFolder = this.app.vault.getAbstractFileByPath(folderPath);
          if (!(tFolder instanceof import_obsidian2.TFolder)) {
            await this.app.vault.createFolder(folderPath);
            tFolder = this.app.vault.getAbstractFileByPath(folderPath);
          }
          const ts = window.moment().format("YYYY-MM-DD HHmmss");
          let name = await this.promptForName(`Untitled ${ts}`);
          if (!name)
            return;
          if (!name.endsWith(".canvas"))
            name += ".canvas";
          const full = `${folderPath}/${name}`;
          const exists = this.app.vault.getAbstractFileByPath(full);
          if (!exists) {
            await this.createBlankCanvas(full);
          }
          await openInNewLeafAndClose(this.app, full, host);
        } catch (e) {
          new import_obsidian2.Notice(`Failed to create canvas: ${e.message}`);
          console.error(e);
        }
      };
      this.btns.appendChild(btn);
    }
    if (opts.showRefreshButton)
      this.btns.appendChild(this.btnFactory.refresh(async () => {
        const btn = event.currentTarget;
        const prev = btn.textContent;
        btn.replaceChildren(Spinner.tiny());
        try {
          await this.cb.rerender();
        } finally {
          btn.textContent = prev != null ? prev : "\u21BB";
        }
      }));
  }
  /*───────────────────────────────────────────────────────────────
    2‑A. Tag Filter Button
  ───────────────────────────────────────────────────────────────*/
  buildTagFilter() {
    const key = `tagFilter_${this.vid}`;
    const cur = this.cb.getState(this.note, this.vid, key) || "ALL";
    const btn = this.btnFactory.tagFilter(cur === "ALL" ? "#Tags" : cur, async () => {
      if (!this.tagList)
        return;
      const chosen = await this.cb.suggester(this.tagList);
      if (chosen == null)
        return;
      this.cb.sync(this.note, this.vid, key, chosen);
    });
    if (cur !== "ALL")
      btn.classList.add("is-active");
    this.wrap.appendChild(btn);
  }
  /*───────────────────────────────────────────────────────────────
    2‑B. Front‑matter Filter Buttons
  ───────────────────────────────────────────────────────────────*/
  buildFrontmatterFilters() {
    this.fmList.forEach(({ prop, name, values }) => {
      const key = `filter_${this.vid}_${prop}`;
      const cur = this.cb.getState(this.note, this.vid, key) || "ALL";
      const base = name || prop;
      const label = cur === "ALL" ? base : `${base}: ${cur}`;
      const btn = this.btnFactory.filter(label, async () => {
        const chosen = await this.cb.suggester(values);
        if (chosen == null)
          return;
        this.cb.sync(this.note, this.vid, key, chosen);
      });
      if (cur !== "ALL")
        btn.classList.add("is-active");
      this.wrap.appendChild(btn);
    });
  }
  collectPropValues(prop) {
    var _a3, _b;
    const pages = (_b = (_a3 = this.cb.getLocalState(this.note, this.vid)) == null ? void 0 : _a3.pages) != null ? _b : [];
    const set = /* @__PURE__ */ new Set();
    pages.forEach((pg) => {
      const raw = this.cb.getVal(pg, prop);
      const v = this.cb.formatAsDate(raw) || String(raw != null ? raw : "-");
      set.add(v);
    });
    return Array.from(set).filter((v) => v !== "-").sort();
  }
  /*───────────────────────────────────────────────────────────────
    2‑C. Search Box
  ───────────────────────────────────────────────────────────────*/
  buildSearchBox() {
    const keyReady = `search_ready_${this.vid}`;
    const keyQuery = `search_${this.vid}`;
    const prev = this.cb.getState(this.note, this.vid, keyQuery) || "";
    const input = Input.text({
      cls: "ct-filter-bar__search",
      placeholder: "Search\u2026",
      value: prev,
      onEnter: (q) => {
        this.cb.sync(this.note, this.vid, keyReady, true);
        this.cb.sync(this.note, this.vid, keyQuery, q);
      }
    });
    this.wrap.appendChild(input);
  }
  /*───────────────────────────────────────────────────────────────
    2‑D. Canvas new
  ───────────────────────────────────────────────────────────────*/
  /* 클래스 내부(any 위치) */
  async createBlankCanvas(path) {
    const blank = JSON.stringify(
      { nodes: [], edges: [], version: "1.0.0", id: v4_default() },
      null,
      2
    );
    await this.app.vault.create(path, blank);
  }
  async promptForName(def) {
    return new Promise((resolve) => {
      const { Modal: Modal2 } = globalThis.coverTable.obsidian;
      class NameModal extends Modal2 {
        constructor(app) {
          super(app);
          this.value = def;
          this.accepted = false;
        }
        onOpen() {
          const { contentEl } = this;
          contentEl.createEl("h1", { text: "New canvas name" });
          const input = contentEl.createEl("input", { value: this.value });
          input.style.width = "100%";
          input.focus();
          const accept = () => {
            this.value = input.value.trim();
            this.accepted = true;
            this.close();
          };
          input.addEventListener("keydown", (ev) => {
            if (ev.key === "Enter")
              accept();
          });
          const ok = contentEl.createEl("button", { text: "OK" });
          ok.onclick = accept;
        }
        onClose() {
          this.contentEl.empty();
          resolve(this.accepted ? this.value : null);
        }
      }
      new NameModal(this.app).open();
    });
  }
};

// src/ui/molecules/Pagination.ts
var Pagination = class {
  constructor(note, vid, cb, host, opts) {
    this.note = note;
    this.vid = vid;
    this.cb = cb;
    var _a3;
    this.btnFactory = new ButtonFactory(cb);
    const per = Math.max(opts.perPage, 1);
    this.totalPages = Math.ceil(opts.totalRows / per);
    if (this.totalPages <= 1) {
      this.wrap = Dom.el("div");
      return;
    }
    this.wrap = Dom.el("div", "ct-pagination");
    host.appendChild(this.wrap);
    this.render((_a3 = opts.maxButtons) != null ? _a3 : 7);
  }
  /*───────────────────────────────────────────────────────────────
    render() – (re)create buttons set
  ───────────────────────────────────────────────────────────────*/
  render(maxBtn) {
    var _a3;
    this.wrap.empty();
    const key = `pagination_${this.vid}`;
    const cur = (_a3 = this.cb.getState(this.note, this.vid, key)) != null ? _a3 : 0;
    const add = (lbl, pg, disabled = false) => {
      const btn = this.btnFactory.pagination(lbl, disabled, () => {
        this.cb.sync(this.note, this.vid, key, pg);
      });
      btn.classList.add(lbl === "\u2190" || lbl === "\u2192" ? "interactive_table-pagination__btn--arrow" : "interactive_table-pagination__btn--num");
      if (disabled)
        btn.classList.add("is-active");
      this.wrap.appendChild(btn);
    };
    add("\u2190", cur - 1, cur === 0);
    const win = Math.max(3, maxBtn);
    let start = Math.max(0, cur - Math.floor(win / 2));
    let end = start + win - 1;
    if (end >= this.totalPages) {
      end = this.totalPages - 1;
      start = Math.max(0, end - win + 1);
    }
    if (start > 0)
      add("1", 0);
    if (start > 1)
      this.wrap.appendChild(Dom.el("span", "ct-pagination__ellipsis", "\u2026"));
    for (let p = start; p <= end; p++) {
      add(String(p + 1), p, p === cur);
    }
    if (end < this.totalPages - 2)
      this.wrap.appendChild(Dom.el("span", "ct-pagination__ellipsis", "\u2026"));
    if (end < this.totalPages - 1)
      add(String(this.totalPages), this.totalPages - 1);
    add("\u2192", cur + 1, cur >= this.totalPages - 1);
  }
};

// src/features/interactive-table/utils/tag.ts
function normalizeTags(raw) {
  const arr = raw == null ? [] : Array.isArray(raw) ? raw : raw instanceof Set ? [...raw] : typeof raw === "string" ? raw.split(/[,;]/).filter(Boolean) : [];
  return arr.map((t) => (t != null ? t : "").trim()).filter(Boolean).map((t) => t.startsWith("#") ? t.slice(1) : t);
}

// src/ui/layouts/DataTable.ts
function pad(n) {
  return n.toString().padStart(2, "0");
}
function fmtDate(d) {
  return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}`;
}
function renderTags(raw) {
  const wrap = Dom.el("span", "");
  const tags = normalizeTags(raw).sort((a, b) => a.localeCompare(b, "ko"));
  tags.forEach((t, i) => {
    const span = Dom.el("span", "ct-tag", t);
    const prefix = t.split("/")[0];
    span.classList.add(`ct-tag--${prefix}`);
    wrap.appendChild(span);
    if (i < tags.length - 1)
      wrap.appendChild(document.createTextNode(", "));
  });
  return wrap;
}
function renderByFormat(raw, fmt) {
  var _a3;
  if (raw == null)
    return "";
  switch (fmt) {
    case "num":
      return String(raw);
    case "year": {
      const y = (_a3 = String(raw).match(/\d{4}/)) == null ? void 0 : _a3[0];
      return y != null ? y : String(raw);
    }
    case "date": {
      const d = new Date(raw);
      return isNaN(d.getTime()) ? String(raw) : fmtDate(d);
    }
    case "tags": {
      return renderTags(raw);
    }
    default:
      return String(raw);
  }
}
function getVal(row, prop) {
  return prop.startsWith("file.") ? prop.split(".").reduce((v, k) => v == null ? void 0 : v[k], row) : row[prop];
}
var DataTable = class {
  /**
   * Build a complete <table> element according to options.
   */
  static build(opts) {
    const table = Dom.el("table", "ct-data-table");
    if (opts.zebra)
      table.classList.add("ct-data-table--zebra");
    const thead = Dom.el("thead", "");
    const trHead = Dom.el("tr", "");
    opts.columns.filter((c) => c.column).forEach((col) => {
      const th = Dom.el("th", "ct-data-table__th", col.name);
      const curProp = opts.cb.getState(opts.notePath, opts.viewId, `sort_${opts.viewId}`);
      const curDir = opts.cb.getState(opts.notePath, opts.viewId, `sort_direction_${opts.viewId}`);
      if (col.prop === curProp) {
        if (curDir === "asc")
          th.classList.add("is-asc");
        if (curDir === "desc")
          th.classList.add("is-desc");
      }
      th.addEventListener("click", () => {
        trHead.querySelectorAll(".ct-data-table__th").forEach((el) => el.classList.remove("is-asc", "is-desc"));
        const keySort = `sort_${opts.viewId}`;
        const keyDir = `sort_direction_${opts.viewId}`;
        const curProp2 = opts.cb.getState(opts.notePath, opts.viewId, keySort);
        const curDir2 = opts.cb.getState(opts.notePath, opts.viewId, keyDir);
        let nextProp = null;
        let nextDir = null;
        const anySorted = curProp2 && curDir2;
        if (col.prop !== curProp2) {
          if (anySorted) {
            nextProp = null;
            nextDir = null;
          } else {
            nextProp = col.prop;
            nextDir = "asc";
          }
        } else {
          if (curDir2 === null) {
            nextProp = col.prop;
            nextDir = "asc";
          } else if (curDir2 === "asc") {
            nextProp = col.prop;
            nextDir = "desc";
          } else {
            nextProp = null;
            nextDir = null;
          }
        }
        if (nextDir === "asc")
          th.classList.add("is-asc");
        if (nextDir === "desc")
          th.classList.add("is-desc");
        opts.cb.sync(opts.notePath, opts.viewId, keySort, nextProp);
        opts.cb.sync(opts.notePath, opts.viewId, keyDir, nextDir);
      });
      trHead.appendChild(th);
    });
    thead.appendChild(trHead);
    table.appendChild(thead);
    const tbody = Dom.el("tbody", "");
    opts.rows.forEach((row, rowIdx) => {
      var _a3, _b;
      const tr = Dom.el("tr", "ct-data-table__tr");
      tr.dataset.path = (_b = (_a3 = row == null ? void 0 : row.file) == null ? void 0 : _a3.path) != null ? _b : "";
      tr.onclick = () => {
        const isActive = tr.classList.contains("ct-row--active");
        if (isActive) {
          tr.classList.remove("ct-row--active");
          return;
        }
        const prev = table.querySelector(".ct-row--active");
        if (prev)
          prev.classList.remove("ct-row--active");
        tr.classList.add("ct-row--active");
      };
      opts.columns.filter((c) => c.column).forEach((col) => {
        const td = Dom.el("td", "ct-data-table__td");
        let content;
        if (opts.cellRenderer) {
          content = opts.cellRenderer(row, col);
        } else {
          const raw = getVal(row, col.prop);
          if (col.prop === "obsidianUIMode" && String(raw) === "source") {
            const span = Dom.el("span", "ct-mode-source", "source");
            content = span;
          } else {
            content = renderByFormat(raw, col.format);
          }
        }
        if (content instanceof HTMLElement)
          td.appendChild(content);
        else
          td.textContent = content;
        tr.appendChild(td);
      });
      tbody.appendChild(tr);
    });
    table.appendChild(tbody);
    return table;
  }
};

// src/ui/interactive-table/UIManager.ts
async function openPathInNewLeaf(app, path) {
  if (!path)
    return;
  const file = app.vault.getAbstractFileByPath(path);
  if (!(file instanceof import_obsidian3.TFile))
    return;
  const leaf = app.workspace.getLeaf(true);
  await leaf.openFile(file);
  app.workspace.setActiveLeaf(leaf);
}
async function openInNewLeafAndClose(app, filePath, _currHost) {
  var _a3;
  const abs = (_a3 = app.metadataCache.getFirstLinkpathDest(filePath, "")) != null ? _a3 : app.vault.getAbstractFileByPath(filePath);
  if (!(abs instanceof import_obsidian3.TFile))
    return;
  const leaf = app.workspace.getLeaf(true);
  await leaf.openFile(abs);
  app.workspace.setActiveLeaf(leaf);
}
var UIManager = class {
  constructor(app, callbacks) {
    this.app = app;
    this.cb = callbacks;
  }
  /*============================================================
    buildView() – (re)render entire Interactive‑Table block
  ============================================================*/
  async buildView(hostPre, notePath, viewId, rows, columns, perPage, totalRows, opts, fmList = [], tagList = null, cb = this.cb) {
    hostPre.empty();
    hostPre.classList.add("ct-it-container");
    const fbOpts = {
      showOpenFolderButton: opts.showOpenFolderButton,
      showNewNoteButton: opts.showNewNoteButton,
      showNewCanvasButton: opts.showNewCanvasButton,
      // ★
      showTagFilterButton: opts.showTagFilterButton,
      showFrontmatterFilterButton: opts.showFrontmatterFilterButton,
      showSearchBox: opts.showSearchBox,
      showRefreshButton: opts.showRefreshButton,
      folderPath: opts.folderPath
    };
    new FilterBar(
      this.app,
      hostPre,
      notePath,
      viewId,
      columns,
      cb,
      fbOpts,
      fmList,
      tagList
    );
    const table = DataTable.build({
      columns,
      rows,
      zebra: true,
      onRowClick: (row) => {
        var _a3;
        const file = (_a3 = row == null ? void 0 : row.file) == null ? void 0 : _a3.path;
        if (!file)
          return;
        openInNewLeafAndClose(this.app, file, hostPre);
      },
      notePath,
      viewId,
      cb: {
        getState: cb.getState,
        sync: cb.sync
      }
    });
    hostPre.appendChild(table);
    table.addEventListener(
      "dblclick",
      async (e) => {
        var _a3, _b, _c;
        const el = e.target;
        if (el.closest(".nav-file-title"))
          return;
        const href = (_a3 = el.closest("a")) == null ? void 0 : _a3.getAttribute("href");
        const row = el.closest("tr");
        const path = (_b = href != null ? href : row == null ? void 0 : row.dataset.path) != null ? _b : "";
        if (!path)
          return;
        const target = (_c = this.app.metadataCache.getFirstLinkpathDest(path, "")) != null ? _c : this.app.vault.getAbstractFileByPath(path);
        if (!(target instanceof import_obsidian3.TFile))
          return;
        const ext = target.extension.toLowerCase();
        if (!["md", "pdf", "canvas"].includes(ext))
          return;
        e.preventDefault();
        await openPathInNewLeaf(this.app, target.path);
      },
      true
      // capture 단계
    );
    if (perPage > 0) {
      const pgOpts = {
        perPage,
        totalRows
      };
      new Pagination(notePath, viewId, cb, hostPre, pgOpts);
    }
  }
};

// src/features/interactive-table/services/TableController.ts
var import_obsidian4 = require("obsidian");
var TableController = class {
  constructor(app) {
    this.app = app;
    /*─────────── 필드 ───────────*/
    this.dateYMDRegex = /^(\d{4})-(\d{1,2})-(\d{1,2})$/;
    this.timeHMRegex = /^(\d{1,2}):(\d{1,2})$/;
  }
  /*════════════════════════════════════════════
    A.  “인라인 편집” 공용 진입점
  ════════════════════════════════════════════*/
  /**
   * 파일 이름/프런트매터 등 *단일 프로퍼티* 수정용
   *
   * @example
   *   await svc.editProp({ type: "file name", path: "Diary/2025-05-13.md" });
   */
  async editProp(opts) {
    var _a3, _b;
    const file = this.app.vault.getAbstractFileByPath((0, import_obsidian4.normalizePath)(opts.path));
    if (!(file instanceof import_obsidian4.TFile))
      return;
    if (opts.type === "file name") {
      const oldName = file.basename;
      const next = await this.textInput(oldName);
      if (!next || next === oldName)
        return;
      const folder = (_b = (_a3 = file.parent) == null ? void 0 : _a3.path) != null ? _b : "";
      const ext = file.extension;
      const dest = folder ? `${folder}/${next}.${ext}` : `${next}.${ext}`;
      try {
        await this.app.vault.rename(file, dest);
        new import_obsidian4.Notice("\u2705 File renamed");
      } catch (e) {
        Log.e(e);
        new import_obsidian4.Notice("\u26A0\uFE0F Failed to rename file");
      }
    }
  }
  /*────────────────────────────────────────────
    A-1. 간단 입력 모달
  ────────────────────────────────────────────*/
  async textInput(def) {
    return new Promise((resolve) => {
      const { Modal: Modal2 } = globalThis.coverTable.obsidian;
      class PromptModal extends Modal2 {
        constructor(app) {
          super(app);
          this.result = def;
        }
        onOpen() {
          const { contentEl } = this;
          contentEl.createEl("h1", { text: "Input" });
          const input = contentEl.createEl("input", { value: this.result });
          input.style.width = "100%";
          input.addEventListener("keydown", (ev) => {
            if (ev.key === "Enter") {
              this.result = input.value.trim();
              this.close();
              resolve(this.result);
            }
          });
          const ok = contentEl.createEl("button", { text: "OK" });
          ok.onclick = () => {
            this.result = input.value.trim();
            this.close();
            resolve(this.result);
          };
        }
        onClose() {
          this.contentEl.empty();
        }
      }
      new PromptModal(this.app).open();
    });
  }
  /*════════════════════════════════════════════
    B. 값 추출 / 날짜·시간 파싱 유틸
  ════════════════════════════════════════════*/
  /** Dataview Page → 임의 프로퍼티 값 */
  getVal(page, prop) {
    return prop.startsWith("file.") ? prop.split(".").reduce((v, k) => v == null ? void 0 : v[k], page) : page[prop];
  }
  /** “YYYY-MM-DD” 혹은 Date.parse 가능한 문자열 → Date|null */
  parseDateYMD(str) {
    if (typeof str !== "string")
      return null;
    const m = str.match(this.dateYMDRegex);
    if (m) {
      const [_, y, mo, d] = m.map(Number);
      if (y < 1e3 || y > 9999 || mo < 1 || mo > 12 || d < 1 || d > 31)
        return null;
      return new Date(y, mo - 1, d);
    }
    const dt = new Date(str);
    return isNaN(dt.getTime()) ? null : dt;
  }
  /** “HH:MM” → Date(today) | null  (정렬용) */
  parseTimeHM(str) {
    if (typeof str !== "string")
      return null;
    const m = str.match(this.timeHMRegex);
    if (!m)
      return null;
    const [_, hh, mm] = m.map(Number);
    if (hh > 23 || mm > 59)
      return null;
    const d = /* @__PURE__ */ new Date();
    d.setHours(hh, mm, 0, 0);
    return d;
  }
  /** 문자열·숫자·날짜 → 소팅 키 */
  getSortValue(v) {
    if (v == null)
      return "";
    const s = typeof v === "string" ? v : String(v);
    const d = this.parseDateYMD(s) || this.parseTimeHM(s);
    if (d)
      return d.getTime();
    const n = parseFloat(s);
    return isNaN(n) ? s.toLowerCase() : n;
  }
  /** Date|string|null → “YYYY-MM-DD” */
  formatAsDate(v) {
    if (v == null)
      return "";
    const d = this.parseDateYMD(String(v));
    if (!d)
      return String(v);
    const y = d.getFullYear();
    const m = d.getMonth() + 1;
    const dd = d.getDate();
    return `${y}-${m < 10 ? "0" : ""}${m}-${dd < 10 ? "0" : ""}${dd}`;
  }
  /*════════════════════════════════════════════
    C. 정렬 & 필터 – (InteractiveTable 동일 로직)
  ════════════════════════════════════════════*/
  /** in-place 정렬 (mutate) */
  sortByProp(arr, prop, dir = "asc") {
    if (!prop || prop === "title_link" || prop === "tags")
      return arr;
    return arr.sort((a, b) => {
      const A = this.getSortValue(this.getVal(a, prop));
      const B = this.getSortValue(this.getVal(b, prop));
      if (typeof A === "number" && typeof B === "number")
        return dir === "asc" ? A - B : B - A;
      return dir === "asc" ? String(A).localeCompare(String(B)) : String(B).localeCompare(String(A));
    });
  }
  /*════════════════════════════════════════════
    D. 제너럴 헬퍼
  ════════════════════════════════════════════*/
  /**
   * 옵션 리스트 → SuggestModal
   *  ‣ InteractiveTable 및 UI 모듈에서 직접 호출
   */
  async suggester(values) {
    const { SuggestModal: SuggestModal2 } = globalThis.coverTable.obsidian;
    return new Promise((resolve) => {
      class Sugg extends SuggestModal2 {
        constructor(app) {
          super(app);
        }
        getSuggestions(q) {
          const ql = q.toLowerCase();
          return values.filter((v) => v.toLowerCase().includes(ql));
        }
        renderSuggestion(v, el) {
          el.createEl("div", { text: v });
        }
        onChooseSuggestion(v) {
          resolve(v);
        }
      }
      new Sugg(this.app).open();
    });
  }
};

// src/core/state/StateCenter.ts
var TAB_ID = (crypto == null ? void 0 : crypto.randomUUID) ? crypto.randomUUID() : `tab-${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 10)}`;
var StateCenter = class {
  /**
   * * 2) Constructor (생성자)
   * - 브라우저의 localStorage 및 팝업 메시지를 수신하여 상태를 동기화하는 역할
   */
  constructor() {
    /**
     * * 1) 내부 저장소 구조
     */
    /**
     * * 1.1) viewId별 화면(Pane) 목록 저장소 
     * - 전역함수 호출
     */
    this.paneMap = /* @__PURE__ */ new Map();
    /**
     * * 1.2) viewId별 BroadcastChannel 저장소
     * - 내부함수 호출
     */
    this.bcMap = /* @__PURE__ */ new Map();
    /**
     * * 1.3) viewId별 Listener 함수 목록
     * - 전역함수 호출
     */
    this.subs = /* @__PURE__ */ new Map();
    window.addEventListener("storage", (e) => {
      var _a3;
      if (!((_a3 = e.key) == null ? void 0 : _a3.startsWith("coverTable::")) || e.newValue == null)
        return;
      const [, notePath, viewId] = e.key.split("::");
      try {
        this.applyRemote(viewId, JSON.parse(e.newValue));
      } catch (e2) {
      }
    });
    window.addEventListener("message", (ev) => {
      var _a3;
      if (!((_a3 = ev.data) == null ? void 0 : _a3.__coverTable))
        return;
      const { viewId, payload } = ev.data;
      if (payload.sender === TAB_ID)
        return;
      this.applyRemote(viewId, payload.state);
    });
  }
  /**
   * * 1.4) [유틸 함수] 화면(Pane)이 DOM에서 사라졌는지 검사 후 제거
   */
  sweep(viewId) {
    var _a3;
    const alive = ((_a3 = this.paneMap.get(viewId)) != null ? _a3 : []).filter((p) => document.body.contains(p.leafEl));
    this.paneMap.set(viewId, alive);
  }
  /**
   * * 3) 전역 함수 목록
   */
  /**
   * * 3.1) addPane
   * - 목적 : 새로운 Inst를 화면에 등록하고, 상태 변화를 감지해서 자동으로 갱신
   * - 입력 : inst
   * - 출력 : x
   */
  addPane(inst) {
    var _a3;
    const list = (_a3 = this.paneMap.get(inst.viewId)) != null ? _a3 : [];
    if (list.some((p) => p.container === inst.container)) {
      return;
    }
    list.push(inst);
    this.paneMap.set(inst.viewId, list);
    Log.d("addPane \u25B6", inst.viewId, "\uD604\uC7AC Pane \uC218:", list.length);
    this.sweep(inst.viewId);
    const fn = async () => {
      Log.d("listener \uD638\uCD9C \u25B6", inst.viewId);
      await inst.refreshView(true);
      const evt = new CustomEvent("__cover_refresh", { detail: inst.viewId });
      window.dispatchEvent(evt);
    };
    this.subscribe(inst.viewId, fn);
    if (inst.leafEl) {
      const ob = new MutationObserver(() => {
        var _a4;
        if (inst.leafEl && !document.body.contains(inst.leafEl)) {
          this.unsubscribe(inst.viewId, fn);
          const remain = ((_a4 = this.paneMap.get(inst.viewId)) != null ? _a4 : []).filter((p) => p !== inst);
          this.paneMap.set(inst.viewId, remain);
          Log.d("Pane \uC81C\uAC70 \u25B6", inst.viewId, "\uB0A8\uC740 Pane:", remain.length);
          ob.disconnect();
        }
      });
      ob.observe(document.body, { childList: true, subtree: true });
    }
    this.ensureChannel(inst.viewId);
  }
  /**
   * * 3.2) removePane
   * - 목적 : 등록된 Inst를 제거하고 자원 정리
   * - 입력 : notePath, viewId
   * - 출력 : x
   */
  removePane(notePath, viewId) {
    var _a3, _b, _c;
    this.sweep(viewId);
    const remain = ((_a3 = this.paneMap.get(viewId)) != null ? _a3 : []).filter((p) => p.notePath !== notePath);
    this.paneMap.set(viewId, remain);
    Log.d("removePane \u25B6", viewId, "\uB0A8\uC740 Pane:", remain.length);
    if (remain.length === 0) {
      (_b = this.subs.get(viewId)) == null ? void 0 : _b.clear();
      this.subs.delete(viewId);
      (_c = this.bcMap.get(viewId)) == null ? void 0 : _c.close();
      this.bcMap.delete(viewId);
      try {
        localStorage.removeItem(this.makeKey(notePath, viewId));
      } catch (e) {
      }
    }
  }
  /**
   * * 4) 내부 함수 목록
   */
  /**
   * * 4.1) get
   * - 목적 : 저장된 상태값 가져오기 (localStorage)
   * - 입력 : notePath, viewId
   * - 출력 : Record
   */
  get(notePath, viewId) {
    const raw = localStorage.getItem(this.makeKey(notePath, viewId));
    try {
      return raw ? JSON.parse(raw) : {};
    } catch (e) {
      return {};
    }
  }
  /**
   * * 4.2) set
   * - 목적 : 상태를 저장하고, 다른 탭에게도 전달하고, 리스너 실행
   * - 입력 : inst, patch, wipe, silent
   * - 출력 : x
   */
  set(inst, patch, wipe = false, silent = false) {
    var _a3;
    Log.d("set \u25B6", inst.viewId, { patch, wipe, silent });
    if (window.__COVER_TABLE_DISABLE_BC)
      silent = true;
    const key = this.makeKey(inst.notePath, inst.viewId);
    const before = this.get(inst.notePath, inst.viewId);
    const next = wipe ? patch : { ...before, ...patch };
    try {
      localStorage.setItem(key, JSON.stringify(next));
    } catch (e) {
      if ((e == null ? void 0 : e.name) === "QuotaExceededError") {
        console.warn("[Cover-Table] localStorage quota exceeded \u2192 using memory only");
      } else {
        throw e;
      }
    }
    if (!silent) {
      const payload = { sender: TAB_ID, state: next };
      (_a3 = this.bcMap.get(inst.viewId)) == null ? void 0 : _a3.postMessage(payload);
      window.postMessage({ __coverTable: true, viewId: inst.viewId, payload }, "*");
    }
    this.emit(inst.viewId, next);
  }
  /**
   * * 4.3) subscribe
   * - 목적 : 특정 viewId 상태가 바뀔 때 실행될 함수 등록
   * - 입력 : viewId, fn
   * - 출력 : x
   */
  subscribe(viewId, fn) {
    var _a3;
    const set = (_a3 = this.subs.get(viewId)) != null ? _a3 : /* @__PURE__ */ new Set();
    set.add(fn);
    this.subs.set(viewId, set);
  }
  /**
   * * 4.4) unsubscribe
   * - 목적 : 등록된 리스너 제거
   * - 입력 : viewId, fn
   * - 출력 : x
   */
  unsubscribe(viewId, fn) {
    var _a3;
    (_a3 = this.subs.get(viewId)) == null ? void 0 : _a3.delete(fn);
  }
  /**
   * * 4.5) emit
   * - 목적 : 등록된 리스너들 실행 (상태 반영)
   * - 입력 : viewId, state
   * - 출력 : x
   */
  emit(viewId, state) {
    var _a3;
    (_a3 = this.subs.get(viewId)) == null ? void 0 : _a3.forEach((cb) => {
      try {
        cb(state);
      } catch (e) {
        console.error(e);
      }
    });
  }
  /**
   * * 4.6) ensureChannel
   * - 목적 : 탭 간 통신 채널 생성 및 메시지 수신 설정
   * - 입력 : viewId
   * - 출력 : x
   */
  ensureChannel(viewId) {
    if (this.bcMap.has(viewId))
      return;
    const bc = new BroadcastChannel(`coverTable-${viewId}`);
    bc.onmessage = (ev) => {
      const { sender, state } = ev.data || {};
      if (sender === TAB_ID)
        return;
      this.applyRemote(viewId, state);
    };
    this.bcMap.set(viewId, bc);
  }
  /**
   * * 4.7) applyRemote
   * - 목적 : 다른 탭에서 받은 상태를 적용하고 반영
   * - 입력 : viewId, newState
   * - 출력 : x
   */
  applyRemote(viewId, newState) {
    var _a3;
    const panes = (_a3 = this.paneMap.get(viewId)) != null ? _a3 : [];
    if (panes.length === 0)
      return;
    const notePath = panes[0].notePath;
    const key = this.makeKey(notePath, viewId);
    const cur = this.get(notePath, viewId);
    if (JSON.stringify(cur) === JSON.stringify(newState))
      return;
    localStorage.setItem(key, JSON.stringify(newState));
    this.emit(viewId, newState);
  }
  /**
   * * 4.8) makeKey
   * - 목적 : 상태 저장 키 문자열 생성
   * - 입력 : notePath, viewId
   * - 출력 : `coverTable::${notePath}::${viewId}` (string)
   */
  makeKey(notePath, viewId) {
    return `coverTable::${notePath}::${viewId}`;
  }
  /**
   * * 4.9) hasLivePane
   * - 목적 : 해당 viewId가 현재 DOM에 존재하는지 확인
   * - 입력 : vid
   * - 출력 : boolean
   */
  hasLivePane(vid) {
    var _a3;
    const arr = (_a3 = this.paneMap.get(vid)) != null ? _a3 : [];
    return arr.some((p) => p.leafEl && document.body.contains(p.leafEl));
  }
};
var tableState = new StateCenter();

// src/features/interactive-table/InteractiveTableModel.ts
function uuid() {
  return (crypto == null ? void 0 : crypto.randomUUID) ? crypto.randomUUID() : `vid-${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 8)}`;
}
function gs(note, vid, k) {
  var _a3, _b;
  return (_b = (_a3 = tableState.get(note, vid)) == null ? void 0 : _a3[k]) != null ? _b : null;
}
function ss(note, vid, k, v) {
  const arr = tableState.paneMap.get(vid);
  const inst = arr == null ? void 0 : arr[0];
  if (inst) {
    const silent = !!inst.skipStateWrite;
    tableState.set(inst, { [k]: v }, false, silent);
    return;
  }
  const key = `coverTable::${note}::${vid}`;
  try {
    const data = JSON.parse(localStorage.getItem(key) || "{}");
    data[k] = v;
    localStorage.setItem(key, JSON.stringify(data));
  } catch (e) {
    localStorage.setItem(key, JSON.stringify({ [k]: v }));
  }
}
var InteractiveTableModel = class {
  /*──────── ctor ────────*/
  constructor(dv, pages, columns, ctx, settings, host) {
    this.filteredRows = [];
    /* ===========================================================
     * 2. 외부 노출 API
     * =========================================================== */
    /** 현재 뷰에 표시할 “페이지네이션 적용 후” 배열 */
    this.displayRows = [];
    /** 필터/검색/정렬 적용 전 전체 행 수 */
    this.totalRows = 0;
    /* ===========================================================
     * 5. 유틸 (날짜 파싱 / 정렬 값 계산 등)
     * =========================================================== */
    this.dateYMDRegex = /^(\d{4})-(\d{1,2})-(\d{1,2})$/;
    this.isoDateRegex = /^(\d{4})-(\d{2})-(\d{2})T/;
    this.timeHMRegex = /^(\d{1,2}):(\d{1,2})$/;
    var _a3;
    if (!(ctx == null ? void 0 : ctx.sourcePath))
      throw new Error("ctx.sourcePath missing");
    this.dv = dv;
    this.pages = pages;
    this.columns = columns;
    this.ctx = ctx;
    this.settings = settings;
    this.notePath = ctx.sourcePath;
    this.host = host;
    this.viewId = (_a3 = settings.__viewId) != null ? _a3 : settings.__viewId = uuid();
    const leafEl = host.closest(".workspace-leaf");
    if (leafEl) {
      tableState.addPane({
        viewId: this.viewId,
        notePath: this.notePath,
        dv,
        settings,
        ctx,
        container: host,
        leafEl,
        rerender: async (p) => await this.compute(p),
        refreshView: async (p) => {
          var _a4;
          return await ((_a4 = settings.___refreshHook) == null ? void 0 : _a4.call(settings, p));
        }
      });
    } else {
      Log.w("[Cover-Table] workspace-leaf not found \u2013 skip pane registration");
    }
  }
  /** Model 내부 상태를 재계산하고 결과를 갱신한다. */
  async compute(passive = false) {
    var _a3;
    const cloned = this.pages.map((pg, idx) => {
      var _a4, _b, _c, _d, _e, _f, _g, _h;
      const cp = { ...pg, __idx: idx };
      cp.tags = Array.isArray(pg.tags) ? pg.tags : Array.isArray((_a4 = pg.file) == null ? void 0 : _a4.tags) ? pg.file.tags : pg.tags ? [pg.tags] : [];
      const dvPg = (() => {
        try {
          return this.dv.page(pg.file.path);
        } catch (e) {
          return null;
        }
      })();
      const baseName = (_c = (_b = pg.file) == null ? void 0 : _b.basename) != null ? _c : "";
      const fileTitle = baseName.endsWith(".excalidraw") ? baseName.slice(0, -".excalidraw".length) : baseName || "-";
      cp.__fmTitle = (_h = (_g = (_e = (_d = dvPg == null ? void 0 : dvPg.frontmatter) == null ? void 0 : _d.title) != null ? _e : dvPg == null ? void 0 : dvPg.title) != null ? _g : (_f = pg.frontmatter) == null ? void 0 : _f.title) != null ? _h : fileTitle;
      return cp;
    });
    let fine = await this.applyAllFilters(cloned);
    fine = this.applySort(fine);
    this.filteredRows = fine;
    this.totalRows = fine.length;
    const per = (_a3 = this.settings.perPage) != null ? _a3 : 10;
    this.displayRows = per > 0 ? this.paginate(fine, per, passive) : fine;
  }
  /* ===========================================================
   * 3. 필터 / 검색
   * =========================================================== */
  /** 전체 필터 (프론트매터 + 태그 + 검색) */
  async applyAllFilters(pages) {
    for (const col of this.columns.filter((c) => c.filter)) {
      pages = await this.filterByProp(col, pages);
    }
    pages = await this.applyTagFilter(pages);
    pages = this.applySearch(pages);
    return pages;
  }
  /** 프론트매터 프로퍼티 단일 필터 */
  async filterByProp(c, pages) {
    const key = `filter_${this.viewId}_${c.prop}`;
    const val = gs(this.notePath, this.viewId, key);
    if (!val || val === "ALL")
      return pages;
    const normalize = (raw) => {
      var _a3;
      switch (c.format) {
        case "date": {
          const ymd = this.normalizeYMD(raw);
          return ymd != null ? ymd : "-";
        }
        case "year": {
          const y = typeof raw === "number" ? String(raw) : (_a3 = String(raw).match(/\d{4}/)) == null ? void 0 : _a3[0];
          return y != null ? y : "-";
        }
        default:
          return String(raw != null ? raw : "-");
      }
    };
    return pages.filter((pg) => normalize(this.getVal(pg, c.prop)) === val);
  }
  /** 태그 필터 */
  async applyTagFilter(pages) {
    const tg = gs(this.notePath, this.viewId, `tagFilter_${this.viewId}`) || "ALL";
    if (tg === "ALL")
      return pages;
    return pages.filter((pg) => {
      var _a3, _b, _c;
      const arr = Array.isArray((_a3 = pg.file) == null ? void 0 : _a3.tags) ? pg.file.tags : Array.isArray(pg.tags) ? pg.tags : [(_c = (_b = pg.file) == null ? void 0 : _b.tags) != null ? _c : pg.tags];
      return arr.includes(tg);
    });
  }
  /** 텍스트 검색 */
  applySearch(pages) {
    const ready = gs(this.notePath, this.viewId, `search_ready_${this.viewId}`);
    if (!ready)
      return pages;
    const q = (gs(this.notePath, this.viewId, `search_${this.viewId}`) || "").trim().toLowerCase();
    if (!q)
      return pages;
    const cols = this.columns.filter((c) => c.column);
    pages.forEach((pg) => {
      const buf = [];
      cols.forEach((c) => {
        let tv = c.prop === "title_link" ? pg.__fmTitle || "" : String(this.getVal(pg, c.prop) || "");
        buf.push(tv.toLowerCase());
      });
      pg.__searchText = buf.join(" ");
    });
    return pages.filter(
      (pg) => q.split(" ").every((w) => w && (pg.__searchText || "").includes(w.toLowerCase()))
    );
  }
  /* ===========================================================
   * 4. 정렬 / 페이지네이션
   * =========================================================== */
  applySort(arr) {
    var _a3;
    const prop = gs(this.notePath, this.viewId, `sort_${this.viewId}`);
    const dir = gs(this.notePath, this.viewId, `sort_direction_${this.viewId}`);
    if (!prop || !dir)
      return arr.sort((a, b) => a.__idx - b.__idx);
    if (!prop)
      return arr.sort((a, b) => a.__idx - b.__idx);
    const col = this.columns.find((c) => c.prop === prop);
    const fmt = (_a3 = col == null ? void 0 : col.format) != null ? _a3 : "text";
    return arr.sort((a, b) => {
      const A = this.getSortValue(this.getVal(a, prop), fmt);
      const B = this.getSortValue(this.getVal(b, prop), fmt);
      const cmp = typeof A === "number" && typeof B === "number" ? A - B : JSON.stringify(A).localeCompare(JSON.stringify(B), "ko");
      return dir === "asc" ? cmp : -cmp;
    });
  }
  paginate(arr, per, passive) {
    var _a3;
    const key = `pagination_${this.viewId}`;
    const total = per > 0 ? Math.ceil(arr.length / per) : 1;
    let idx = (_a3 = gs(this.notePath, this.viewId, key)) != null ? _a3 : 0;
    if (total === 0)
      idx = 0;
    else {
      if (idx < 0)
        idx = 0;
      if (idx >= total)
        idx = total - 1;
    }
    if (!passive && idx !== gs(this.notePath, this.viewId, key))
      ss(this.notePath, this.viewId, key, idx);
    return per > 0 ? arr.slice(idx * per, (idx + 1) * per) : [...arr];
  }
  parseDateYMD(str) {
    if (typeof str !== "string")
      return null;
    const m = str.match(this.dateYMDRegex);
    if (!m)
      return null;
    const y = +m[1], mo = +m[2], d = +m[3];
    if (y < 1e3 || y > 9999 || mo < 1 || mo > 12 || d < 1 || d > 31)
      return null;
    return new Date(y, mo - 1, d);
  }
  /** ISO(yyyy-mm-ddThh…)·short(yyyy-m-d) → "yyyy-m-d" */
  normalizeYMD(str) {
    if (!str)
      return null;
    const s = String(str).split("T")[0];
    const m = s.match(/^(\d{4})-(\d{1,2})-(\d{1,2})$/);
    if (!m)
      return null;
    return `${+m[1]}-${+m[2]}-${+m[3]}`;
  }
  parseTimeHM(str) {
    if (typeof str !== "string")
      return null;
    const m = str.match(this.timeHMRegex);
    if (!m)
      return null;
    const hh = +m[1], mm = +m[2];
    if (hh > 23 || mm > 59)
      return null;
    const dt = /* @__PURE__ */ new Date();
    dt.setHours(hh, mm, 0, 0);
    return dt;
  }
  /** v 값과 format 을 받아 정렬용 프리미티브 반환 */
  /** 정렬용 Key 생성 ─ 모든 format 공통 */
  getSortValue(v, fmt = "text") {
    var _a3, _b;
    if (v == null)
      return fmt === "num" ? 0 : [99, "", ""];
    switch (fmt) {
      case "num": {
        const n = Number(v);
        return isNaN(n) ? 0 : n;
      }
      case "date": {
        let s = String(v);
        if (this.isoDateRegex.test(s))
          s = s.slice(0, 10);
        const d = this.parseDateYMD(s);
        return d ? d.getTime() : 0;
      }
      case "year": {
        const y = (_a3 = String(v).match(/\d{4}/)) == null ? void 0 : _a3[0];
        return y ? Number(y) : 0;
      }
      case "tags": {
        const first = normalizeTags(v).sort((a, b) => a.localeCompare(b, "ko"))[0];
        return first != null ? first : "";
      }
      default: {
        const raw = String(v != null ? v : "");
        const base = raw.normalize("NFKD").replace(/[\u0300-\u036F]/g, "").replace(/[#*_`~\[\]\(\)\{\}<>\-]/g, "").trim().toLowerCase();
        const ch = (_b = base[0]) != null ? _b : "";
        const grp = /[a-z]/.test(ch) ? 0 : /[가-힣]/.test(ch) ? 1 : /\d/.test(ch) ? 2 : /\p{Extended_Pictographic}/u.test(ch) ? 4 : 3;
        return [grp, base, raw];
      }
    }
  }
  formatAsDate(v) {
    if (v == null)
      return "";
    const d = this.parseDateYMD(String(v));
    if (!d)
      return String(v);
    const y = d.getFullYear(), m = d.getMonth() + 1, dd = d.getDate();
    return `${y}-${m < 10 ? "0" : ""}${m}-${dd < 10 ? "0" : ""}${dd}`;
  }
  getVal(p, prop) {
    return prop.startsWith("file.") ? prop.split(".").reduce((v, k) => v == null ? void 0 : v[k], p) : p[prop];
  }
};

// src/core/events/EventBus.ts
var import_obsidian5 = require("obsidian");
var _EventBus = class {
  constructor(app) {
    this.ctrlSet = /* @__PURE__ */ new Set();
    /* ── 내부: debounced broadcast ── */
    this.debounce = (fn, ms = 150) => {
      let t = null;
      return (...a) => {
        if (t)
          clearTimeout(t);
        t = window.setTimeout(() => fn(...a), ms);
      };
    };
    this.broadcast = this.debounce((file) => {
      this.ctrlSet.forEach((cb) => cb(file));
    }, 150);
    this.app = app;
    this.attachVaultHooks();
    this.attachWorkspaceHooks();
  }
  static get i() {
    return _EventBus._inst;
  }
  emit(file) {
    this.broadcast(file);
  }
  /* ── 초기화: 플러그인 onload() 시 호출 ── */
  static init(app) {
    if (!_EventBus._inst)
      _EventBus._inst = new _EventBus(app);
  }
  /* ── Controller 가 자신의 refresh 콜백을 등록 / 해제 ── */
  on(cb) {
    this.ctrlSet.add(cb);
  }
  off(cb) {
    this.ctrlSet.delete(cb);
  }
  /* ── Vault / Metadata / Workspace Hooks ── */
  attachVaultHooks() {
    const v = this.app.vault;
    ["modify", "delete", "rename", "create"].forEach(
      (ev) => v.on(ev, (f) => {
        if (f instanceof import_obsidian5.TFile)
          this.broadcast(f);
      })
    );
    this.app.metadataCache.on("resolved", () => this.broadcast());
  }
  attachWorkspaceHooks() {
    this.app.workspace.on("layout-change", () => this.broadcast());
    this.app.workspace.on(
      "active-leaf-change",
      () => setTimeout(() => this.broadcast(), 100)
      // ← 0.1 s delay
    );
  }
  /** 👈 ➊ 외부에서 강제로 새로 고침을 요청할 때 사용 */
  forceRefresh(file) {
    Log.d("[CT] EventBus.forceRefresh()");
    this.broadcast(file);
  }
};
var EventBus = _EventBus;
EventBus._inst = null;

// src/features/interactive-table/InteractiveTableController.ts
function gs2(note, vid, k) {
  var _a3, _b;
  return (_b = (_a3 = tableState.get(note, vid)) == null ? void 0 : _a3[k]) != null ? _b : null;
}
function ss2(note, vid, k, v) {
  const list = tableState.paneMap.get(vid);
  const inst = list == null ? void 0 : list[0];
  if (inst) {
    const silent = !!inst.skipStateWrite;
    tableState.set(inst, { [k]: v }, false, silent);
    return;
  }
  const key = `coverTable::${note}::${vid}`;
  try {
    const data = JSON.parse(localStorage.getItem(key) || "{}");
    data[k] = v;
    localStorage.setItem(key, JSON.stringify(data));
  } catch (e) {
    localStorage.setItem(key, JSON.stringify({ [k]: v }));
  }
}
function todayYMD() {
  const d = /* @__PURE__ */ new Date();
  const y = d.getFullYear();
  const m = d.getMonth() + 1;
  const dd = d.getDate();
  return `${y}-${m < 10 ? "0" : ""}${m}-${dd < 10 ? "0" : ""}${dd}`;
}
function injectCreated(page) {
  var _a3, _b, _c, _d, _e, _f, _g, _h, _i;
  if (!page.created || page.created === "-") {
    const born = (
      /* Dataview 0.5↑: Luxon DateTime 객체 */
      (_i = (_g = (_c = (_b = (_a3 = page.file) == null ? void 0 : _a3.cday) == null ? void 0 : _b.toISODate) == null ? void 0 : _c.call(_b)) != null ? _g : (_f = (_e = (_d = page.file) == null ? void 0 : _d.ctime) == null ? void 0 : _e.toISODate) == null ? void 0 : _f.call(_e)) != null ? _i : (
        /* Dataview 0.4↓: epoch 숫자 */
        typeof ((_h = page.file) == null ? void 0 : _h.ctime) === "number" ? epochToYMD(page.file.ctime) : todayYMD()
      )
    );
    return {
      ...page,
      created: born,
      frontmatter: { ...page.frontmatter, created: born }
    };
  }
  return page;
}
function epochToYMD(ms) {
  const d = new Date(ms);
  const y = d.getFullYear();
  const m = d.getMonth() + 1;
  const dd = d.getDate();
  return `${y}-${m < 10 ? "0" : ""}${m}-${dd < 10 ? "0" : ""}${dd}`;
}
var InteractiveTableController = class {
  // rerender(passive) → 상태 재저장 차단
  /*──────── ctor ────────*/
  constructor(app) {
    this.app = app;
    this.models = /* @__PURE__ */ new Map();
    this._rendering = false;
    this.refreshTimer = null;
    // debounced refresh
    this.skipStateWrite = false;
    /*───────────────────────────────────────────────
      탭 헤더(click) → 모든 cover-view 강제 rerender
    ───────────────────────────────────────────────*/
    this.handleWorkspaceTabClick = (e) => {
      const header = e.target.closest(".workspace-tab-header.tappable");
      if (!header)
        return;
      document.querySelectorAll("[data-cover-view]").forEach((el) => {
        const vid = el.dataset.coverView;
        if (this.models.has(vid)) {
          this.rerender(true, vid);
          return;
        }
        const mdl = [...this.models.values()].find((m) => !m["host"].isConnected);
        if (mdl)
          this.rerender(true, mdl["viewId"]);
      });
    };
    this.dateYMDRegex = /^(\d{4})-(\d{1,2})-(\d{1,2})$/;
    this.timeHMRegex = /^(\d{1,2}):(\d{1,2})$/;
    this.svc = new TableController(app);
    const busCb = (file) => this.refreshByBus(file);
    EventBus.i.on(busCb);
    this.__cover_unload__ = () => EventBus.i.off(busCb);
    this.cb = {
      /* 상태 */
      getState: gs2,
      setState: ss2,
      getLocalState: (n, v) => tableState.get(n, v),
      /* 유틸 */
      getVal: (pg, prop) => this.svc.getVal(pg, prop),
      parseDateYMD: (s) => this.svc.parseDateYMD(s),
      formatAsDate: (v) => this.svc.formatAsDate(v),
      getSortValue: (v) => this.svc.getSortValue(v),
      suggester: (vals) => this.svc.suggester(vals),
      /* 렌더 */
      rerender: async () => {
        await this.rerender(true);
      },
      sync: async (note, vid, key, val) => {
        ss2(note, vid, key, val);
        await this.rerender(true, vid);
      },
      /* 전체 상태 초기화 */
      resetState: async () => {
      }
    };
    this.ui = new UIManager(app, this.cb);
    this.app.workspace.containerEl.addEventListener(
      "click",
      (evt) => {
        if (!evt.target.closest(".workspace-tab-header.tappable"))
          return;
        setTimeout(() => {
          var _a3, _b, _c, _d, _e, _f, _g, _h;
          const host = (_d = (_c = (_b = (_a3 = this.app.workspace.activeLeaf) == null ? void 0 : _a3.view) == null ? void 0 : _b.containerEl) == null ? void 0 : _c.querySelector) == null ? void 0 : _d.call(_c, "[data-cover-view]");
          if (!host)
            return;
          const vid = host.dataset.coverView;
          const note = (_h = (_g = (_f = (_e = this.app.workspace.activeLeaf) == null ? void 0 : _e.view) == null ? void 0 : _f.file) == null ? void 0 : _g.path) != null ? _h : "";
          this.cb.sync(
            note,
            // notePath
            vid,
            // viewId
            // 아무 filter key 나 하나 골라 “ALL” 로 던지면 기존 로직이 rerender
            `tagFilter_${vid}`,
            // ← 존재하는 키
            "ALL"
          );
        }, 180);
      },
      true
      // capture
    );
  }
  /* ===========================================================
   *  renderAutoView()
   * -----------------------------------------------------------
   *  • Dataview API(dv) 와 settings 를 받아 자동으로 폴더 자료
   *    (md + canvas) 를 수집하고 테이블을 렌더
   *  • passive = true → 상태(localStorage) 재저장 차단
   * =========================================================== */
  async renderAutoView(dv, _settings = {}, ctx, hostPre, passive = false) {
    var _a3, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
    const settings = { ..._settings };
    if (settings.perPage == null) {
      const legacyPer = (_b = (_a3 = _settings["entries on page"]) != null ? _a3 : _settings.entries_on_page) != null ? _b : _settings.entriesOnPage;
      if (legacyPer != null)
        settings.perPage = Number(legacyPer) || 0;
    }
    const c = ctx;
    const notePath = (ctx == null ? void 0 : ctx.sourcePath) || "";
    if (this._rendering)
      return;
    this._rendering = true;
    if (passive)
      this.skipStateWrite = true;
    let model = null;
    try {
      if (!(ctx == null ? void 0 : ctx.sourcePath) || !hostPre)
        return;
      if (!hostPre.dataset.coverVid) {
        hostPre.dataset.coverVid = crypto.randomUUID();
        settings.__wipeState = true;
      } else {
        settings.__wipeState = false;
      }
      settings.__viewId = hostPre.dataset.coverVid;
      settings._notePath = ctx.sourcePath;
      hostPre.dataset.coverSettings = JSON.stringify(settings);
      const savedPerPage = gs2(notePath, settings.__viewId, "perPage");
      if (typeof savedPerPage === "number" && savedPerPage > 0) {
        settings.perPage = savedPerPage;
      }
      const folder = (_c = settings.path) != null ? _c : ctx.sourcePath.substring(0, ctx.sourcePath.lastIndexOf("/"));
      const mdPages = dv.pages().where((p) => p.file.folder === folder).where((p) => !this.isFolderNote(p)).map((p) => {
        var _a4;
        return injectCreated({
          // ← 여기
          ...p,
          file: { ...p.file, basename: (_a4 = p.file.basename) != null ? _a4 : p.file.name }
        });
      }).array();
      const canvasPages = this.app.vault.getFiles().filter((f) => f.extension === "canvas" && f.path.startsWith(folder + "/")).map((f) => {
        const ctime = epochToYMD(f.stat.ctime);
        return {
          file: { path: f.path, link: dv.fileLink(f.path), folder, basename: f.basename },
          frontmatter: { title: f.basename },
          created: ctime,
          // ← 최초 생성일
          tags: "#category/canvas"
        };
      });
      const excaliPages = this.app.vault.getFiles().filter((f) => f.extension === "md" && f.basename.endsWith(".excalidraw") && f.path.startsWith(folder + "/")).map((f) => {
        const ctime = epochToYMD(f.stat.ctime);
        return {
          file: { path: f.path, link: dv.fileLink(f.path), folder, basename: f.basename },
          frontmatter: { title: f.basename.replace(/\.excalidraw$/, "") },
          created: ctime,
          // ← 최초 생성일
          tags: "#excalidraw"
        };
      });
      const allPages = [...canvasPages, ...mdPages, ...excaliPages];
      const mustTitle = { prop: "__fmTitle", name: "Title", filter: false, column: true, format: "text" };
      const mustTags = { prop: "tags", name: "Tags", filter: false, column: true, format: "tags" };
      const custom = Array.isArray(settings.props) ? settings.props : [];
      const columns = [
        mustTitle,
        ...custom.filter((p) => !["title_link", "tags"].includes(p.prop)).map((p) => {
          var _a4, _b2, _c2;
          return {
            ...p,
            filter: (_a4 = p.filter) != null ? _a4 : true,
            column: (_b2 = p.column) != null ? _b2 : true,
            format: (_c2 = p.format) != null ? _c2 : "text"
          };
        }),
        mustTags
      ];
      settings.___refreshHook = async (p = false) => {
        await this.renderAutoView(dv, settings, ctx, hostPre, p);
      };
      model = new InteractiveTableModel(
        dv,
        allPages,
        columns,
        ctx,
        settings,
        hostPre
      );
      hostPre.setAttribute("data-cover-view", model["viewId"]);
      this.models.set(model["viewId"], model);
      await model.compute(passive);
      const fmCandidates = columns.filter((c2) => c2.filter).map((c2) => {
        const vals = [...new Set(
          model.filteredRows.map((r) => {
            var _a4;
            const raw = this.svc.getVal(r, c2.prop);
            switch (c2.format) {
              case "date": {
                const ymd = model.normalizeYMD(raw);
                return ymd != null ? ymd : "-";
              }
              case "year": {
                const y = typeof raw === "number" ? String(raw) : (_a4 = String(raw).match(/\d{4}/)) == null ? void 0 : _a4[0];
                return y != null ? y : "-";
              }
              default:
                return String(raw != null ? raw : "-");
            }
          })
        )].sort((a, b) => String(a).localeCompare(String(b)));
        return { prop: c2.prop, name: c2.name, values: ["ALL", ...vals] };
      });
      const tagCandidates = (() => {
        const set = /* @__PURE__ */ new Set();
        model.filteredRows.forEach(
          (r) => {
            var _a4, _b2, _c2;
            return (Array.isArray((_a4 = r.file) == null ? void 0 : _a4.tags) ? r.file.tags : Array.isArray(r.tags) ? r.tags : [(_c2 = (_b2 = r.file) == null ? void 0 : _b2.tags) != null ? _c2 : r.tags]).forEach((t) => set.add(t));
          }
        );
        return set.size ? ["ALL", ...[...set].sort()] : null;
      })();
      const fmFilters = columns.filter((c2) => c2.filter).map((c2) => {
        const vals = [...new Set(
          model.filteredRows.map((pg) => {
            var _a4;
            const raw = this.svc.getVal(pg, c2.prop);
            switch (c2.format) {
              case "date": {
                const ymd = model.normalizeYMD(raw);
                return ymd != null ? ymd : "-";
              }
              case "year": {
                const y = typeof raw === "number" ? String(raw) : (_a4 = String(raw).match(/\d{4}/)) == null ? void 0 : _a4[0];
                return y != null ? y : "-";
              }
              default:
                return String(raw != null ? raw : "-");
            }
          })
        )].sort((a, b) => String(a).localeCompare(String(b)));
        return { prop: c2.prop, name: c2.name, values: ["ALL", ...vals] };
      });
      const tagSet = /* @__PURE__ */ new Set();
      model.filteredRows.forEach((pg) => {
        var _a4, _b2, _c2;
        ((_c2 = (_b2 = (_a4 = pg.file) == null ? void 0 : _a4.tags) != null ? _b2 : pg.tags) != null ? _c2 : []).forEach((t) => tagSet.add(t));
      });
      const tagFilter = tagSet.size ? ["ALL", ...[...tagSet].sort()] : null;
      const scopedCb = this.makeScopedCb(settings._notePath, model["viewId"]);
      await this.ui.buildView(
        hostPre,
        settings._notePath,
        model["viewId"],
        model.displayRows,
        columns,
        (_d = settings.perPage) != null ? _d : 10,
        model.totalRows,
        {
          showOpenFolderButton: (_e = settings.showOpenFolderButton) != null ? _e : true,
          showNewNoteButton: (_f = settings.showNewNoteButton) != null ? _f : true,
          showNewCanvasButton: (_g = settings.showNewCanvasButton) != null ? _g : true,
          // ★
          showTagFilterButton: (_h = settings.showTagFilterButton) != null ? _h : true,
          showFrontmatterFilterButton: (_i = settings.showFrontmatterFilterButton) != null ? _i : true,
          showSearchBox: (_j = settings.showSearchBox) != null ? _j : true,
          showRefreshButton: (_k = settings.showRefreshButton) != null ? _k : false,
          folderPath: (_l = settings.path) != null ? _l : null
        },
        fmCandidates,
        // ← ③-B 에서 만든 front-matter 후보
        tagCandidates,
        // ← 태그 후보 (없으면 null)
        scopedCb
        // ★ 마지막 인수로 콜백 전달
      );
    } finally {
      this.skipStateWrite = false;
      this._rendering = false;
    }
  }
  /* ===========================================================
   *  rerender(passive) – 현재 Model 재계산 & UI만 갱신
   * =========================================================== */
  async rerender(passive = false, vid) {
    var _a3, _b, _c, _d, _e, _f;
    Log.d(`[CT] rerender(${vid != null ? vid : "auto"}) \u25B6 passive=${passive}`);
    while (this._rendering) {
      await new Promise((r) => setTimeout(r, 15));
    }
    let model = vid ? this.models.get(vid) : (() => {
      var _a4, _b2;
      const host = (_b2 = (_a4 = event == null ? void 0 : event.target) == null ? void 0 : _a4.closest) == null ? void 0 : _b2.call(_a4, "[data-cover-view]");
      const hvid = host ? host.dataset.coverView : null;
      return hvid ? this.models.get(hvid) : [...this.models.values()].pop();
    })();
    if (!model && vid) {
      const host = document.querySelector(
        `[data-cover-view="${vid}"]`
      );
      if (host) {
        const dvApi = (_c = (_b = (_a3 = this.app.plugins) == null ? void 0 : _a3.plugins) == null ? void 0 : _b.dataview) == null ? void 0 : _c.api;
        if (dvApi) {
          const mc = this.app.metadataCache;
          if (!mc.resolved) {
            await new Promise((res) => {
              var _a4;
              return (_a4 = mc.once) == null ? void 0 : _a4.call(mc, "resolved", res);
            });
          }
          await this.renderAutoView(
            dvApi,
            // ← Dataview
            host.dataset.coverSettings ? JSON.parse(host.dataset.coverSettings) : {},
            // 저장된 설정 복원
            {
              sourcePath: (_f = (_e = (_d = host.closest(".markdown-preview-view")) == null ? void 0 : _d.file) == null ? void 0 : _e.path) != null ? _f : ""
            },
            // 최소 ctx
            host,
            // hostPre
            true
            // passive=true (상태 보존)
          );
          model = this.models.get(vid);
        }
      }
    }
    if (model) {
      const pp = gs2(model["settings"]._notePath, model["viewId"], "perPage");
      if (typeof pp === "number" && pp > 0)
        model["settings"].perPage = pp;
    }
    if (model && !document.body.contains(model["host"])) {
      const fresh = document.querySelector(
        `[data-cover-view="${model["viewId"]}"]`
      );
      if (fresh) {
        model["host"] = fresh;
      } else {
        this.models.delete(model["viewId"]);
        model = void 0;
      }
    }
    if (!model) {
      Log.d("[CT] rerender \u2013 model not found -> abort");
      return;
    }
    Log.time(`[CT] compute+render ${vid}`);
    await model.compute(passive);
    await this.renderAutoView(
      model["dv"],
      model["settings"],
      model["ctx"],
      model["host"],
      passive
    );
    Log.timeEnd(`[CT] compute+render ${vid}`);
    const keeping = model["viewId"];
    setTimeout(() => {
      this.models.forEach((m, id) => {
        if (id === keeping)
          return;
        if (!document.body.contains(m.host))
          this.models.delete(id);
      });
    }, 300);
  }
  /* ===========================================================
   *  📦  Util (날짜 파싱 / 정렬 값 등)
   * =========================================================== */
  /** Dataview Page → 임의 값 (누락 때문에 생긴 TypeError 수정) */
  getVal(page, prop) {
    var _a3, _b, _c, _d;
    if (prop === "__fmTitle") {
      const fmTitle = (_b = (_a3 = page == null ? void 0 : page.frontmatter) == null ? void 0 : _a3.title) != null ? _b : page == null ? void 0 : page.title;
      if (fmTitle && String(fmTitle).trim() !== "")
        return fmTitle;
      const base = (_d = (_c = page == null ? void 0 : page.file) == null ? void 0 : _c.basename) != null ? _d : "";
      return base.replace(/\.excalidraw$/, "");
    }
    return prop.startsWith("file.") ? prop.split(".").reduce((v, k) => v == null ? void 0 : v[k], page) : page[prop];
  }
  parseDateYMD(str) {
    if (typeof str !== "string")
      return null;
    const m = str.match(this.dateYMDRegex);
    if (!m)
      return null;
    const y = +m[1], mo = +m[2], d = +m[3];
    if (y < 1e3 || y > 9999 || mo < 1 || mo > 12 || d < 1 || d > 31)
      return null;
    return new Date(y, mo - 1, d);
  }
  parseTimeHM(str) {
    if (typeof str !== "string")
      return null;
    const m = str.match(this.timeHMRegex);
    if (!m)
      return null;
    const hh = +m[1], mm = +m[2];
    if (hh > 23 || mm > 59)
      return null;
    const dt = /* @__PURE__ */ new Date();
    dt.setHours(hh, mm, 0, 0);
    return dt;
  }
  formatAsDate(v) {
    if (v == null)
      return "";
    const d = this.parseDateYMD(String(v));
    if (!d)
      return String(v);
    const y = d.getFullYear(), m = d.getMonth() + 1, dd = d.getDate();
    return `${y}-${m < 10 ? "0" : ""}${m}-${dd < 10 ? "0" : ""}${dd}`;
  }
  getSortValue(v) {
    if (v == null)
      return "";
    const s = typeof v === "string" ? v : String(v);
    const d = this.parseDateYMD(s) || this.parseTimeHM(s);
    if (d)
      return d.getTime();
    const n = parseFloat(s);
    return isNaN(n) ? s.toLowerCase() : n;
  }
  async suggester(values) {
    return this.svc.suggester(values);
  }
  /* ===========================================================
   *  🔍 Helper – “folder Note” 여부
   * =========================================================== */
  isFolderNote(p) {
    var _a3, _b;
    const f = p == null ? void 0 : p.file;
    if (!(f == null ? void 0 : f.path) || f.folder == null)
      return false;
    const base = (_a3 = f.basename) != null ? _a3 : f.path.substring(
      f.path.lastIndexOf("/") + 1,
      f.path.lastIndexOf(".")
    );
    const folderName = (_b = f.folder.split("/").pop()) != null ? _b : "";
    return base === folderName;
  }
  /** 현재 note + view 에 바인딩된 콜백 생성 */
  makeScopedCb(note, vid) {
    return {
      ...this.cb,
      // 기존 기능 재사용
      rerender: async (_n = note, _v = vid) => {
        await this.rerender(true, _v);
      },
      sync: async (_, __, key, val) => {
        ss2(note, vid, key, val);
        await this.rerender(true, vid);
      },
      getState: (n, v, k) => gs2(n != null ? n : note, v != null ? v : vid, k),
      setState: (n, v, k, val) => ss2(n != null ? n : note, v != null ? v : vid, k, val)
    };
  }
  /* ===========================================================
   *  Global EventBus → passive rerender (FINAL & STABLE)
   * ========================================================= */
  refreshByBus(file) {
    var _a3, _b;
    const renderDebounced = () => {
      if (this.refreshTimer)
        clearTimeout(this.refreshTimer);
      this.refreshTimer = window.setTimeout(() => {
        this.models.forEach((_, vid) => this.rerender(true, vid));
        this.refreshTimer = null;
      }, 80);
    };
    if (file && this.models.size) {
      const first = this.models.values().next().value;
      if (first) {
        const folder = (_a3 = first["settings"].path) != null ? _a3 : first["ctx"].sourcePath.replace(/\/[^/]+$/, "");
        if (!file.path.startsWith(folder + "/"))
          return;
      }
    }
    if (!this.models.size) {
      document.querySelectorAll("[data-cover-view]").forEach((h) => {
        const vid = h.dataset.coverView;
        if (!this.models.has(vid)) {
        }
      });
    }
    if (file) {
      const mc = this.app.metadataCache;
      const parsed = ((_b = mc.getFileCache(file)) == null ? void 0 : _b.frontmatter) != null;
      if (!parsed) {
        const ref = mc.on("resolved", () => {
          mc.offref(ref);
          renderDebounced();
        });
        return;
      }
    }
    renderDebounced();
  }
};

// src/features/gantt/palette.ts
var DEFAULT_DARK = [
  "#ff6363",
  "#ffa600",
  "#ffcf00",
  "#8aff80",
  "#2effd3",
  "#00ffff",
  "#25c6fc",
  "#3399ff",
  "#9975e2",
  "#cc66cc",
  "#ff66ff",
  "#ff66cc",
  "#ff6699",
  "#ff6666",
  "#f06b60",
  "#ed7732",
  "#de9f00",
  "#afff68",
  "#53ffb4",
  "#2f9eff"
];
var DEFAULT_LIGHT = [
  "#ff9999",
  "#ffc04d",
  "#ffe680",
  "#b3ffb3",
  "#80fff2",
  "#80ffff",
  "#99daff",
  "#99c2ff",
  "#c2a3e8",
  "#df9edf",
  "#ff99ff",
  "#ff99e6",
  "#ff99c2",
  "#ff9999",
  "#f4a38c",
  "#f1b066",
  "#eec900",
  "#c5ff8a",
  "#84ffc9",
  "#74baff"
];
function pickPalette(isDark, opts = {}) {
  var _a3, _b;
  const { colorPalette, colorPaletteDark, colorPaletteLight } = opts;
  if (isDark) {
    return ((_a3 = colorPaletteDark != null ? colorPaletteDark : colorPalette) != null ? _a3 : DEFAULT_DARK).slice();
  }
  return ((_b = colorPaletteLight != null ? colorPaletteLight : colorPalette) != null ? _b : DEFAULT_LIGHT).slice();
}
var GanttPalette = class {
  constructor(palette) {
    this.palette = palette;
    this.noteColorMap = {};
    this.colorPtr = 0;
  }
  /** 노트 이름을 팔레트에 등록(이미 등록되어 있으면 무시) */
  assign(note) {
    if (this.noteColorMap[note])
      return;
    if (this.palette.length === 0) {
      this.noteColorMap[note] = { colorIndex: null };
      return;
    }
    const idx = this.colorPtr % this.palette.length;
    this.noteColorMap[note] = { colorIndex: idx };
    this.colorPtr++;
  }
  /** 등록된 노트 이름의 색상을 반환(없으면 기본 #999) */
  colorOf(note) {
    const entry = this.noteColorMap[note];
    if (!entry || entry.colorIndex == null)
      return "#999";
    return this.palette[entry.colorIndex];
  }
  /** 현재 매핑 정보를 객체 형태({ note: hex })로 반환 */
  legend() {
    const res = {};
    Object.keys(this.noteColorMap).forEach((note) => {
      res[note] = this.colorOf(note);
    });
    return res;
  }
  /** 전체 매핑‧색상 포인터 초기화 */
  reset() {
    this.colorPtr = 0;
    Object.keys(this.noteColorMap).forEach((k) => delete this.noteColorMap[k]);
  }
};

// src/features/gantt/GanttModel.ts
var GanttModel = class {
  /*──────── ctor ────────*/
  constructor(app, dv, settings = {}, ctx) {
    var _a3, _b, _c, _d, _e, _f;
    (_a3 = settings.statusField) != null ? _a3 : settings.statusField = "obsidianUIMode";
    (_b = settings.statusDoneValue) != null ? _b : settings.statusDoneValue = "preview";
    (_c = settings.excludeDone) != null ? _c : settings.excludeDone = true;
    (_d = settings.startField) != null ? _d : settings.startField = "dateAdded";
    (_e = settings.endField) != null ? _e : settings.endField = "dateEnded";
    this.app = app;
    this.dv = dv;
    this.settings = settings;
    this.isDark = document.body.classList.contains("theme-dark");
    this.palette = pickPalette(this.isDark, settings);
    this.gPalette = new GanttPalette(this.palette);
    if (!((_f = dv.current) == null ? void 0 : _f.call(dv)) && (ctx == null ? void 0 : ctx.sourcePath))
      dv.current = () => dv.page(ctx.sourcePath);
  }
  /* ===========================================================
   *  compute() – 모든 계산 수행 후 DataPack 반환
   * =========================================================== */
  compute() {
    const { pages, year, month, daysInMonth } = this.collectPages();
    const legend = this.gPalette.legend();
    return {
      pages,
      year,
      month,
      daysInMonth,
      legend,
      palette: [...this.palette],
      // 방어적 복사
      startField: this.settings.startField,
      endField: this.settings.endField
    };
  }
  /*───────────────────────────────────────────────────────────────
    2-A. 페이지 수집 + 필터
  ──────────────────────────────────────────────────────────────*/
  collectPages() {
    var _a3, _b;
    const now = /* @__PURE__ */ new Date();
    const year = now.getFullYear();
    const month = now.getMonth();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const cur = (_b = (_a3 = this.dv).current) == null ? void 0 : _b.call(_a3);
    const base = Array.isArray(this.settings.customPages) ? this.settings.customPages : this.settings.path ? this.dv.pages(`"${this.settings.path}"`).array() : (cur == null ? void 0 : cur.file) ? this.dv.pages().where(
      (p) => p.file.folder === cur.file.folder && p.file.path !== cur.file.path
    ).array() : [];
    const sKey = this.settings.statusField;
    const doneV = this.settings.statusDoneValue.toLowerCase();
    const excl = this.settings.excludeDone !== false;
    const sField = this.settings.startField;
    const eField = this.settings.endField;
    const pages = base.filter((p) => {
      var _a4, _b2;
      if (((_a4 = p.file) == null ? void 0 : _a4.extension) === "canvas")
        return false;
      if (excl) {
        const stat = ((_b2 = p[sKey]) != null ? _b2 : "").toString().toLowerCase();
        if (stat === doneV)
          return false;
      }
      return !!p[sField] && !!p[eField];
    });
    pages.forEach((pg) => {
      var _a4;
      const title = pg.title || ((_a4 = pg.file) == null ? void 0 : _a4.name) || "Untitled";
      this.gPalette.assign(title);
    });
    return { pages, year, month, daysInMonth };
  }
  /*───────────────────────────────────────────────────────────────
    2-B. 셀 색상 판단 헬퍼
    Controller → UI 단계에서 td 마다 호출해 배경색 결정
  ──────────────────────────────────────────────────────────────*/
  /**
   * note 제목과 날짜(1-based) → 팔레트 색상 or null
   * Controller → UIManager.colorize() 에서 사용
   */
  colorFor(note, day, pack) {
    var _a3, _b;
    const { pages, year, month, startField, endField } = pack;
    const pg = pages.find((p) => {
      var _a4;
      return (p.title || ((_a4 = p.file) == null ? void 0 : _a4.name) || "Untitled") === note;
    });
    if (!pg)
      return null;
    const sDate = (_a3 = this.dv.date(pg[startField])) == null ? void 0 : _a3.toJSDate();
    const eDate = (_b = this.dv.date(pg[endField])) == null ? void 0 : _b.toJSDate();
    if (!sDate || !eDate)
      return null;
    const cur = new Date(year, month, day);
    if (cur >= sDate && cur <= eDate)
      return this.gPalette.colorOf(note);
    return null;
  }
};

// src/ui/gantt/GanttUIManager.ts
var GanttUIManager = class {
  /** build wrapper, inject table + legend, return container */
  buildGantt(host, headerText, tableHTML, legend, showLegend = true, showDivider = false) {
    const wrap = document.createElement("div");
    wrap.className = "gantt-view";
    const h = document.createElement("div");
    h.className = "gantt-month-year";
    h.textContent = headerText;
    wrap.appendChild(h);
    const container = document.createElement("div");
    container.className = "gantt-container";
    container.innerHTML = tableHTML;
    wrap.appendChild(container);
    if (showLegend) {
      const lg = document.createElement("div");
      lg.className = "gantt-legend";
      Object.entries(legend).forEach(([note, color]) => {
        const item = document.createElement("div");
        item.className = "gantt-legend-item";
        const sw = document.createElement("span");
        sw.className = "gantt-legend-color";
        sw.style.background = color;
        item.appendChild(sw);
        const lbl = document.createElement("span");
        lbl.textContent = note;
        item.appendChild(lbl);
        lg.appendChild(item);
      });
      wrap.appendChild(lg);
    }
    host.appendChild(wrap);
    return wrap;
  }
  /** cell painter – controller supplies callback */
  colorize(fn, isEdge) {
    document.querySelectorAll(".gantt-table td[data-note]").forEach((td) => {
      const note = td.dataset.note;
      const day = Number(td.dataset.day);
      const col = fn(note, day);
      if (col) {
        td.style.setProperty("--gantt-color", col);
        td.classList.add("is-filled");
      } else {
        td.classList.remove("is-filled");
        td.style.removeProperty("--gantt-color");
      }
      const edge = isEdge(note, day);
      if (edge)
        td.classList.add(`gantt-${edge}`);
    });
  }
  /** highlight today column */
  highlightToday() {
    const d = (/* @__PURE__ */ new Date()).getDate();
    document.querySelectorAll(`.gantt-table td[data-day='${d}']`).forEach((td) => td.classList.add("is-today"));
  }
};

// src/features/gantt/GanttController.ts
var GanttController = class {
  constructor(app) {
    this.app = app;
    this.ui = new GanttUIManager();
    this._rendering = false;
    this.busCb = this.refreshByBus.bind(this);
    EventBus.i.on(this.busCb);
    this.__cover_unload__ = () => EventBus.i.off(this.busCb);
  }
  /*=============================================================
   *  renderView()
   * ------------------------------------------------------------
   *  @param dv        Dataview API
   *  @param settings  코드펜스 옵션 (GanttSettings)
   *  @param ctx       MarkdownPostProcessorContext
   *  @param hostPre   ```dataviewjs``` <pre> 엘리먼트
   *===========================================================*/
  async renderView(dv, settings = {}, ctx, hostPre) {
    var _a3, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
    if (this._rendering)
      return;
    this._rendering = true;
    try {
      (_a3 = settings.renderInteractiveBelow) != null ? _a3 : settings.renderInteractiveBelow = true;
      (_b = settings.showLegend) != null ? _b : settings.showLegend = true;
      (_c = settings.forceInteractiveBelow) != null ? _c : settings.forceInteractiveBelow = false;
      if (settings.forceInteractiveBelow)
        settings.renderInteractiveBelow = true;
      const legacy = (_e = (_d = settings["entries on page"]) != null ? _d : settings.entries_on_page) != null ? _e : settings.entriesOnPage;
      if (legacy != null) {
        (_f = settings.interactiveOptions) != null ? _f : settings.interactiveOptions = {};
        if (settings.interactiveOptions.perPage == null)
          settings.interactiveOptions.perPage = Number(legacy) || 0;
      }
      let cur = (_g = dv.current) == null ? void 0 : _g.call(dv);
      if ((!cur || !cur.file) && (ctx == null ? void 0 : ctx.sourcePath))
        cur = dv.page(ctx.sourcePath);
      if (!(cur == null ? void 0 : cur.file)) {
        Log.w("[Gantt] current page not found \u2013 abort");
        return;
      }
      const origCurrent = dv.current;
      dv.current = () => cur;
      const model = new GanttModel(this.app, dv, settings, ctx);
      const pack = model.compute();
      let host;
      if (hostPre) {
        hostPre.empty();
        hostPre.classList.add("ct-it-container");
        host = hostPre;
      } else {
        host = dv.container;
      }
      const monthName = new Intl.DateTimeFormat("en", {
        month: "long"
      }).format(new Date(pack.year, pack.month, 1));
      const headerText = `${monthName} ${pack.year}`;
      const wrap = this.ui.buildGantt(
        host,
        headerText,
        this.buildTableHTML(pack),
        pack.legend,
        (_h = settings.showLegend) != null ? _h : true,
        settings.renderInteractiveBelow
        /* divider 표시 여부 */
      );
      wrap.__settings = JSON.parse(JSON.stringify(settings));
      this.ui.colorize(
        (title, d) => model.colorFor(title, d, pack),
        (title, d) => {
          const { startField, endField, pages, year, month } = pack;
          const pg = pages.find((p) => {
            var _a4;
            return (p.title || ((_a4 = p.file) == null ? void 0 : _a4.name)) === title;
          });
          if (!pg)
            return null;
          const sDt = dv.date(pg[startField]);
          const eDt = dv.date(pg[endField]);
          if (sDt && sDt.year === year && sDt.month - 1 === month && sDt.day === d)
            return "start";
          if (eDt && eDt.year === year && eDt.month - 1 === month && eDt.day === d)
            return "end";
          return null;
        }
      );
      this.ui.highlightToday();
      if (settings.renderInteractiveBelow) {
        const engine = (_i = window.coverTable) == null ? void 0 : _i.engine;
        if (engine) {
          const itMount = wrap.createDiv({ cls: "ct-it-mount" });
          const opts = (_j = settings.interactiveOptions) != null ? _j : {};
          if (settings.props && opts.props == null)
            opts.props = settings.props;
          if (opts.perPage == null) {
            const legacyPer = (_l = (_k = opts["entries on page"]) != null ? _k : opts.entries_on_page) != null ? _l : opts.entriesOnPage;
            if (legacyPer != null)
              opts.perPage = Number(legacyPer) || 0;
          }
          itMount.dataset.coverSettings = JSON.stringify(opts);
          if (ctx)
            await engine.renderAutoView(
              dv,
              opts,
              ctx,
              itMount
            );
        }
      }
      if (settings.debugLegend) {
        const pre = wrap.createEl("pre", { cls: "gantt-debug" });
        pre.innerText = JSON.stringify(pack.legend, null, 2);
      }
      dv.current = origCurrent;
    } finally {
      this._rendering = false;
    }
  }
  /*─────────────────────────────────────────────────────────────
    🔧  내부 헬퍼 – 테이블 HTML 생성
    · Model ←→ UI 경계에 남겨두면 Controller 테스트가 쉬워짐
  ─────────────────────────────────────────────────────────────*/
  buildTableHTML(pack) {
    const { pages, daysInMonth } = pack;
    const headCols = Array.from(
      { length: daysInMonth },
      (_, i) => `<th class="gantt-day-col">${String(i + 1).padStart(2, "0")}</th>`
    ).join("");
    const thead = `<thead><tr><th class="gantt-corner-col"></th>${headCols}</tr></thead>`;
    let tbody = "<tbody>";
    pages.forEach((pg) => {
      var _a3;
      const title = pg.title || ((_a3 = pg.file) == null ? void 0 : _a3.name) || "Untitled";
      tbody += `<tr><td class="gantt-note-col">${title}</td>`;
      for (let d = 1; d <= daysInMonth; d++) {
        tbody += `<td class="gantt-cell" data-note="${title}" data-day="${d}"></td>`;
      }
      tbody += "</tr>";
    });
    tbody += "</tbody>";
    return `<table class="gantt-table">${thead}${tbody}</table>`;
  }
  refreshByBus(file) {
    var _a3, _b, _c, _d, _e, _f, _g;
    if (this._rendering)
      return;
    if ((file == null ? void 0 : file.extension) === "canvas")
      return;
    const dv = (_c = (_b = (_a3 = this.app.plugins) == null ? void 0 : _a3.plugins) == null ? void 0 : _b.dataview) == null ? void 0 : _c.api;
    if (!dv) {
      Log.w("[Gantt] Dataview API not available.");
      return;
    }
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile || activeFile.extension === "canvas")
      return;
    if (!activeFile) {
      Log.w("[Gantt] No active file found.");
      return;
    }
    if (file && file.path !== activeFile.path)
      return;
    const existingGanttView = document.querySelector(".gantt-view");
    const prev = existingGanttView == null ? void 0 : existingGanttView.__settings;
    const settings = { ...prev };
    (_d = settings.renderInteractiveBelow) != null ? _d : settings.renderInteractiveBelow = true;
    (_e = settings.showLegend) != null ? _e : settings.showLegend = true;
    if (!existingGanttView) {
      Log.w("[Gantt] Gantt host container not found.");
      return;
    }
    const host = existingGanttView.parentElement;
    if (!host) {
      Log.w("[Gantt] Gantt host parent element not found.");
      return;
    }
    existingGanttView.remove();
    const ctx = {
      sourcePath: activeFile.path,
      frontmatter: (_g = (_f = this.app.metadataCache.getFileCache(activeFile)) == null ? void 0 : _f.frontmatter) != null ? _g : {},
      getSectionInfo: () => null,
      docId: "",
      // 필수 요소 추가 (빈 문자열 제공으로 해결)
      addChild: () => null
      // 필수 메서드 추가
    };
    this.renderView(dv, settings, ctx, host);
  }
};

// src/theme/ListCalloutManager.ts
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
function createPlugin(map) {
  const chars = Object.keys(map).join("");
  if (!chars)
    return [];
  const re = new RegExp(`^\\s*(?:[-*+]|\\d+[.)])\\s+([${chars}])\\s+`);
  const decoFor = (view) => {
    const builder = new import_state.RangeSetBuilder();
    const docEnd = view.state.doc.length;
    for (const { from, to } of view.visibleRanges) {
      let pos = from;
      while (pos <= to && pos < docEnd) {
        const line = view.state.doc.lineAt(pos);
        const m = re.exec(line.text);
        if (m) {
          const ch = m[1];
          builder.add(
            line.from,
            line.from,
            import_view.Decoration.line({ attributes: { class: "lc-cm6-row", "data-callout-char": ch } })
          );
        }
        if (line.to <= pos)
          break;
        pos = line.to + 1;
      }
    }
    return builder.finish();
  };
  return import_view.ViewPlugin.fromClass(
    class {
      constructor(view) {
        this.decorations = decoFor(view);
      }
      update(u) {
        if (u.docChanged || u.viewportChanged)
          this.decorations = decoFor(u.view);
      }
    },
    { decorations: (v) => v.decorations }
  );
}
var ListCalloutManager = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.styleEl = null;
    this.cmExt = [];
    this.cmDispose = null;
    // ← Disposable 보관
    this.map = {};
    this.rebuild();
  }
  rebuild() {
    var _a3;
    this.map = {};
    ((_a3 = this.plugin.settings.listCallouts) != null ? _a3 : []).forEach(
      (c) => this.map[c.char] = c
    );
    this.injectCss();
    if (this.cmDispose) {
      this.cmDispose();
      this.cmDispose = null;
    }
    this.cmExt = createPlugin(this.map);
    if (this.cmExt.length)
      this.plugin.registerEditorExtension(this.cmExt);
  }
  /*───────────────────────────────────────────────────────────*/
  editorExtensions() {
    return this.cmExt;
  }
  /*****************************************************************
   * src/theme/ListCalloutManager.ts – patch snippet
   * ① 링크 노드를 보존하면서 pill 구성
   * ② 읽기모드에서 더블-클릭 ⇒ a.href 트리거
   *****************************************************************/
  /*───────────────────────────────────────────────────────────────
    postProcessor() – 첫 위키링크가 없으면 순수 텍스트 사용
  ───────────────────────────────────────────────────────────────*/
  /*───────────────────────────────────────────────────────────────
    postProcessor() – “첫 링크 노드를 그대로 살려 pill 로 감싸기”
  ───────────────────────────────────────────────────────────────*/
  postProcessor() {
    return (el) => {
      if (!Object.keys(this.map).length)
        return;
      el.querySelectorAll("li").forEach((li) => {
        var _a3;
        const raw = (_a3 = li.textContent) != null ? _a3 : "";
        const ch = raw.trim().charAt(0);
        if (!this.map[ch])
          return;
        const firstLink = li.querySelector(
          "a.internal-link, a.external-link, a:not([href^='#'])"
        );
        let labelNode;
        if (firstLink) {
          labelNode = firstLink;
        } else {
          const txt = raw.trim().slice(1).trim();
          labelNode = document.createTextNode(txt || " ");
        }
        li.replaceChildren();
        const pill = document.createElement("span");
        pill.className = "lc-pill";
        pill.appendChild(labelNode);
        li.appendChild(pill);
        li.classList.add("lc-list-callout");
        li.setAttribute("data-callout-char", ch);
        if (firstLink) {
          li.addEventListener("dblclick", () => {
            if (!li.closest(".markdown-reading-view"))
              return;
            firstLink.dispatchEvent(
              new MouseEvent("click", { bubbles: true, cancelable: true, view: window })
            );
          });
        }
      });
    };
  }
  /*───────────────────────────────────────────────────────────────
    injectCss() – 콜아웃 리스트를 “단일 텍스트 + 배경” 버전으로 복원
  ───────────────────────────────────────────────────────────────*/
  injectCss() {
    if (!this.styleEl) {
      this.styleEl = document.createElement("style");
      this.styleEl.id = "ct-lc-style";
      document.head.appendChild(this.styleEl);
    }
    let css = `
    /* \uC77C\uBC18 \uB9AC\uC2A4\uD2B8 \uC720\uC9C0, \uCF5C\uC544\uC6C3 \uC548\uC5D0\uC11C\uB9CC \uBD88\uB9BF \uC228\uAE40 */
  li.lc-list-callout .list-bullet{display:none!important;}

  li.lc-list-callout{
    list-style:none!important;
    margin:0!important;
    padding:0!important;
    font: 600 1em/1 var(--font-interface);
  }
  li.lc-list-callout::marker{content:""!important}

  .lc-pill{
    display:block;
    width:100%;
    padding:6px 10px;
    border-radius:6px;
    font-weight:600;
    margin:0px 0px 5px 0px;
    cursor: pointer;
  }
  .lc-pill:hover{
    transition:all .3s ease;
    transform:scale(.95);
  }

  /* \uB9C1\uD06C\u2006\u2192 \u201C\uC77C\uBC18 \uD14D\uC2A4\uD2B8\u201D \uCC98\uB9AC */
  .lc-pill a{
    color:inherit!important;
    text-decoration:none!important;
  }

  /* hover \uAC15\uC870\xB7\uC678\uACFD \uBC30\uACBD \uC81C\uAC70 (pill \uB0B4\uBD80 \uBC30\uACBD\uB9CC \uD45C\uC2DC) */
  .markdown-reading-view li.lc-list-callout:hover{
    background:unset!important;
  }

  /* \uD3B8\uC9D1\uBAA8\uB4DC CM6 \uD589 \uB370\uCF54 \uC601\uD5A5 \uC5C6\uC774, \uC77D\uAE30\uBAA8\uB4DC \uC804\uC6A9 \uBC30\uACBD\uB9CC \uC720\uC9C0 */
  .markdown-reading-view li.lc-list-callout .cm-line{background:transparent!important;}
  `;
    for (const ch in this.map) {
      const c = this.map[ch];
      css += `
    .theme-light li[data-callout-char='${ch}'] .lc-pill{
      background:${c.bgLight}!important;
      color:${c.fgLight}!important;
    }
    .theme-dark  li[data-callout-char='${ch}'] .lc-pill{
      background:${c.bgDark}!important;
      color:${c.fgDark}!important;
    }
    li.lc-list-callout[data-callout-char='${ch}'] .lc-pill::before{ 
      content:""; 
    }`;
    }
    this.styleEl.textContent = css;
  }
};

// src/theme/css/base.css
var base_default = "/*****************************************************************\r\n *  Cover-Table  \u2013  Global Color \xB7 Style Tokens  (\uCD5C\uC885 \uD1B5\uD569\uD310)\r\n *  \xB7 \uAE30\uC874 \uAE30\uB2A5 \u201C\uBAA8\uB450\u201D \uBCF4\uC874  \xB7 \uC694\uC57D/\uD568\uCD95/\uC0AD\uC81C \uC5C6\uC74C\r\n *  \xB7 \uD14C\uC774\uBE14\xB7\uC774\uBBF8\uC9C0 \uC0C9\uC0C1\uC740 \uB2E8\uC77C \uD1A0\uD070 + \uB2E4\uD06C/\uB77C\uC774\uD2B8 \uC790\uB3D9 \uC624\uBC84\uB77C\uC774\uB4DC\r\n *  \xB7 \uD5E4\uB529\uC740 \uBB34\uC9C0\uAC1C 6\uC0C9(\uD1A0\uD070)\uC73C\uB85C \uC9C1\uAD00\uC801 \uAD6C\uBD84\r\n *****************************************************************/\r\n:root{\r\n  /* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \uBCA0\uC774\uC2A4 / \uACF5\uD1B5 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\r\n  --ct-base-white        : #ffffff;\r\n  --ct-base-black        : #000000;\r\n\r\n\r\n\r\n  /* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \uBCF8\uBB38 \uD14D\uC2A4\uD2B8 \uC2A4\uD0C0\uC77C \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\r\n  --ct-bold-dark            : rgb(255,188,188);\r\n  --ct-bold-light           : rgb(138,0,119);\r\n  --ct-italic-dark       : #cccccc;\r\n  --ct-italic-light      : #888888;\r\n\r\n  /* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \uD5E4\uB529(\uBB34\uC9C0\uAC1C \uD1A0\uD070: \uC77D\uAE30+\uD3B8\uC9D1 \uACF5\uD1B5) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\r\n  --ct-h1-dark : #ff5555;  --ct-h1-light : #ff5555;   /* red    */\r\n  --ct-h2-dark : #ffae42;  --ct-h2-light : #ffae42;   /* orange */\r\n  --ct-h3-dark : #f7ff50;  --ct-h3-light : #f7ff50;   /* yellow */\r\n  --ct-h4-dark : #4cd964;  --ct-h4-light : #4cd964;   /* green  */\r\n  --ct-h5-dark : #5ac8fa;  --ct-h5-light : #5ac8fa;   /* blue   */\r\n  --ct-h6-dark : #af52de;  --ct-h6-light : #af52de;   /* violet */\r\n\r\n  /* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \uB9AC\uC2A4\uD2B8 \uBD88\uB9BF/\uBC88\uD638 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\r\n  --ct-bullet-dark          : rgb(89,89,223);\r\n  --ct-bullet-light         : rgb(54,54,190);\r\n  --ct-ol-marker-dark       : red;\r\n  --ct-ol-marker-light      : red;\r\n\r\n  /* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \uD14C\uC774\uBE14(\uB2E8\uC77C \uD1A0\uD070) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\r\n  --ct-table-border         : #c0c0c0;         /* light \uAE30\uBCF8, dark \uBAA8\uB4DC\uC5D0\uC11C \uC7AC\uC815\uC758 */\r\n  --ct-table-shadow         : rgba(0,0,0,.10);\r\n  --ct-table-row-even       : rgba(0,0,0,.03);\r\n  --ct-table-row-hover      : rgba(0,0,0,.07);\r\n\r\n  /* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \uC774\uBBF8\uC9C0(\uB2E8\uC77C \uD1A0\uD070) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\r\n  --ct-image-border         : #d0d0d0;\r\n  --ct-image-shadow         : rgba(0,0,0,.10);\r\n}\r\n\r\n/* \uB2E4\uD06C \uBAA8\uB4DC \uC624\uBC84\uB77C\uC774\uB4DC \u2013 \uC790\uB3D9 \uC0C9\uC0C1 \uC804\uD658 */\r\n.theme-dark:root{\r\n  --image-border            : #555555;\r\n  --image-shadow            : rgba(0,0,0,.60);\r\n\r\n  /* \uD14C\uC774\uBE14 \uD1A0\uD070(\uD22C\uBA85\xB7\uBC30\uACBD\uACC4\uC5F4) */\r\n  --ct-table-border         : #444444;\r\n  --ct-table-shadow         : rgba(0,0,0,.55);\r\n  --ct-table-row-even       : transparent;\r\n  --ct-table-row-hover      : rgba(255,255,255,.07);\r\n}\r\n\r\n/* \uB77C\uC774\uD2B8 \uBAA8\uB4DC \uC624\uBC84\uB77C\uC774\uB4DC \u2013 \uC790\uB3D9 \uC0C9\uC0C1 \uC804\uD658 */\r\n.theme-light:root{\r\n  --image-border            : #d0d0d0;\r\n  --image-shadow            : rgba(0,0,0,.10);\r\n\r\n  --ct-table-border         : #c0c0c0;\r\n  --ct-table-shadow         : rgba(0,0,0,.10);\r\n  --ct-table-row-even       : rgba(0,0,0,.03);\r\n  --ct-table-row-hover      : rgba(0,0,0,.07);\r\n}\r\n\r\n/*****************************************************************\r\n *  \uBCFC\uB4DC \uCEEC\uB7EC (\uAE30\uC874 \uAE30\uB2A5 \uC720\uC9C0)\r\n *****************************************************************/\r\n.theme-dark .markdown-preview-view strong,\r\n.theme-dark .markdown-preview-view b,\r\n.theme-dark .markdown-source-view.mod-cm6 .cm-content strong,\r\n.theme-dark .markdown-source-view.mod-cm6 .cm-content b,\r\n.theme-dark .markdown-source-view.mod-cm6 .cm-content .cm-strong{\r\n  font-weight:bold  !important; color:var(--ct-bold-dark)!important;\r\n}\r\n.theme-light .markdown-preview-view strong,\r\n.theme-light .markdown-preview-view b,\r\n.theme-light .markdown-source-view.mod-cm6 .cm-content strong,\r\n.theme-light .markdown-source-view.mod-cm6 .cm-content b,\r\n.theme-light .markdown-source-view.mod-cm6 .cm-content .cm-strong{\r\n  font-weight:bold !important; color:var(--ct-bold-light)!important;\r\n}\r\n\r\n\r\n/* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n   \uC774\uD154\uB9AD \uD14D\uC2A4\uD2B8 \uC0C9 \uC801\uC6A9\r\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\r\n\r\n.theme-dark .cm-em {\r\n  color: var(--ct-italic-dark) !important;\r\n}\r\n.theme-light .cm-em {\r\n  color: var(--ct-italic-light) !important;\r\n}\r\n\r\n\r\n\r\n/*****************************************************************\r\n *  \uD5E4\uB529 \u2013 \uBB34\uC9C0\uAC1C + \uBC11\uC904 100% + \uC544\uC774\uCF58 \uC6B0\uCE21\r\n *****************************************************************/\r\n.markdown-preview-view h1,\r\n.markdown-preview-view h2,\r\n.markdown-preview-view h3,\r\n.markdown-preview-view h4,\r\n.markdown-preview-view h5,\r\n.markdown-preview-view h6{\r\n  display:flex!important; align-items:center; width:100%!important;\r\n  font-size:1.5em; line-height:1em; margin:5px 0!important; border-bottom-style:outset;\r\n}\r\n.markdown-preview-view h1{color:var(--ct-h1-dark); border-bottom-color:var(--ct-h1-dark);}\r\n.markdown-preview-view h2{color:var(--ct-h2-dark); border-bottom-color:var(--ct-h2-dark);}\r\n.markdown-preview-view h3{color:var(--ct-h3-dark); border-bottom-color:var(--ct-h3-dark);}\r\n.markdown-preview-view h4{color:var(--ct-h4-dark); border-bottom-color:var(--ct-h4-dark);}\r\n.markdown-preview-view h5{color:var(--ct-h5-dark); border-bottom-color:var(--ct-h5-dark);}\r\n.markdown-preview-view h6{color:var(--ct-h6-dark); border-bottom-color:var(--ct-h6-dark);}\r\n.theme-light .markdown-preview-view h1{color:var(--ct-h1-light); border-bottom-color:var(--ct-h1-light);}\r\n.theme-light .markdown-preview-view h2{color:var(--ct-h2-light); border-bottom-color:var(--ct-h2-light);}\r\n.theme-light .markdown-preview-view h3{color:var(--ct-h3-light); border-bottom-color:var(--ct-h3-light);}\r\n.theme-light .markdown-preview-view h4{color:var(--ct-h4-light); border-bottom-color:var(--ct-h4-light);}\r\n.theme-light .markdown-preview-view h5{color:var(--ct-h5-light); border-bottom-color:var(--ct-h5-light);}\r\n.theme-light .markdown-preview-view h6{color:var(--ct-h6-light); border-bottom-color:var(--ct-h6-light);}\r\n.markdown-preview-view h1 .collapse-indicator,\r\n.markdown-preview-view h2 .collapse-indicator,\r\n.markdown-preview-view h3 .collapse-indicator,\r\n.markdown-preview-view h4 .collapse-indicator,\r\n.markdown-preview-view h5 .collapse-indicator,\r\n.markdown-preview-view h6 .collapse-indicator{margin-left:auto;}\r\n\r\n.cm-header-1{font-size:1.5em!important;line-height:2em;color:var(--ct-h1-dark);border-bottom:outset 1px var(--ct-h1-dark);}\r\n.cm-header-2{font-size:1.5em!important;line-height:2em;color:var(--ct-h2-dark);border-bottom:outset 1px var(--ct-h2-dark);}\r\n.cm-header-3{font-size:1.5em!important;line-height:2em;color:var(--ct-h3-dark);border-bottom:outset 1px var(--ct-h3-dark);}\r\n.cm-header-4{font-size:1.5em!important;line-height:2em;color:var(--ct-h4-dark);border-bottom:outset 1px var(--ct-h4-dark);}\r\n.cm-header-5{font-size:1.5em!important;line-height:2em;color:var(--ct-h5-dark);border-bottom:outset 1px var(--ct-h5-dark);}\r\n.cm-header-6{font-size:1.5em!important;line-height:2em;color:var(--ct-h6-dark);border-bottom:outset 1px var(--ct-h6-dark);}\r\n.theme-light .cm-header-1{color:var(--ct-h1-light);border-bottom-color:var(--ct-h1-light);}\r\n.theme-light .cm-header-2{color:var(--ct-h2-light);border-bottom-color:var(--ct-h2-light);}\r\n.theme-light .cm-header-3{color:var(--ct-h3-light);border-bottom-color:var(--ct-h3-light);}\r\n.theme-light .cm-header-4{color:var(--ct-h4-light);border-bottom-color:var(--ct-h4-light);}\r\n.theme-light .cm-header-5{color:var(--ct-h5-light);border-bottom-color:var(--ct-h5-light);}\r\n.theme-light .cm-header-6{color:var(--ct-h6-light);border-bottom-color:var(--ct-h6-light);}\r\n\r\n/*****************************************************************\r\n *  \uB9AC\uC2A4\uD2B8 \uB9C8\uCEE4 (\uAE30\uB2A5 \uC644\uC804 \uBCF4\uC874)\r\n *****************************************************************/\r\n/* \u2500\u2500 *  DARK MODE  (theme-dark) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\r\n.theme-dark .list-number,\r\n.theme-dark ol>li::marker,\r\n.theme-dark ul>li::marker {\r\n  color: var(--ct-ol-marker-dark);\r\n}\r\n\r\n.theme-dark .markdown-reading-view ul>li>.list-bullet:after,\r\n.theme-dark .markdown-source-view.mod-cm6 .HyperMD-list-line-1 .list-bullet:after {\r\n  height: 5px; width: 5px; border-radius: 50%;\r\n  background: var(--ct-bullet-dark) !important;\r\n}\r\n\r\n.theme-dark .markdown-reading-view ul>li>ul>li>.list-bullet:after,\r\n.theme-dark .markdown-source-view.mod-cm6 .HyperMD-list-line-2 .list-bullet:after {\r\n  height: 1px; width: 7px; border-radius: 0;\r\n  background: var(--ct-bullet-dark) !important;\r\n}\r\n\r\n.theme-dark .markdown-reading-view ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-dark .markdown-source-view.mod-cm6 .HyperMD-list-line-3 .list-bullet:after {\r\n  height: 4px; width: 4px;\r\n  background: transparent;\r\n  border: 1px solid var(--ct-bullet-dark) !important; border-radius: 50%;\r\n}\r\n\r\n.theme-dark .markdown-reading-view ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-dark .markdown-source-view.mod-cm6 .HyperMD-list-line-4 .list-bullet:after {\r\n  height: 5px; width: 5px; border-radius: 0;\r\n  background: var(--ct-bullet-dark) !important;\r\n}\r\n\r\n.theme-dark .markdown-reading-view ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-dark .markdown-source-view.mod-cm6 .HyperMD-list-line-5 .list-bullet:after {\r\n  height: 1px; width: 7px; border-radius: 0;\r\n  background: var(--ct-bullet-dark) !important;\r\n}\r\n\r\n.theme-dark .markdown-reading-view ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-dark .markdown-source-view.mod-cm6 .HyperMD-list-line-6 .list-bullet:after {\r\n  height: 4px; width: 4px;\r\n  background: transparent;\r\n  border: 1px solid var(--ct-bullet-dark) !important;\r\n}\r\n\r\n.theme-dark .markdown-reading-view ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-dark .markdown-source-view.mod-cm6 .HyperMD-list-line-7 .list-bullet:after {\r\n  height: 2px; width: 2px; border-radius: 50%;\r\n  background: var(--ct-bullet-dark) !important;\r\n}\r\n\r\n\r\n/* \u2500\u2500 LIGHT MODE  (theme-light) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\r\n.theme-light .list-number,\r\n.theme-light ol>li::marker,\r\n.theme-light ul>li::marker {\r\n  color: var(--ct-ol-marker-light);\r\n}\r\n\r\n.theme-light .markdown-reading-view ul>li>.list-bullet:after,\r\n.theme-light .markdown-source-view.mod-cm6 .HyperMD-list-line-1 .list-bullet:after {\r\n  height: 5px; width: 5px; border-radius: 50%;\r\n  background: var(--ct-bullet-light) !important;\r\n}\r\n\r\n.theme-light .markdown-reading-view ul>li>ul>li>.list-bullet:after,\r\n.theme-light .markdown-source-view.mod-cm6 .HyperMD-list-line-2 .list-bullet:after {\r\n  height: 1px; width: 7px; border-radius: 0;\r\n  background: var(--ct-bullet-light) !important;\r\n}\r\n\r\n.theme-light .markdown-reading-view ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-light .markdown-source-view.mod-cm6 .HyperMD-list-line-3 .list-bullet:after {\r\n  height: 4px; width: 4px;\r\n  background: transparent;\r\n  border: 1px solid var(--ct-bullet-light) !important; border-radius: 50%;\r\n}\r\n\r\n.theme-light .markdown-reading-view ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-light .markdown-source-view.mod-cm6 .HyperMD-list-line-4 .list-bullet:after {\r\n  height: 5px; width: 5px; border-radius: 0;\r\n  background: var(--ct-bullet-light) !important;\r\n}\r\n\r\n.theme-light .markdown-reading-view ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-light .markdown-source-view.mod-cm6 .HyperMD-list-line-5 .list-bullet:after {\r\n  height: 1px; width: 7px; border-radius: 0;\r\n  background: var(--ct-bullet-light) !important;\r\n}\r\n\r\n.theme-light .markdown-reading-view ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-light .markdown-source-view.mod-cm6 .HyperMD-list-line-6 .list-bullet:after {\r\n  height: 4px; width: 4px;\r\n  background: transparent;\r\n  border: 1px solid var(--ct-bullet-light) !important;\r\n}\r\n\r\n.theme-light .markdown-reading-view ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-light .markdown-source-view.mod-cm6 .HyperMD-list-line-7 .list-bullet:after {\r\n  height: 2px; width: 2px; border-radius: 50%;\r\n  background: var(--ct-bullet-light) !important;\r\n}\r\n\r\n\r\n\r\n\r\n/*****************************************************************\r\n *  \uD14C\uC774\uBE14 \uC2A4\uD0C0\uC77C \u2013 \uB2E8\uC77C \uD1A0\uD070 \uAE30\uBC18 / \uBAA8\uB4DC\uBCC4 \uC790\uB3D9\r\n *****************************************************************/\r\n.el-table table{\r\n  width:100%!important; border-collapse:collapse;border-spacing:0;\r\n  border-top:2.27px solid var(--ct-table-border);\r\n  border-bottom:2.27px solid var(--ct-table-border);\r\n  box-shadow:0 0 20px var(--ct-table-shadow);\r\n}\r\n.el-table th,.el-table td{border:none;padding:.51rem;line-height:1.1;}\r\n.el-table table>tbody>tr:first-child>th,\r\n.el-table table>tbody>tr:first-child>td{border-top:1.36px solid var(--ct-table-border);}\r\n.el-table table>tbody>tr:last-child>th,\r\n.el-table table>tbody>tr:last-child>td{border-bottom:1.36px solid var(--ct-table-border);}\r\n.el-table thead th{\r\n  font-weight:700;padding:8px 9px 5px;\r\n  background:var(--ct-base-white)!important;color:var(--ct-base-black);\r\n}\r\n.theme-dark .el-table thead th{\r\n  background:var(--background-primary)!important;color:var(--ct-base-white);\r\n}\r\n.el-table tbody tr:nth-child(even){background:var(--ct-table-row-even);}\r\n.el-table tbody tr:hover td   {background:var(--ct-table-row-hover);}\r\n.theme-dark .el-table td      {color:var(--ct-base-white);}  /* \uD14D\uC2A4\uD2B8 \uD770\uC0C9 */\r\n\r\n/*****************************************************************\r\n *  \uC774\uBBF8\uC9C0(Embeds) & \uB9AC\uC2A4\uD2B8 \uB0B4 \uC774\uBBF8\uC9C0 \uBCF4\uD638\r\n *****************************************************************/\r\n.el-p.el-embed-image img,\r\nli .el-p.el-embed-image img,\r\nul li img,ol li img,\r\n.tab-content img,.tabs img{\r\n  display:block;width:700px;max-width:100%;height:auto;margin:1rem auto;\r\n  border:1px solid var(--ct-image-border);\r\n  box-shadow:0 4px 10px var(--ct-image-shadow);\r\n  border-radius:4px;\r\n}\r\nli img{display:block;max-width:100%;height:auto;margin:.5rem auto;}\r\n\r\n/*****************************************************************\r\n *  \uBA54\uD0C0\uB370\uC774\uD130 \uD328\uB110 \uC228\uAE40(.hide_properties) \u2013 \uC6D0\uBCF8 \uC720\uC9C0\r\n *****************************************************************/\r\n.hide_properties .metadata-container,\r\n.hide_properties .metadata-properties,\r\n.hide_properties .metadata-property,\r\n.hide_properties .metadata-collapse-indicator,\r\n.hide_properties .frontmatter-container,\r\n.hide_properties .frontmatter{display:none!important;}\r\n\r\n/* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n   \uD5E4\uB354 \uB0B4\uBD80:  \uBC88\uD638 \u2192 \uD14D\uC2A4\uD2B8 \u2192 \uC811\uAE30\uC544\uC774\uCF58(\uC6B0\uCE21)  +  \uACB9\uCE68 \uD574\uC18C\r\n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\r\n\r\n/* \u2460 \uD5E4\uB354 \uCEE8\uD14C\uC774\uB108\uB294 \uC774\uBBF8 flex; \uC815\uB82C\uB9CC \uD655\uC778 */\r\n.markdown-preview-view h1,\r\n.markdown-preview-view h2,\r\n.markdown-preview-view h3,\r\n.markdown-preview-view h4,\r\n.markdown-preview-view h5,\r\n.markdown-preview-view h6{\r\n  display:flex!important;          /* \uD639\uC2DC inline-flex\uAC00 \uC544\uB2CC \uACBD\uC6B0 \uB300\uBE44 */\r\n  align-items:center;\r\n  width:100%!important;            /* \uBC11\uC904 100 % */\r\n  margin:5px 0!important;\r\n  border-bottom-style:outset;\r\n}\r\n\r\n/* \u2462 \uC811\uAE30 \uC544\uC774\uCF58 \u2013 \uC808\uB300\u2192\uC815\uC801 + \uC6B0\uCE21 \uB05D */\r\n.markdown-preview-view .heading-collapse-indicator.collapse-indicator{\r\n  position:static!important;       /* \u2190 \uACB9\uCE68 \uC6D0\uC778 \uC81C\uAC70 */\r\n  order:2;                         /* \uB9E8 \uB4A4 */\r\n  flex:0 0 auto;\r\n  margin-left:auto;                /* \uB0A8\uC740 \uACF5\uAC04 \uCC44\uC6B0\uACE0 \uC6B0\uCE21 \uC815\uB82C */\r\n}\r\n\r\n\r\n/* settings \uD0ED \uC548\uB0B4 \uBB38\uAD6C */\r\n.ct-tip{\r\n  font-size: 0.85em;\r\n  margin: 0 0 0.5em 0;\r\n  color: var(--text-muted);\r\n}\r\n\r\n\r\n\r\n/* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n   \uD3F4\uB354\uB178\uD2B8 \uC804\uC6A9: \uC0AC\uAC01\uD615 \uC544\uC774\uCF58 + \uD074\uB9AD \uBE44\uD65C\uC131\uD654\r\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\r\n.tree-item-self.nav-folder-title.has-folder-note \r\n  .tree-item-icon.collapse-icon {\r\n  display: none !important;\r\n  /* 3) \uD074\uB9AD \uBB34\uC2DC (\uC811\uAE30/\uD3BC\uCE58\uAE30 \uC774\uBCA4\uD2B8 \uCC28\uB2E8) */\r\n  pointer-events: none        !important;\r\n}\r\n\r\n\r\n\r\n.tree-item-self.nav-folder-title.is-clickable.mod-collapsible.has-folder-note{\r\n  padding-left:0.25rem!important;\r\n}\r\n\r\n.tree-item-self.nav-folder-title.is-clickable.mod-collapsible.has-folder-note{\r\n  padding-left:0.25rem!important;\r\n}\r\n\r\n\r\n.theme-dark .canvas-node-content-blocker ol>li::marker,\r\n.theme-dark .canvas-node-content-blocker ul>li::marker,\r\n.theme-dark .canvas-node-content ol>li::marker,\r\n.theme-dark .canvas-node-content ul>li::marker{color:var(--ct-ol-marker-dark);}\r\n.theme-dark .canvas-node-content-blocker ul>li>.list-bullet:after,\r\n.theme-dark .canvas-node-content ul>li>.list-bullet:after{height:5px;width:5px;border-radius:50%;background:var(--ct-bullet-dark)!important;}\r\n.theme-dark .canvas-node-content-blocker ul>li>ul>li>.list-bullet:after,\r\n.theme-dark .canvas-node-content ul>li>ul>li>.list-bullet:after{height:1px;width:7px;border-radius:0;background:var(--ct-bullet-dark)!important;}\r\n.theme-dark .canvas-node-content-blocker ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-dark .canvas-node-content ul>li>ul>li>ul>li>.list-bullet:after{height:4px;width:4px;background:transparent;border:1px solid var(--ct-bullet-dark)!important;border-radius:50%;}\r\n.theme-dark .canvas-node-content-blocker ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-dark .canvas-node-content ul>li>ul>li>ul>li>ul>li>.list-bullet:after{height:5px;width:5px;border-radius:0;background:var(--ct-bullet-dark)!important;}\r\n.theme-dark .canvas-node-content-blocker ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-dark .canvas-node-content ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after{height:1px;width:7px;border-radius:0;background:var(--ct-bullet-dark)!important;}\r\n.theme-dark .canvas-node-content-blocker ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-dark .canvas-node-content ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after{height:4px;width:4px;background:transparent;border:1px solid var(--ct-bullet-dark)!important;}\r\n.theme-dark .canvas-node-content-blocker ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-dark .canvas-node-content ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after{height:2px;width:2px;border-radius:50%;background:var(--ct-bullet-dark)!important;}\r\n\r\n.theme-light .canvas-node-content-blocker ol>li::marker,\r\n.theme-light .canvas-node-content-blocker ul>li::marker,\r\n.theme-light .canvas-node-content ol>li::marker,\r\n.theme-light .canvas-node-content ul>li::marker{color:var(--ct-ol-marker-light);}\r\n.theme-light .canvas-node-content-blocker ul>li>.list-bullet:after,\r\n.theme-light .canvas-node-content ul>li>.list-bullet:after{height:5px;width:5px;border-radius:50%;background:var(--ct-bullet-light)!important;}\r\n.theme-light .canvas-node-content-blocker ul>li>ul>li>.list-bullet:after,\r\n.theme-light .canvas-node-content ul>li>ul>li>.list-bullet:after{height:1px;width:7px;border-radius:0;background:var(--ct-bullet-light)!important;}\r\n.theme-light .canvas-node-content-blocker ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-light .canvas-node-content ul>li>ul>li>ul>li>.list-bullet:after{height:4px;width:4px;background:transparent;border:1px solid var(--ct-bullet-light)!important;border-radius:50%;}\r\n.theme-light .canvas-node-content-blocker ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-light .canvas-node-content ul>li>ul>li>ul>li>ul>li>.list-bullet:after{height:5px;width:5px;border-radius:0;background:var(--ct-bullet-light)!important;}\r\n.theme-light .canvas-node-content-blocker ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-light .canvas-node-content ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after{height:1px;width:7px;border-radius:0;background:var(--ct-bullet-light)!important;}\r\n.theme-light .canvas-node-content-blocker ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-light .canvas-node-content ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after{height:4px;width:4px;background:transparent;border:1px solid var(--ct-bullet-light)!important;}\r\n.theme-light .canvas-node-content-blocker ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after,\r\n.theme-light .canvas-node-content ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>ul>li>.list-bullet:after{height:2px;width:2px;border-radius:50%;background:var(--ct-bullet-light)!important;}\r\n\r\n\r\n.canvas-node-content.markdown-embed > .markdown-embed-content > .markdown-preview-view {\r\n  padding: 1rem 0.3rem 1rem 1rem !important;\r\n}\r\n\r\n.markdown-source-view.mod-inside-iframe > .cm-editor > .cm-scroller{\r\n  padding: 1rem 0.3rem 1rem 1rem !important;\r\n}\r\n\r\n.markdown-source-view.mod-inside-iframe > .cm-editor > .cm-scroller {\r\n  padding: 1rem 0.3rem 1rem 1rem !important;\r\n}";

// src/core/theme/DesignService.ts
var _DesignService = class {
  constructor(app, cfgGetter) {
    this.root = document.documentElement;
    this.cfg = cfgGetter;
    this.applyAll();
    app.workspace.on("css-change", () => this.applyAll());
  }
  applyAll() {
    const { tokens, customCss } = this.cfg();
    const mode = document.body.classList.contains("theme-dark") ? "dark" : "light";
    injectTokens(mode, tokens != null ? tokens : DEFAULT_TOKENS);
    this.upsertStyle(_DesignService.BASE, base_default);
    this.upsertStyle(_DesignService.CUSTOM, customCss || "");
  }
  /* util */
  upsertStyle(id, css) {
    let el = document.getElementById(id);
    if (!el && css) {
      el = Object.assign(document.createElement("style"), { id });
      document.head.appendChild(el);
    }
    if (el)
      el.textContent = css;
  }
};
var DesignService = _DesignService;
/* style 태그 id */
DesignService.BASE = "ct-base-theme";
DesignService.CUSTOM = "ct-custom-css";

// src/features/interactive-table/utils/cloneRootStyle.ts
function cloneRootStyleToLeaves(app) {
  const src = document.documentElement.style.cssText;
  const htmlClasses = document.documentElement.className;
  const bodyClasses = document.body.className;
  const styleIds = [
    "ct-style-fallback",
    "ct-base-theme",
    "ct-custom-css",
    "ct-base-vars",
    "ct-tag-colors"
  ];
  app.workspace.iterateAllLeaves((leaf) => {
    var _a3, _b;
    const doc = (_b = (_a3 = leaf.view) == null ? void 0 : _a3.containerEl) == null ? void 0 : _b.ownerDocument;
    if (doc && doc !== document) {
      doc.documentElement.style.cssText = src;
      doc.documentElement.className = htmlClasses;
      doc.body.className = bodyClasses;
      for (const id of styleIds) {
        const srcEl = document.getElementById(id);
        if (!srcEl)
          continue;
        let dest = doc.getElementById(id);
        if (!dest) {
          dest = doc.createElement("style");
          dest.id = id;
          doc.head.appendChild(dest);
        }
        dest.textContent = srcEl.textContent;
      }
    }
  });
}

// src/core/Plugin.ts
var _a;
(_a = window.coverTable) != null ? _a : window.coverTable = {};
var ct = window.coverTable;
var _a2;
(_a2 = ct.waitForEngine) != null ? _a2 : ct.waitForEngine = async (timeout = 4e3) => {
  const t0 = Date.now();
  while (Date.now() - t0 < timeout) {
    if (ct.engine)
      return ct.engine;
    await new Promise((r) => setTimeout(r, 40));
  }
  throw new Error("coverTable.waitForEngine \u2192 timeout");
};
var _CoverTablePlugin = class extends import_obsidian6.Plugin {
  constructor() {
    super(...arguments);
    this.explorerStyleEl = null;
  }
  /* -----------------------------------------------------------
   *  applyZeroFolderVisibility()
   *  · “0_” prefix 폴더를 탐색기에서 숨김
   * ----------------------------------------------------------- */
  applyZeroFolderVisibility() {
    const id = _CoverTablePlugin.ZERO_FOLDER_STYLE_ID;
    let tag = document.getElementById(id);
    if (this.settings.hideZeroFolders) {
      if (!tag) {
        tag = document.createElement("style");
        tag.id = id;
        tag.textContent = `
/* Cover-Table \u25BA hide 0_ folders and their contents */

.nav-folder-title[data-path^="0_"],

.nav-folder-title[data-path*="/0_"],
.nav-file-title[data-path^="0_"],
.nav-file-title[data-path*="/0_"] {
  display: none !important;
}`;
        document.head.appendChild(tag);
      }
    } else {
      tag == null ? void 0 : tag.remove();
    }
  }
  /** 
   * Explorer 노트 숨김 
   * 단, data-path^="0_" 으로 시작하는 폴더 내부는 제외 
   */
  applyExplorerHide() {
    if (!this.explorerStyleEl) {
      this.explorerStyleEl = document.createElement("style");
      this.explorerStyleEl.id = "ct-hide-notes-style";
      this.explorerStyleEl.textContent = `
/* hide all files except under "0_" folders */
.nav-file-title:not([data-path^="0_"]):not([data-path*="/0_"]) {
  display: none !important;
}
`;
      document.head.appendChild(this.explorerStyleEl);
    }
  }
  /* ===========================================================
   *  onload()
   * -----------------------------------------------------------
   *  · 플러그인 초기화 & 각 서브-모듈 부트스트랩
   * =========================================================== */
  async onload() {
    EventBus.init(this.app);
    Log.d("[Cover-Table] \u25B6 onload");
    try {
      const base = this.app.vault.adapter instanceof import_obsidian7.FileSystemAdapter ? this.app.vault.adapter.getBasePath() : "";
      const pluginDir = this.manifest.dir || "";
      const absPath = (0, import_path.join)(base, pluginDir, "style.css");
      const cssText = (0, import_fs.readFileSync)(absPath, "utf8");
      const tag = document.createElement("style");
      tag.id = "ct-style-fallback";
      tag.textContent = cssText;
      document.head.appendChild(tag);
      this.register(() => tag.remove());
      Log.d("[Cover-Table] fallback style injected \u2714");
    } catch (e) {
      Log.d("[Cover-Table] fallback style inject FAIL", e);
    }
    if (!ct.engine)
      ct.engine = new InteractiveTableController(this.app);
    if (!ct.ganttController)
      ct.ganttController = new GanttController(this.app);
    ct.obsidian = { Notice: import_obsidian6.Notice, Modal: import_obsidian6.Modal, SuggestModal: import_obsidian6.SuggestModal };
    await this.loadSettings();
    Log.setDebug(this.settings.debugLog);
    try {
      const st = new CoverTableSettingTab(this.app, this);
      this.addSettingTab(st);
      Log.d("\u{1F197} CoverTableSettingTab \uB4F1\uB85D \uC644\uB8CC");
    } catch (e) {
      Log.e("\u274C SettingTab \uC0DD\uC131 \uC2E4\uD328:", e);
      new import_obsidian6.Notice("Cover-Table \uC124\uC815 UI \uB85C\uB4DC \uC2E4\uD328 \u2014 \uCF58\uC194(DevTools)\uC744 \uD655\uC778\uD558\uC138\uC694.");
    }
    this.applyZeroFolderVisibility();
    this.applyExplorerHide();
    this.listCallouts = new ListCalloutManager(this);
    this.registerEditorExtension(this.listCallouts.editorExtensions());
    this.registerMarkdownPostProcessor(this.listCallouts.postProcessor(), 1e4);
    this.design = new DesignService(this.app, () => this.settings);
    const ctTagColoursDark = {
      status: "#ffffff",
      topic: "#ff5555",
      method: "#ff9900",
      project: "#ffeb3b",
      region: "#55ff55",
      type: "#55ffdd",
      person: "#5574ff"
    };
    const ctTagColoursLight = {
      status: "#989898",
      topic: "#8b0000",
      method: "#8b4500",
      project: "#666600",
      region: "#006400",
      type: "#006661",
      person: "#000266"
    };
    const ctTagStyleId = "ct-tag-colors";
    const ctApplyTagStyles = (doc = document) => {
      const rules = [];
      for (const p of Object.keys(ctTagColoursDark)) {
        const dark = ctTagColoursDark[p];
        const light = ctTagColoursLight[p];
        rules.push(
          `.tag[href^="#${p}"]{color:${dark};}`,
          `.multi-select-pill[data-value^="#${p}"], .multi-select-pill[data-value^="${p}"]{background:${dark};border-color:${dark};color:black;}`,
          `.multi-select-pill[data-value^="#${p}"] svg.svg-icon.lucide-x, .multi-select-pill[data-value^="${p}"] svg.svg-icon.lucide-x { color:black; }`,
          `.markdown-source-view.mod-cm6 span.cm-hashtag[data-tag^="#${p}"]{color:${dark};}`,
          `.theme-light .tag[href^="#${p}"]{color:${light};}`,
          `.theme-light .multi-select-pill[data-value^="#${p}"], .theme-light .multi-select-pill[data-value^="${p}"]{background:${light};border-color:${light};color:white;}`,
          `.theme-light .multi-select-pill[data-value^="#${p}"] svg.svg-icon.lucide-x, .theme-light .multi-select-pill[data-value^="${p}"] svg.svg-icon.lucide-x { color:white; }`,
          `.theme-light .markdown-source-view.mod-cm6 span.cm-hashtag[data-tag^="#${p}"]{color:${light};}`
        );
      }
      let st = doc.getElementById(ctTagStyleId);
      if (!st) {
        st = doc.createElement("style");
        st.id = ctTagStyleId;
        doc.head.appendChild(st);
      }
      st.textContent = rules.join("\n");
    };
    const ctApplyTagPillValues = () => {
      document.querySelectorAll(".multi-select-pill").forEach((p) => {
        const s = p.querySelector(".multi-select-pill-content span");
        if (!s)
          return;
        const value = s.textContent || "";
        p.setAttribute("data-value", value);
      });
    };
    ctApplyTagStyles();
    ctApplyTagPillValues();
    const ctPillObserver = new MutationObserver(() => {
      ctApplyTagPillValues();
      ctApplyTagStyles();
    });
    ctPillObserver.observe(document.body, { childList: true, subtree: true });
    this.register(() => ctPillObserver.disconnect());
    cloneRootStyleToLeaves(this.app);
    this.registerMarkdownPostProcessor(
      async (el, ctx) => {
        var _a3;
        const codes = el.querySelectorAll(
          "pre > code.language-ct, pre > code.language-cover-table"
        );
        if (codes.length === 0)
          return;
        const dv = window.dataviewApi || window.DataviewAPI || window.dvAPI;
        if (!dv) {
          Log.w("[Cover-Table] Dataview API not found");
          return;
        }
        await ct.waitForEngine();
        for (const code of Array.from(codes)) {
          try {
            const opts = JSON.parse(code.textContent || "{}");
            const container = code.parentElement;
            if (opts.type === "gantt") {
              (_a3 = opts.renderInteractiveBelow) != null ? _a3 : opts.renderInteractiveBelow = true;
              await ct.ganttController.renderView(dv, opts, ctx, container);
              continue;
            }
            if (ctx)
              await ct.engine.renderAutoView(dv, opts, ctx, container);
          } catch (e) {
            Log.e("[Cover-Table] render error:", e);
          }
        }
      }
    );
    Log.d("[Cover-Table] \u25B6 onload done");
    window.addEventListener("unhandledrejection", (ev) => {
      var _a3;
      const msg = String(((_a3 = ev.reason) == null ? void 0 : _a3.message) || ev.reason || "").toLowerCase();
      if (msg.includes("cannot read properties of null") && msg.includes("children")) {
        ev.preventDefault();
        return;
      }
      if (msg.includes("illegal access")) {
        ev.preventDefault();
      }
    });
    this.registerEvent(
      this.app.workspace.on("layout-change", () => {
        cloneRootStyleToLeaves(this.app);
      })
    );
    this.registerEvent(
      this.app.workspace.on("css-change", () => {
        cloneRootStyleToLeaves(this.app);
        ctApplyTagStyles();
      })
    );
    this.registerEvent(
      this.app.workspace.on("window-open", (_leaf, win) => {
        cloneRootStyleToLeaves(this.app);
        ctApplyTagStyles(win.document);
      })
    );
  }
  /* ===========================================================
   *  onunload()
   * -----------------------------------------------------------
   *  · 리스너 / 싱글턴 해제
   * =========================================================== */
  onunload() {
    Log.d("[Cover-Table] \u25B6 onunload");
    EventBus.i.off(ct.ganttController.refreshByBus.bind(ct.ganttController));
  }
  /* ===========================================================
   *  Settings helpers
   * =========================================================== */
  async loadSettings() {
    const raw = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, raw);
  }
  async saveSettings() {
    await this.saveData(this.settings);
    Log.setDebug(this.settings.debugLog);
    this.applyZeroFolderVisibility();
    this.applyDesignSettings();
    cloneRootStyleToLeaves(this.app);
  }
  /* ===========================================================
   *  Theme / Design 적용
   * =========================================================== */
  /* ===========================================================
   *  Theme / Design 적용
   * =========================================================== */
  applyDesignSettings() {
    const mode = this.app.getTheme() === "obsidian-dark" ? "dark" : "light";
    const root = document.documentElement;
    const idVars = "ct-base-vars";
    let stVars = document.getElementById(idVars);
    if (!stVars) {
      stVars = document.createElement("style");
      stVars.id = idVars;
      document.head.appendChild(stVars);
    }
    const vars = this.settings.baseVars;
    const rootBlock = [];
    const darkBlock = [];
    Object.entries(vars).forEach(([k, v]) => {
      (k.endsWith("-dark") ? darkBlock : rootBlock).push(`${k}:${v};`);
    });
    stVars.textContent = `
      :root{${rootBlock.join("")}}
      .theme-dark{${darkBlock.join("")}}
    `;
    const idCustom = "ct-custom-css";
    let stCustom = document.getElementById(idCustom);
    if (!stCustom) {
      stCustom = document.createElement("style");
      stCustom.id = idCustom;
      document.head.appendChild(stCustom);
    }
    stCustom.textContent = this.settings.customCss || "";
  }
  /* ===========================================================
  *  List-Callout helpers
  *  · SettingTab → commit() 에서 호출
  * =========================================================== */
  rebuildListCallouts() {
    if (this.listCallouts) {
      this.listCallouts.rebuild();
    }
  }
  reloadEmbed() {
  }
};
var CoverTablePlugin = _CoverTablePlugin;
/* ── 필드 ─────────────────────────────────────────────────── */
CoverTablePlugin.ZERO_FOLDER_STYLE_ID = "ct-hide-zero-folders";
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2NvcmUvUGx1Z2luLnRzIiwgInNyYy90aGVtZS90b2tlbnMudHMiLCAic3JjL3NldHRpbmcudHMiLCAic3JjL2ZlYXR1cmVzL2ludGVyYWN0aXZlLXRhYmxlL3V0aWxzL2xvZy50cyIsICJzcmMvdWkvaW50ZXJhY3RpdmUtdGFibGUvVUlNYW5hZ2VyLnRzIiwgInNyYy91aS9tb2xlY3VsZXMvRmlsdGVyQmFyLnRzIiwgInNyYy91aS9hdG9tcy9kb20udHMiLCAic3JjL3VpL2F0b21zL2J1dHRvbi50cyIsICJzcmMvdWkvYXRvbXMvaW5wdXQudHMiLCAic3JjL3VpL2F0b21zL3NwaW5uZXIudHMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9zdHJpbmdpZnkuanMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9ybmcuanMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9uYXRpdmUuanMiLCAibm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NC5qcyIsICJzcmMvdWkvbW9sZWN1bGVzL1BhZ2luYXRpb24udHMiLCAic3JjL2ZlYXR1cmVzL2ludGVyYWN0aXZlLXRhYmxlL3V0aWxzL3RhZy50cyIsICJzcmMvdWkvbGF5b3V0cy9EYXRhVGFibGUudHMiLCAic3JjL2ZlYXR1cmVzL2ludGVyYWN0aXZlLXRhYmxlL3NlcnZpY2VzL1RhYmxlQ29udHJvbGxlci50cyIsICJzcmMvY29yZS9zdGF0ZS9TdGF0ZUNlbnRlci50cyIsICJzcmMvZmVhdHVyZXMvaW50ZXJhY3RpdmUtdGFibGUvSW50ZXJhY3RpdmVUYWJsZU1vZGVsLnRzIiwgInNyYy9jb3JlL2V2ZW50cy9FdmVudEJ1cy50cyIsICJzcmMvZmVhdHVyZXMvaW50ZXJhY3RpdmUtdGFibGUvSW50ZXJhY3RpdmVUYWJsZUNvbnRyb2xsZXIudHMiLCAic3JjL2ZlYXR1cmVzL2dhbnR0L3BhbGV0dGUudHMiLCAic3JjL2ZlYXR1cmVzL2dhbnR0L0dhbnR0TW9kZWwudHMiLCAic3JjL3VpL2dhbnR0L0dhbnR0VUlNYW5hZ2VyLnRzIiwgInNyYy9mZWF0dXJlcy9nYW50dC9HYW50dENvbnRyb2xsZXIudHMiLCAic3JjL3RoZW1lL0xpc3RDYWxsb3V0TWFuYWdlci50cyIsICJzcmMvY29yZS90aGVtZS9EZXNpZ25TZXJ2aWNlLnRzIiwgInNyYy9mZWF0dXJlcy9pbnRlcmFjdGl2ZS10YWJsZS91dGlscy9jbG9uZVJvb3RTdHlsZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIHNyYy9jb3JlL1BsdWdpbi50cyBcdTIwMTMgYXV0by1nZW5lcmF0ZWQgZnJvbSBsZWdhY3kgQ292ZXItVGFibGUgdjIwMjUtMDVcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqICAwLiBcdUM2NzhcdUJEODAgXHVCQUE4XHVCNEM4ICYgXHVEMEMwXHVDNzg1XHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgXHUwMEI3IE9ic2lkaWFuIFx1RDUwQ1x1QjdFQ1x1QURGOFx1Qzc3OCBBUElcclxuICogIFx1MDBCNyBDb3Zlci1UYWJsZSBcdUMxMUNcdUJFMEMtXHVCQUE4XHVCNEM4KFx1QzBDOCBcdUI1MTRcdUI4MDlcdUQxMzBcdUI5QUMgXHVBRDZDXHVDODcwIFx1QUUzMFx1QzkwMCBpbXBvcnQpXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5pbXBvcnQge1xyXG4gIEFwcCxcclxuICBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxyXG4gIE1vZGFsLFxyXG4gIE5vdGljZSxcclxuICBQbHVnaW4sXHJcbiAgU3VnZ2VzdE1vZGFsLFxyXG59IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tIFwiZnNcIjtcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB7IEZpbGVTeXN0ZW1BZGFwdGVyIH0gZnJvbSBcIm9ic2lkaWFuXCI7ICAgLy8gXHUyMTkwIFx1Q0Q5NFx1QUMwMFxyXG5cclxuXHJcbi8qIFx1MjUwMFx1MjUwMCBcdUFDRjVcdUQxQjUgXHVDMTI0XHVDODE1ICYgQ1NTIFx1QkNDMFx1QzIxOCBcdUI5RjUgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwICovXHJcbmltcG9ydCB7XHJcbiAgREVGQVVMVF9TRVRUSU5HUyxcclxuICBDb3ZlclRhYmxlU2V0dGluZ3MsXHJcbiAgQ292ZXJUYWJsZVNldHRpbmdUYWIsXHJcbn0gZnJvbSBcIi4uL3NldHRpbmdcIjtcclxuXHJcbi8qIFx1MjUwMFx1MjUwMCBGZWF0dXJlIFx1QkFBOFx1QjRDOCBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuaW1wb3J0IHsgSW50ZXJhY3RpdmVUYWJsZUNvbnRyb2xsZXIgYXMgSW50ZXJhY3RpdmVUYWJsZSB9IGZyb20gXCIuLi9mZWF0dXJlcy9pbnRlcmFjdGl2ZS10YWJsZS9JbnRlcmFjdGl2ZVRhYmxlQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBHYW50dENvbnRyb2xsZXIgICAgICAgIH0gZnJvbSBcIi4uL2ZlYXR1cmVzL2dhbnR0L0dhbnR0Q29udHJvbGxlclwiO1xyXG5cclxuLyogXHUyNTAwXHUyNTAwIFRoZW1lIC8gU2VydmljZSBcdUJBQThcdUI0QzggXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwICovXHJcbmltcG9ydCB7IExpc3RDYWxsb3V0TWFuYWdlciAgICB9IGZyb20gXCIuLi90aGVtZS9MaXN0Q2FsbG91dE1hbmFnZXJcIjtcclxuaW1wb3J0IHsgRGVzaWduU2VydmljZSB9IGZyb20gXCIuL3RoZW1lL0Rlc2lnblNlcnZpY2VcIjsgXHJcbmltcG9ydCB7IEV2ZW50QnVzIH0gZnJvbSBcIi4vZXZlbnRzL0V2ZW50QnVzXCI7XHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tIFwiLi4vZmVhdHVyZXMvaW50ZXJhY3RpdmUtdGFibGUvdXRpbHMvbG9nXCI7XHJcblxyXG5pbXBvcnQgeyBjbG9uZVJvb3RTdHlsZVRvTGVhdmVzIH0gZnJvbSBcIi4uL2ZlYXR1cmVzL2ludGVyYWN0aXZlLXRhYmxlL3V0aWxzL2Nsb25lUm9vdFN0eWxlXCI7XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogIDEuIFx1QzgwNFx1QzVFRCBcdUIxMjRcdUM3ODRcdUMyQTRcdUQzOThcdUM3NzRcdUMyQTQod2luZG93LmNvdmVyVGFibGUpXHJcbiAqICAgIFx1MDBCNyBJbnRlcmFjdGl2ZVRhYmxlIFx1QzJGMVx1QUUwMFx1RDEzNCAmIFx1RDVFQ1x1RDM3QyBcdUIxNzhcdUNEOUNcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbmRlY2xhcmUgZ2xvYmFsIHsgaW50ZXJmYWNlIFdpbmRvdyB7IGNvdmVyVGFibGU6IGFueSB9IH1cclxud2luZG93LmNvdmVyVGFibGUgPz89IHt9O1xyXG5jb25zdCBjdCA9IHdpbmRvdy5jb3ZlclRhYmxlO1xyXG5cclxuLyoqIFx1QzVENFx1QzlDNChSZW5kZXJlcikgXHVDRDA4XHVBRTMwXHVENjU0IFx1QjMwMFx1QUUzMCBcdTIwMTMgXHVCMkU0XHVCOTc4IFx1QkFBOFx1QjRDOFx1QzVEMFx1QzExQyBhd2FpdCBcdUFDMDBcdUIyQTUgKi9cclxuY3Qud2FpdEZvckVuZ2luZSA/Pz0gYXN5bmMgKHRpbWVvdXQgPSA0XzAwMCkgPT4ge1xyXG4gIGNvbnN0IHQwID0gRGF0ZS5ub3coKTtcclxuICB3aGlsZSAoRGF0ZS5ub3coKSAtIHQwIDwgdGltZW91dCkge1xyXG4gICAgaWYgKGN0LmVuZ2luZSkgcmV0dXJuIGN0LmVuZ2luZTtcclxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCA0MCkpO1xyXG4gIH1cclxuICB0aHJvdyBuZXcgRXJyb3IoXCJjb3ZlclRhYmxlLndhaXRGb3JFbmdpbmUgXHUyMTkyIHRpbWVvdXRcIik7XHJcbn07XHJcblxyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiAgMi4gUGx1Z2luIFx1RDA3NFx1Qjc5OFx1QzJBNCAoT2JzaWRpYW4gY29yZSlcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvdmVyVGFibGVQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG4gIC8qIFx1MjUwMFx1MjUwMCBcdUQ1NDRcdUI0REMgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwICovXHJcbiAgc3RhdGljIHJlYWRvbmx5IFpFUk9fRk9MREVSX1NUWUxFX0lEID0gXCJjdC1oaWRlLXplcm8tZm9sZGVyc1wiO1xyXG5cclxuICAvKiogVUkgLyBIZWxwZXIgXHVDMkYxXHVBRTAwXHVEMTM0ICovXHJcblxyXG4gIHByaXZhdGUgbGlzdENhbGxvdXRzITogTGlzdENhbGxvdXRNYW5hZ2VyO1xyXG4gIHByaXZhdGUgZGVzaWduITogRGVzaWduU2VydmljZTtcclxuICBwcml2YXRlIGV4cGxvcmVyU3R5bGVFbDogSFRNTFN0eWxlRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG5cclxuXHJcbiAgLyoqIFx1QzBBQ1x1QzZBOVx1Qzc5MCBcdUMxMjRcdUM4MTUoU2V0dGluZ1RhYiBcdTIxOTIgXHVDODAwXHVDN0E1L1x1Qjg1Q1x1QjREQykgKi9cclxuICBwdWJsaWMgc2V0dGluZ3MhOiBDb3ZlclRhYmxlU2V0dGluZ3M7XHJcblxyXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICogIGFwcGx5WmVyb0ZvbGRlclZpc2liaWxpdHkoKVxyXG4gICAqICBcdTAwQjcgXHUyMDFDMF9cdTIwMUQgcHJlZml4IFx1RDNGNFx1QjM1NFx1Qjk3QyBcdUQwRDBcdUMwQzlcdUFFMzBcdUM1RDBcdUMxMUMgXHVDMjI4XHVBRTQwXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuICBhcHBseVplcm9Gb2xkZXJWaXNpYmlsaXR5KCk6IHZvaWQge1xyXG4gICAgY29uc3QgaWQgPSBDb3ZlclRhYmxlUGx1Z2luLlpFUk9fRk9MREVSX1NUWUxFX0lEO1xyXG4gICAgbGV0IHRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSBhcyBIVE1MU3R5bGVFbGVtZW50IHwgbnVsbDtcclxuXHJcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5oaWRlWmVyb0ZvbGRlcnMpIHtcclxuICAgICAgaWYgKCF0YWcpIHtcclxuICAgICAgICB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XHJcbiAgICAgICAgdGFnLmlkID0gaWQ7XHJcbiAgICAgICAgdGFnLnRleHRDb250ZW50ID0gYFxyXG4vKiBDb3Zlci1UYWJsZSBcdTI1QkEgaGlkZSAwXyBmb2xkZXJzIGFuZCB0aGVpciBjb250ZW50cyAqL1xyXG5cclxuLm5hdi1mb2xkZXItdGl0bGVbZGF0YS1wYXRoXj1cIjBfXCJdLFxyXG5cclxuLm5hdi1mb2xkZXItdGl0bGVbZGF0YS1wYXRoKj1cIi8wX1wiXSxcclxuLm5hdi1maWxlLXRpdGxlW2RhdGEtcGF0aF49XCIwX1wiXSxcclxuLm5hdi1maWxlLXRpdGxlW2RhdGEtcGF0aCo9XCIvMF9cIl0ge1xyXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcclxufWA7XHJcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0YWcpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0YWc/LnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuLyoqIFxyXG4gKiBFeHBsb3JlciBcdUIxNzhcdUQyQjggXHVDMjI4XHVBRTQwIFxyXG4gKiBcdUIyRTgsIGRhdGEtcGF0aF49XCIwX1wiIFx1QzczQ1x1Qjg1QyBcdUMyRENcdUM3OTFcdUQ1NThcdUIyOTQgXHVEM0Y0XHVCMzU0IFx1QjBCNFx1QkQ4MFx1QjI5NCBcdUM4MUNcdUM2NzggXHJcbiAqL1xyXG5hcHBseUV4cGxvcmVySGlkZSgpOiB2b2lkIHtcclxuICBpZiAoIXRoaXMuZXhwbG9yZXJTdHlsZUVsKSB7XHJcbiAgICB0aGlzLmV4cGxvcmVyU3R5bGVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuICAgIHRoaXMuZXhwbG9yZXJTdHlsZUVsLmlkID0gXCJjdC1oaWRlLW5vdGVzLXN0eWxlXCI7XHJcbiAgICB0aGlzLmV4cGxvcmVyU3R5bGVFbC50ZXh0Q29udGVudCA9IGBcclxuLyogaGlkZSBhbGwgZmlsZXMgZXhjZXB0IHVuZGVyIFwiMF9cIiBmb2xkZXJzICovXHJcbi5uYXYtZmlsZS10aXRsZTpub3QoW2RhdGEtcGF0aF49XCIwX1wiXSk6bm90KFtkYXRhLXBhdGgqPVwiLzBfXCJdKSB7XHJcbiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xyXG59XHJcbmA7XHJcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHRoaXMuZXhwbG9yZXJTdHlsZUVsKTtcclxuICB9XHJcbn1cclxuXHJcblxyXG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICogIG9ubG9hZCgpXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKiAgXHUwMEI3IFx1RDUwQ1x1QjdFQ1x1QURGOFx1Qzc3OCBcdUNEMDhcdUFFMzBcdUQ2NTQgJiBcdUFDMDEgXHVDMTFDXHVCRTBDLVx1QkFBOFx1QjRDOCBcdUJEODBcdUQyQjhcdUMyQTRcdUQyQjhcdUI3QTlcclxuICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG4gIGFzeW5jIG9ubG9hZCgpIHtcclxuICAgIEV2ZW50QnVzLmluaXQodGhpcy5hcHApO1xyXG5cclxuXHJcbiAgICBMb2cuZChcIltDb3Zlci1UYWJsZV0gXHUyNUI2IG9ubG9hZFwiKTtcclxuICAgIC8qIFx1MjVCQyBcdTI0NjAgc3R5bGUuY3NzIFx1QUMxNVx1QzgxQyBcdUM4RkNcdUM3ODUgKG1hbmlmZXN0IFx1QUNCRFx1Qjg1QyBcdUJDODRcdUFERjggXHVDNkIwXHVENjhDKSAqL1xyXG4gICAgdHJ5IHtcclxuICAgICAgLyogXHUyMDIzIGdldEJhc2VQYXRoKCkgXHVCMjk0IEZpbGVTeXN0ZW1BZGFwdGVyIFx1QzVEMFx1QjlDQyBcdUM4NzRcdUM3QUMgXHUyMTkyIFx1RDBDMFx1Qzc4NSBcdUNFOTBcdUMyQTRcdUQzMDUgKi9cclxuICAgICAgY29uc3QgYmFzZSA9XHJcbiAgICAgICAgdGhpcy5hcHAudmF1bHQuYWRhcHRlciBpbnN0YW5jZW9mIEZpbGVTeXN0ZW1BZGFwdGVyXHJcbiAgICAgICAgICA/ICh0aGlzLmFwcC52YXVsdC5hZGFwdGVyIGFzIEZpbGVTeXN0ZW1BZGFwdGVyKS5nZXRCYXNlUGF0aCgpXHJcbiAgICAgICAgICA6IFwiXCI7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlYi0vTW9iaWxlIFx1RDY1OFx1QUNCRFx1Qzc3QyBcdUI1NENcdUIyOTQgXHVCRTQ4IFx1QkIzOFx1Qzc5MFx1QzVGNFxyXG5cclxuXHJcbiAgICAgIGNvbnN0IHBsdWdpbkRpciA9IHRoaXMubWFuaWZlc3QuZGlyIHx8IFwiXCI7XHJcbiAgICAgIGNvbnN0IGFic1BhdGggPSBqb2luKGJhc2UsIHBsdWdpbkRpciwgXCJzdHlsZS5jc3NcIik7XHJcblxyXG4gICAgICBjb25zdCBjc3NUZXh0ID0gcmVhZEZpbGVTeW5jKGFic1BhdGgsIFwidXRmOFwiKTtcclxuICAgICAgY29uc3QgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gICAgICB0YWcuaWQgPSBcImN0LXN0eWxlLWZhbGxiYWNrXCI7XHJcbiAgICAgIHRhZy50ZXh0Q29udGVudCA9IGNzc1RleHQ7XHJcbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodGFnKTtcclxuICAgICAgLyogXHVENTBDXHVCN0VDXHVBREY4XHVDNzc4IFx1QzVCOFx1Qjg1Q1x1QjREQyBcdUMyREMgXHVDNzkwXHVCM0Q5IFx1QzgxQ1x1QUM3MCAqL1xyXG4gICAgICB0aGlzLnJlZ2lzdGVyKCgpID0+IHRhZy5yZW1vdmUoKSk7XHJcbiAgICAgIExvZy5kKFwiW0NvdmVyLVRhYmxlXSBmYWxsYmFjayBzdHlsZSBpbmplY3RlZCBcdTI3MTRcIik7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIExvZy5kKFwiW0NvdmVyLVRhYmxlXSBmYWxsYmFjayBzdHlsZSBpbmplY3QgRkFJTFwiLCBlKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgLyogKDIpIEludGVyYWN0aXZlVGFibGUgLyBHYW50dCBcdUMyRjFcdUFFMDBcdUQxMzQgXHVENjU1XHVCQ0Y0ICovXHJcbiAgICBpZiAoIWN0LmVuZ2luZSkgICAgICAgICAgICAgIGN0LmVuZ2luZSA9IG5ldyBJbnRlcmFjdGl2ZVRhYmxlKHRoaXMuYXBwKTtcclxuICAgIGlmICghY3QuZ2FudHRDb250cm9sbGVyKSAgICAgY3QuZ2FudHRDb250cm9sbGVyID0gbmV3IEdhbnR0Q29udHJvbGxlcih0aGlzLmFwcCk7XHJcbiAgICAvKiBPYnNpZGlhbiBcdUQ1RUNcdUQzN0MgRXhwb3NlICovXHJcbiAgICBjdC5vYnNpZGlhbiA9IHsgTm90aWNlLCBNb2RhbCwgU3VnZ2VzdE1vZGFsIH07XHJcblxyXG4gICAgLyogKDMpIFNldHRpbmdzICovXHJcbiAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcbiAgIExvZy5zZXREZWJ1Zyh0aGlzLnNldHRpbmdzLmRlYnVnTG9nKTtcclxuXHJcbiAgICAvKiBcdTI1QkNcdTI1QkMgIFx1QzYwOFx1QzY3OCBcdUFDMDBcdUI0REMgXHUyNUJDXHUyNUJDICovXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBzdCA9IG5ldyBDb3ZlclRhYmxlU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcyk7XHJcbiAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihzdCk7XHJcbiAgICAgIExvZy5kKFwiXHVEODNDXHVERDk3IENvdmVyVGFibGVTZXR0aW5nVGFiIFx1QjRGMVx1Qjg1RCBcdUM2NDRcdUI4Q0NcIik7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIExvZy5lKFwiXHUyNzRDIFNldHRpbmdUYWIgXHVDMEREXHVDMTMxIFx1QzJFNFx1RDMyODpcIiwgZSk7XHJcbiAgICAgIG5ldyBOb3RpY2UoXCJDb3Zlci1UYWJsZSBcdUMxMjRcdUM4MTUgVUkgXHVCODVDXHVCNERDIFx1QzJFNFx1RDMyOCBcdTIwMTQgXHVDRjU4XHVDMTk0KERldlRvb2xzKVx1Qzc0NCBcdUQ2NTVcdUM3NzhcdUQ1NThcdUMxMzhcdUM2OTQuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYXBwbHlaZXJvRm9sZGVyVmlzaWJpbGl0eSgpO1xyXG4gICAgdGhpcy5hcHBseUV4cGxvcmVySGlkZSgpOyAgICAgICAgICAvLyBcdTIxOTAgXHVDMkUwXHVBRERDIFx1RDFBMFx1QUUwMCBcdUNEMDhcdUFFMzAgXHVDMEMxXHVEMERDIFx1QzgwMVx1QzZBOVxyXG5cclxuICAgIC8qICg1KSBMaXN0LUNhbGxvdXQgJiBIZWFkZXItTnVtYmVyaW5nICovXHJcbiAgICB0aGlzLmxpc3RDYWxsb3V0cyA9IG5ldyBMaXN0Q2FsbG91dE1hbmFnZXIodGhpcyk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRWRpdG9yRXh0ZW5zaW9uKHRoaXMubGlzdENhbGxvdXRzLmVkaXRvckV4dGVuc2lvbnMoKSk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Qb3N0UHJvY2Vzc29yKHRoaXMubGlzdENhbGxvdXRzLnBvc3RQcm9jZXNzb3IoKSwgMTBfMDAwKTtcclxuXHJcbi8qICg2KSBcdUQxNENcdUI5QzggXHVCQ0MwXHVBQ0JEIFx1MjE5MiBEZXNpZ25TZXJ2aWNlIFx1QjBCNFx1QkQ4MFx1QzVEMFx1QzExQyBcdUM3OTBcdUIzRDkgXHVDQzk4XHVCOUFDICovXHJcbnRoaXMuZGVzaWduID0gbmV3IERlc2lnblNlcnZpY2UodGhpcy5hcHAsICgpID0+IHRoaXMuc2V0dGluZ3MpO1xyXG5cclxuXHJcbiAgICAvKiBUYWcgcHJlZml4IGNvbG91cnMgaW5zaWRlIG5vdGVzICovXHJcbiAgICBjb25zdCBjdFRhZ0NvbG91cnNEYXJrOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xyXG4gICAgICBzdGF0dXM6IFwiI2ZmZmZmZlwiLFxyXG4gICAgICB0b3BpYzogXCIjZmY1NTU1XCIsXHJcbiAgICAgIG1ldGhvZDogXCIjZmY5OTAwXCIsXHJcbiAgICAgIHByb2plY3Q6IFwiI2ZmZWIzYlwiLFxyXG4gICAgICByZWdpb246IFwiIzU1ZmY1NVwiLFxyXG4gICAgICB0eXBlOiBcIiM1NWZmZGRcIixcclxuICAgICAgcGVyc29uOiBcIiM1NTc0ZmZcIixcclxuICAgIH07XHJcbiAgICBjb25zdCBjdFRhZ0NvbG91cnNMaWdodDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcclxuICAgICAgc3RhdHVzOiBcIiM5ODk4OThcIixcclxuICAgICAgdG9waWM6IFwiIzhiMDAwMFwiLFxyXG4gICAgICBtZXRob2Q6IFwiIzhiNDUwMFwiLFxyXG4gICAgICBwcm9qZWN0OiBcIiM2NjY2MDBcIixcclxuICAgICAgcmVnaW9uOiBcIiMwMDY0MDBcIixcclxuICAgICAgdHlwZTogXCIjMDA2NjYxXCIsXHJcbiAgICAgIHBlcnNvbjogXCIjMDAwMjY2XCIsXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGN0VGFnU3R5bGVJZCA9IFwiY3QtdGFnLWNvbG9yc1wiO1xyXG4gICAgY29uc3QgY3RBcHBseVRhZ1N0eWxlcyA9IChkb2M6IERvY3VtZW50ID0gZG9jdW1lbnQpID0+IHtcclxuICAgICAgY29uc3QgcnVsZXM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgIGZvciAoY29uc3QgcCBvZiBPYmplY3Qua2V5cyhjdFRhZ0NvbG91cnNEYXJrKSkge1xyXG4gICAgICAgIGNvbnN0IGRhcmsgPSBjdFRhZ0NvbG91cnNEYXJrW3BdO1xyXG4gICAgICAgIGNvbnN0IGxpZ2h0ID0gY3RUYWdDb2xvdXJzTGlnaHRbcF07XHJcbiAgICAgICAgcnVsZXMucHVzaChcclxuICAgICAgICAgIGAudGFnW2hyZWZePVwiIyR7cH1cIl17Y29sb3I6JHtkYXJrfTt9YCxcclxuICAgICAgICAgIGAubXVsdGktc2VsZWN0LXBpbGxbZGF0YS12YWx1ZV49XCIjJHtwfVwiXSwgLm11bHRpLXNlbGVjdC1waWxsW2RhdGEtdmFsdWVePVwiJHtwfVwiXXtiYWNrZ3JvdW5kOiR7ZGFya307Ym9yZGVyLWNvbG9yOiR7ZGFya307Y29sb3I6YmxhY2s7fWAsXHJcbiAgICAgICAgICBgLm11bHRpLXNlbGVjdC1waWxsW2RhdGEtdmFsdWVePVwiIyR7cH1cIl0gc3ZnLnN2Zy1pY29uLmx1Y2lkZS14LCAubXVsdGktc2VsZWN0LXBpbGxbZGF0YS12YWx1ZV49XCIke3B9XCJdIHN2Zy5zdmctaWNvbi5sdWNpZGUteCB7IGNvbG9yOmJsYWNrOyB9YCxcclxuICAgICAgICAgIGAubWFya2Rvd24tc291cmNlLXZpZXcubW9kLWNtNiBzcGFuLmNtLWhhc2h0YWdbZGF0YS10YWdePVwiIyR7cH1cIl17Y29sb3I6JHtkYXJrfTt9YCxcclxuICAgICAgICAgIGAudGhlbWUtbGlnaHQgLnRhZ1tocmVmXj1cIiMke3B9XCJde2NvbG9yOiR7bGlnaHR9O31gLFxyXG4gICAgICAgICAgYC50aGVtZS1saWdodCAubXVsdGktc2VsZWN0LXBpbGxbZGF0YS12YWx1ZV49XCIjJHtwfVwiXSwgLnRoZW1lLWxpZ2h0IC5tdWx0aS1zZWxlY3QtcGlsbFtkYXRhLXZhbHVlXj1cIiR7cH1cIl17YmFja2dyb3VuZDoke2xpZ2h0fTtib3JkZXItY29sb3I6JHtsaWdodH07Y29sb3I6d2hpdGU7fWAsXHJcbiAgICAgICAgICBgLnRoZW1lLWxpZ2h0IC5tdWx0aS1zZWxlY3QtcGlsbFtkYXRhLXZhbHVlXj1cIiMke3B9XCJdIHN2Zy5zdmctaWNvbi5sdWNpZGUteCwgLnRoZW1lLWxpZ2h0IC5tdWx0aS1zZWxlY3QtcGlsbFtkYXRhLXZhbHVlXj1cIiR7cH1cIl0gc3ZnLnN2Zy1pY29uLmx1Y2lkZS14IHsgY29sb3I6d2hpdGU7IH1gLFxyXG4gICAgICAgICAgYC50aGVtZS1saWdodCAubWFya2Rvd24tc291cmNlLXZpZXcubW9kLWNtNiBzcGFuLmNtLWhhc2h0YWdbZGF0YS10YWdePVwiIyR7cH1cIl17Y29sb3I6JHtsaWdodH07fWBcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBzdCA9IGRvYy5nZXRFbGVtZW50QnlJZChjdFRhZ1N0eWxlSWQpIGFzIEhUTUxTdHlsZUVsZW1lbnQgfCBudWxsO1xyXG4gICAgICBpZiAoIXN0KSB7XHJcbiAgICAgICAgc3QgPSBkb2MuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gICAgICAgIHN0LmlkID0gY3RUYWdTdHlsZUlkO1xyXG4gICAgICAgIGRvYy5oZWFkLmFwcGVuZENoaWxkKHN0KTtcclxuICAgICAgfVxyXG4gICAgICBzdC50ZXh0Q29udGVudCA9IHJ1bGVzLmpvaW4oXCJcXG5cIik7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGN0QXBwbHlUYWdQaWxsVmFsdWVzID0gKCkgPT4ge1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50PihcIi5tdWx0aS1zZWxlY3QtcGlsbFwiKS5mb3JFYWNoKChwKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcyA9IHAucXVlcnlTZWxlY3RvcjxIVE1MU3BhbkVsZW1lbnQ+KFwiLm11bHRpLXNlbGVjdC1waWxsLWNvbnRlbnQgc3BhblwiKTtcclxuICAgICAgICBpZiAoIXMpIHJldHVybjtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHMudGV4dENvbnRlbnQgfHwgXCJcIjtcclxuICAgICAgICBwLnNldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIiwgdmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgY3RBcHBseVRhZ1N0eWxlcygpO1xyXG4gICAgY3RBcHBseVRhZ1BpbGxWYWx1ZXMoKTtcclxuICAgIGNvbnN0IGN0UGlsbE9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xyXG4gICAgICBjdEFwcGx5VGFnUGlsbFZhbHVlcygpO1xyXG4gICAgICBjdEFwcGx5VGFnU3R5bGVzKCk7XHJcbiAgICB9KTtcclxuICAgIGN0UGlsbE9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyKCgpID0+IGN0UGlsbE9ic2VydmVyLmRpc2Nvbm5lY3QoKSk7XHJcbiAgICBjbG9uZVJvb3RTdHlsZVRvTGVhdmVzKHRoaXMuYXBwKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIC8qICg3KSBEYXRhdmlldyBcdUNGNTRcdUI0RENcdUQzOUNcdUMyQTQgXHVCODBDXHVCMzU0XHVCN0VDICovXHJcbiAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Qb3N0UHJvY2Vzc29yKFxyXG4gICAgICBhc3luYyAoZWw6IEhUTUxFbGVtZW50LCBjdHg6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQpID0+IHtcclxuICAgICAgICBjb25zdCBjb2RlcyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTFByZUVsZW1lbnQ+KFxyXG4gICAgICAgICAgXCJwcmUgPiBjb2RlLmxhbmd1YWdlLWN0LCBwcmUgPiBjb2RlLmxhbmd1YWdlLWNvdmVyLXRhYmxlXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChjb2Rlcy5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgZHYgPVxyXG4gICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmRhdGF2aWV3QXBpIHx8XHJcbiAgICAgICAgICAod2luZG93IGFzIGFueSkuRGF0YXZpZXdBUEkgfHxcclxuICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5kdkFQSTtcclxuICAgICAgICBpZiAoIWR2KSB7XHJcbiAgICAgICAgICBMb2cudyhcIltDb3Zlci1UYWJsZV0gRGF0YXZpZXcgQVBJIG5vdCBmb3VuZFwiKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgY3Qud2FpdEZvckVuZ2luZSgpO1xyXG5cclxuICAgICAgICAvKiBcdUFDMDEgXHVDRjU0XHVCNERDXHVEMzlDXHVDMkE0IFx1Q0M5OFx1QjlBQyAqL1xyXG4gICAgICAgIGZvciAoY29uc3QgY29kZSBvZiBBcnJheS5mcm9tKGNvZGVzKSkge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3Qgb3B0czogYW55ID0gSlNPTi5wYXJzZShjb2RlLnRleHRDb250ZW50IHx8IFwie31cIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGNvZGUucGFyZW50RWxlbWVudCBhcyBIVE1MRWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgIC8qIC0tLSBHYW50dCAtLS0gKi9cclxuICAgICAgICAgICAgaWYgKG9wdHMudHlwZSA9PT0gXCJnYW50dFwiKSB7XHJcbiAgICAgICAgICAgICAgb3B0cy5yZW5kZXJJbnRlcmFjdGl2ZUJlbG93ID8/PSB0cnVlO1xyXG4gICAgICAgICAgICAgIGF3YWl0IGN0LmdhbnR0Q29udHJvbGxlci5yZW5kZXJWaWV3KGR2LCBvcHRzLCBjdHgsIGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qIC0tLSBJbnRlcmFjdGl2ZVRhYmxlIC0tLSAqL1xyXG4gICAgICAgICAgICBpZiAoY3R4KVxyXG4gICAgICAgICAgICAgIGF3YWl0IGN0LmVuZ2luZS5yZW5kZXJBdXRvVmlldyhkdiwgb3B0cywgY3R4LCBjb250YWluZXIpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBMb2cuZShcIltDb3Zlci1UYWJsZV0gcmVuZGVyIGVycm9yOlwiLCBlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgTG9nLmQoXCJbQ292ZXItVGFibGVdIFx1MjVCNiBvbmxvYWQgZG9uZVwiKTtcclxuXHJcblxyXG4vKiA9PT0gQ292ZXItVGFibGU6IHN1cHByZXNzIGJlbmlnbiB2YXVsdC1kZWxldGUgY29uc29sZSBub2lzZSA9PT09PT09PT09ICovXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidW5oYW5kbGVkcmVqZWN0aW9uXCIsIChldikgPT4ge1xyXG4gIC8qIFx1RDU0NFx1RDEzMFx1QjlDMVx1RDU1OFx1QUNFMCBcdUMyRjZcdUM3NDAgXHVCQTU0XHVDMkRDXHVDOUMwXHVCOTdDIFx1QzVFQ1x1QUUzMFx1QzVEMCBcdUNEOTRcdUFDMDAgKi9cclxuICBjb25zdCBtc2cgPSBTdHJpbmcoZXYucmVhc29uPy5tZXNzYWdlIHx8IGV2LnJlYXNvbiB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAvKiAxKSBcdUIxNzhcdUQyQjggXHVDMEFEXHVDODFDXHUwMEI3XHVENzM0XHVDOUMwXHVEMUI1IFx1Qzc3NFx1QjNEOSBcdUM5MTEgXHVCQzFDXHVDMEREXHVENTU4XHVCMjk0IGNoaWxkcmVuIFR5cGVFcnJvciAqL1xyXG4gIGlmIChtc2cuaW5jbHVkZXMoXCJjYW5ub3QgcmVhZCBwcm9wZXJ0aWVzIG9mIG51bGxcIikgJiZcclxuICAgICAgbXNnLmluY2x1ZGVzKFwiY2hpbGRyZW5cIikpIHtcclxuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7ICAgICAgICAgICAgICAgLy8gXHVDRjU4XHVDMTk0IFx1QzYyNFx1Qjk1OCBcdUMyMjhcdUFFNDBcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyogMikgXHVDNzdDXHVCRDgwIFx1RDY1OFx1QUNCRFx1QzVEMFx1QzExQyBcdUIxNzhcdUQyQjggXHVDNzc0XHVCM0Q5XHUwMEI3XHVDMEFEXHVDODFDIFx1QzJEQyBcdUI3MjhcdUIyOTQgaWxsZWdhbCBhY2Nlc3MgKi9cclxuICBpZiAobXNnLmluY2x1ZGVzKFwiaWxsZWdhbCBhY2Nlc3NcIikpIHtcclxuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7ICAgICAgICAgICAgICAgLy8gXHVDRjU4XHVDMTk0IFx1QzYyNFx1Qjk1OCBcdUMyMjhcdUFFNDBcclxuICB9XHJcbn0pO1xyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qIG9ubG9hZCgpIFx1QjlDOFx1QzlDMFx1QjlDOVx1QzVEMCAqL1xyXG4gIHRoaXMucmVnaXN0ZXJFdmVudChcclxuICAgIHRoaXMuYXBwLndvcmtzcGFjZS5vbihcImxheW91dC1jaGFuZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBjbG9uZVJvb3RTdHlsZVRvTGVhdmVzKHRoaXMuYXBwKTtcclxuICAgIH0pXHJcbiAgKTtcclxuICB0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcbiAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oXCJjc3MtY2hhbmdlXCIsICgpID0+IHtcclxuICAgICAgY2xvbmVSb290U3R5bGVUb0xlYXZlcyh0aGlzLmFwcCk7XHJcbiAgICAgIGN0QXBwbHlUYWdTdHlsZXMoKTtcclxuICAgIH0pXHJcbiAgKTtcclxuICB0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcbiAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oXCJ3aW5kb3ctb3BlblwiLCAoX2xlYWYsIHdpbikgPT4ge1xyXG4gICAgICBjbG9uZVJvb3RTdHlsZVRvTGVhdmVzKHRoaXMuYXBwKTtcclxuICAgICAgY3RBcHBseVRhZ1N0eWxlcyh3aW4uZG9jdW1lbnQpO1xyXG4gICAgfSlcclxuICApO1xyXG5cclxuXHJcbiAgfVxyXG5cclxuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAqICBvbnVubG9hZCgpXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKiAgXHUwMEI3IFx1QjlBQ1x1QzJBNFx1QjEwOCAvIFx1QzJGMVx1QUUwMFx1RDEzNCBcdUQ1NzRcdUM4MUNcclxuICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG4gIG9udW5sb2FkKCkge1xyXG4gICAgTG9nLmQoXCJbQ292ZXItVGFibGVdIFx1MjVCNiBvbnVubG9hZFwiKTtcclxuXHJcblxyXG4gICAgRXZlbnRCdXMuaS5vZmYoY3QuZ2FudHRDb250cm9sbGVyLnJlZnJlc2hCeUJ1cy5iaW5kKGN0LmdhbnR0Q29udHJvbGxlcikpO1xyXG4gIH1cclxuXHJcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgKiAgU2V0dGluZ3MgaGVscGVyc1xyXG4gICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbiAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG4gICAgY29uc3QgcmF3ID0gYXdhaXQgdGhpcy5sb2FkRGF0YSgpO1xyXG4gICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIHJhdyk7XHJcbiAgICAvKiBcdTIxQjMgRW1iZWQgXHVBRTMwXHVCQ0Y4XHVBQzEyIFx1QkNEMVx1RDU2OSAqL1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG4gICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuICAgIExvZy5zZXREZWJ1Zyh0aGlzLnNldHRpbmdzLmRlYnVnTG9nKTtcclxuICAgIHRoaXMuYXBwbHlaZXJvRm9sZGVyVmlzaWJpbGl0eSgpO1xyXG5cclxuICAgIHRoaXMuYXBwbHlEZXNpZ25TZXR0aW5ncygpO1xyXG5cclxuICAgIGNsb25lUm9vdFN0eWxlVG9MZWF2ZXModGhpcy5hcHApO1xyXG4gIH1cclxuXHJcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgKiAgVGhlbWUgLyBEZXNpZ24gXHVDODAxXHVDNkE5XHJcbiAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAqICBUaGVtZSAvIERlc2lnbiBcdUM4MDFcdUM2QTlcclxuICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG4gIGFwcGx5RGVzaWduU2V0dGluZ3MoKSB7XHJcbiAgICBjb25zdCBtb2RlID0gdGhpcy5hcHAuZ2V0VGhlbWUoKSA9PT0gXCJvYnNpZGlhbi1kYXJrXCIgPyBcImRhcmtcIiA6IFwibGlnaHRcIjtcclxuICAgIGNvbnN0IHJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cclxuICAgIC8qICg0KSBCYXNlLVRoZW1lIFx1QkNDMFx1QzIxOCBcdUM2MjRcdUJDODRcdUI3N0NcdUM3NzRcdUI0REMgKi9cclxuICAgIGNvbnN0IGlkVmFycyA9IFwiY3QtYmFzZS12YXJzXCI7XHJcbiAgICBsZXQgc3RWYXJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRWYXJzKSBhcyBIVE1MU3R5bGVFbGVtZW50IHwgbnVsbDtcclxuICAgIGlmICghc3RWYXJzKSB7XHJcbiAgICAgIHN0VmFycyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuICAgICAgc3RWYXJzLmlkID0gaWRWYXJzO1xyXG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0VmFycyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB2YXJzID0gdGhpcy5zZXR0aW5ncy5iYXNlVmFycztcclxuICAgIGNvbnN0IHJvb3RCbG9jazogc3RyaW5nW10gPSBbXTtcclxuICAgIGNvbnN0IGRhcmtCbG9jazogc3RyaW5nW10gPSBbXTtcclxuICAgIE9iamVjdC5lbnRyaWVzKHZhcnMpLmZvckVhY2goKFtrLCB2XSkgPT4ge1xyXG4gICAgICAoay5lbmRzV2l0aChcIi1kYXJrXCIpID8gZGFya0Jsb2NrIDogcm9vdEJsb2NrKS5wdXNoKGAke2t9OiR7dn07YCk7XHJcbiAgICB9KTtcclxuICAgIHN0VmFycy50ZXh0Q29udGVudCA9IGBcclxuICAgICAgOnJvb3R7JHtyb290QmxvY2suam9pbihcIlwiKX19XHJcbiAgICAgIC50aGVtZS1kYXJreyR7ZGFya0Jsb2NrLmpvaW4oXCJcIil9fVxyXG4gICAgYDtcclxuXHJcbiAgICAvKiAoNSkgQ3VzdG9tIENTUyAqL1xyXG4gICAgY29uc3QgaWRDdXN0b20gPSBcImN0LWN1c3RvbS1jc3NcIjtcclxuICAgIGxldCBzdEN1c3RvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkQ3VzdG9tKSBhcyBIVE1MU3R5bGVFbGVtZW50IHwgbnVsbDtcclxuICAgIGlmICghc3RDdXN0b20pIHtcclxuICAgICAgc3RDdXN0b20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XHJcbiAgICAgIHN0Q3VzdG9tLmlkID0gaWRDdXN0b207XHJcbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3RDdXN0b20pO1xyXG4gICAgfVxyXG4gICAgc3RDdXN0b20udGV4dENvbnRlbnQgPSB0aGlzLnNldHRpbmdzLmN1c3RvbUNzcyB8fCBcIlwiO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqICBMaXN0LUNhbGxvdXQgaGVscGVyc1xyXG4gKiAgXHUwMEI3IFNldHRpbmdUYWIgXHUyMTkyIGNvbW1pdCgpIFx1QzVEMFx1QzExQyBcdUQ2MzhcdUNEOUNcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxucHVibGljIHJlYnVpbGRMaXN0Q2FsbG91dHMoKTogdm9pZCB7XHJcbiAgLyogbGlzdENhbGxvdXRzIFx1QUMwMCBcdUNEMDhcdUFFMzBcdUQ2NTRcdUI0MUMgXHVCNEE0XHVDNUQwXHVCOUNDIFx1QjNEOVx1Qzc5MSAqL1xyXG4gIGlmICh0aGlzLmxpc3RDYWxsb3V0cykge1xyXG4gICAgdGhpcy5saXN0Q2FsbG91dHMucmVidWlsZCgpO1xyXG4gIH1cclxufVxyXG5cclxucHVibGljIHJlbG9hZEVtYmVkKCk6IHZvaWQge1xyXG59XHJcbn1cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiAgICAgICAgICAgICAgICAgICAgICBcdTI2RDQgIEVORCBPRiBGSUxFICBcdTI2RDRcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbiIsICIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogc3JjL3RoZW1lL3Rva2Vucy50c1x1MjAwMlx1MjAxM1x1MjAwMkNvdmVyLVRhYmxlIHYzICAoZmluYWwsIDIwMjUtMDUtMTkpXHJcbiAqIFx1MDBCNyBcdUQxQTBcdUQwNzAgPSBDU1MgXHVCQ0MwXHVDMjE4XHVCOTdDIDE6MSBcdUI4NUMgXHVCOUU0XHVENTUxXHVENTU4XHVCMjk0IFx1QjJFOFx1Qzc3QyBcdUM4MTVcdUM3NThcdUMxOENcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgMS4gTGVhZi1wYWxldHRlIFx1RDBDMFx1Qzc4NSBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VQYWxldHRlICAgeyB3aGl0ZTpzdHJpbmc7IGJsYWNrOnN0cmluZzsgfVxyXG5leHBvcnQgaW50ZXJmYWNlIEhlYWRpbmdQYWxldHRleyBoMTpzdHJpbmc7IGgyOnN0cmluZzsgaDM6c3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoNDpzdHJpbmc7IGg1OnN0cmluZzsgaDY6c3RyaW5nOyB9XHJcbmV4cG9ydCBpbnRlcmZhY2UgTGlzdFBhbGV0dGUgICB7IGJ1bGxldDpzdHJpbmc7IG9sTWFya2VyOnN0cmluZzsgfVxyXG5leHBvcnQgaW50ZXJmYWNlIEJvbGRQYWxldHRlIHsgYm9sZDogc3RyaW5nIH1cclxuZXhwb3J0IGludGVyZmFjZSBJdGFsaWNQYWxldHRlIHsgaXRhbGljOiBzdHJpbmcgfVxyXG5cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlUGFsZXR0ZSAgeyBib3JkZXI6c3RyaW5nOyBzaGFkb3c6c3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dFdmVuOnN0cmluZzsgcm93SG92ZXI6c3RyaW5nOyB9XHJcbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VQYWxldHRlICB7IGJvcmRlcjpzdHJpbmc7IHNoYWRvdzpzdHJpbmc7IH1cclxuXHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCAyLiBcdUJBQThcdUI0RENcdUJDQzQgXHVDODA0XHVDQ0I0IFx1RDMxNFx1QjgwOFx1RDJCOCBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVQYWxldHRle1xyXG4gIGJhc2UgICA6QmFzZVBhbGV0dGU7XHJcbiAgaGVhZGluZzpIZWFkaW5nUGFsZXR0ZTtcclxuICBsaXN0ICAgOkxpc3RQYWxldHRlO1xyXG4gIGJvbGQgICA6IEJvbGRQYWxldHRlOyAgICAgICAvLyBcdTI2MDUgTkVXXHJcbiAgaXRhbGljICA6IEl0YWxpY1BhbGV0dGU7XHJcbiAgdGFibGUgIDpUYWJsZVBhbGV0dGU7XHJcbiAgaW1hZ2UgIDpJbWFnZVBhbGV0dGU7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBBcHBEZXNpZ25Ub2tlbnN7IGRhcms6TW9kZVBhbGV0dGU7IGxpZ2h0Ok1vZGVQYWxldHRlOyB9XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCAzLiBcdUFFMzBcdUJDRjggXHVEMzE0XHVCODA4XHVEMkI4IFx1QUMxMiBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5jb25zdCBtYWtlRGVmYXVsdCA9ICgpOk1vZGVQYWxldHRlID0+ICh7XHJcbiAgYmFzZSAgIDp7IHdoaXRlOlwiI2ZmZmZmZlwiLCBibGFjazpcIiMwMDAwMDBcIiB9LFxyXG4gIGhlYWRpbmc6eyBoMTpcIiNmZjU1NTVcIiwgaDI6XCIjZmZhZTQyXCIsIGgzOlwiI2Y3ZmY1MFwiLFxyXG4gICAgICAgICAgICBoNDpcIiM0Y2Q5NjRcIiwgaDU6XCIjNWFjOGZhXCIsIGg2OlwiI2FmNTJkZVwiIH0sXHJcbiAgbGlzdCAgIDp7IGJ1bGxldDpcInJnYig1NCw1NCwxOTApXCIsIG9sTWFya2VyOlwicmVkXCIgfSxcclxuICBib2xkIDogeyBib2xkIDpcInJnYigxMzgsMCwxMTkpXCIgfSxcclxuICBpdGFsaWMgOiB7IGl0YWxpYyA6IFwicmdiKDI1NSwxMzAsMTc4KVwifSxcclxuICB0YWJsZSAgOnsgYm9yZGVyOlwiI2MwYzBjMFwiLCBzaGFkb3c6XCJyZ2JhKDAsMCwwLC4xMClcIixcclxuICAgICAgICAgICAgcm93RXZlbjpcInJnYmEoMCwwLDAsLjAzKVwiLCByb3dIb3ZlcjpcInJnYmEoMCwwLDAsLjA3KVwiIH0sXHJcbiAgaW1hZ2UgIDp7IGJvcmRlcjpcIiNkMGQwZDBcIiwgc2hhZG93OlwicmdiYSgwLDAsMCwuMTApXCIgfSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9UT0tFTlM6QXBwRGVzaWduVG9rZW5zID0ge1xyXG4gIGxpZ2h0OiBtYWtlRGVmYXVsdCgpLFxyXG4gIGRhcmsgOiAoKCk9PnsgICAgICAgICAgICAgICAgLy8gXHUyOTM3IFx1Qjc3Q1x1Qzc3NFx1RDJCOFx1QUMxMiBcdUJDRjVcdUMwQUMgXHVENkM0IFx1QkE4NyBcdUFDMDBcdUM5QzBcdUI5Q0MgXHVBRDUwXHVDQ0I0XHJcbiAgICBjb25zdCBkID0gbWFrZURlZmF1bHQoKTtcclxuICAgIGQubGlzdCAgID17IGJ1bGxldDpcInJnYig4OSw4OSwyMjMpXCIsIG9sTWFya2VyOlwicmVkXCIgfTtcclxuICAgIGQuYm9sZCAgPSB7IGJvbGQ6XCJyZ2IoMjU1LDE4OCwxODgpXCIgfTsgICAgICAgICAgICAvLyBcdTI2MDVcclxuICAgIGQuaXRhbGljICA9IHsgaXRhbGljOlwicmdiKDI1NSwgMjM0LCAyMzQpXCIgfTsgICAgICAgICAgICAvLyBcdTI2MDVcclxuICAgIGQudGFibGUgID17IGJvcmRlcjpcIiM0NDQ0NDRcIiwgc2hhZG93OlwicmdiYSgwLDAsMCwuNTUpXCIsXHJcbiAgICAgICAgICAgICAgICByb3dFdmVuOlwidHJhbnNwYXJlbnRcIiwgcm93SG92ZXI6XCJyZ2JhKDI1NSwyNTUsMjU1LC4wNylcIiB9O1xyXG4gICAgZC5pbWFnZSAgPXsgYm9yZGVyOlwiIzU1NTU1NVwiLCBzaGFkb3c6XCJyZ2JhKDAsMCwwLC42MClcIiB9O1xyXG4gICAgcmV0dXJuIGQ7XHJcbiAgfSkoKSxcclxufTtcclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIDQuIENTUyBcdUJDQzBcdUMyMTggXHVDNzc0XHVCOTg0IFx1QjlGNSBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgY29uc3QgVkFSID0ge1xyXG4gIC8qIGJhc2UgKi8gICAgICAgICBiYXNlV2hpdGU6XCItLWN0LWJhc2Utd2hpdGVcIiwgICBiYXNlQmxhY2s6XCItLWN0LWJhc2UtYmxhY2tcIixcclxuICAvKiBoZWFkaW5nICovICAgICAgaDE6XCItLWN0LWgxLWRhcmtcIiwgIGgyOlwiLS1jdC1oMi1kYXJrXCIsICBoMzpcIi0tY3QtaDMtZGFya1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICBoNDpcIi0tY3QtaDQtZGFya1wiLCAgaDU6XCItLWN0LWg1LWRhcmtcIiwgIGg2OlwiLS1jdC1oNi1kYXJrXCIsXHJcbiAgLyogbGlzdCAqLyAgICAgICAgIGJ1bGxldDpcIi0tYnVsbGV0LW5ldy1jb2xvclwiLCAgIG9sTWFya2VyOlwiLS1jdC1vbC1tYXJrZXItZGFya1wiLFxyXG4gIC8qIGJvbGQgKi8gICAgICAgICBib2xkOiBcIi0tY3QtYm9sZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICBpdGFsaWM6IFwiLS1jdC1pdGFsaWNcIixcclxuICAvKiB0YWJsZSAqLyAgICAgICAgdEJvcmRlcjpcIi0tY3QtdGFibGUtYm9yZGVyXCIsIHRTaGFkb3c6XCItLWN0LXRhYmxlLXNoYWRvd1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICB0RXZlbjpcIi0tY3QtdGFibGUtcm93LWV2ZW5cIiwgdEhvdmVyOlwiLS1jdC10YWJsZS1yb3ctaG92ZXJcIixcclxuICAvKiBpbWFnZSAqLyAgICAgICAgaUJvcmRlcjpcIi0tY3QtaW1hZ2UtYm9yZGVyXCIsICBpU2hhZG93OlwiLS1jdC1pbWFnZS1zaGFkb3dcIixcclxufSBhcyBjb25zdDtcclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIDUuIFx1RDFBMFx1RDA3MCBcdTIxOTIgOnJvb3QgXHVDOEZDXHVDNzg1IFx1RDVFQ1x1RDM3QyBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0VG9rZW5zKFxyXG4gIG1vZGU6XCJkYXJrXCJ8XCJsaWdodFwiLFxyXG4gIHBhbGV0dGU6QXBwRGVzaWduVG9rZW5zLFxyXG4gIHJvb3Q6SFRNTEVsZW1lbnR8RG9jdW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXHJcbil7XHJcbiAgY29uc3QgUCA9IHBhbGV0dGVbbW9kZV07ICAgICAgICAgICAgICAgICAgLy8gXHVEMEMwXHVBRTQzIFx1RDMxNFx1QjgwOFx1RDJCOFxyXG4gIGNvbnN0IGVsID0gcm9vdCBpbnN0YW5jZW9mIERvY3VtZW50ID8gcm9vdC5kb2N1bWVudEVsZW1lbnQgOiByb290O1xyXG4gIGNvbnN0IHN1ZiA9IG1vZGUgPT09IFwiZGFya1wiID8gXCJkYXJrXCIgOiBcImxpZ2h0XCI7ICAgLy8gXHUyNjA1IE5FV1xyXG5cclxuICAvKiAtLWJhc2UtLSAqL1xyXG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KFZBUi5iYXNlV2hpdGUsIFAuYmFzZS53aGl0ZSk7XHJcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkoVkFSLmJhc2VCbGFjaywgUC5iYXNlLmJsYWNrKTtcclxuXHJcbiAgLyogLS1oZWFkaW5nLS0gKi9cclxuICAoW1wiaDFcIixcImgyXCIsXCJoM1wiLFwiaDRcIixcImg1XCIsXCJoNlwiXSBhcyBjb25zdCkuZm9yRWFjaChoID0+XHJcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShgLS1jdC0ke2h9LSR7c3VmfWAsIFAuaGVhZGluZ1toXSkgICAvLyBcdTI2MDVcclxuICApO1xyXG5cclxuICAvKiAtLWxpc3QtLSAqL1xyXG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KGAtLWN0LWJ1bGxldC0ke3N1Zn1gLCAgIFAubGlzdC5idWxsZXQpOyAgIC8vIFx1MjYwNVxyXG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KGAtLWN0LW9sLW1hcmtlci0ke3N1Zn1gLCBQLmxpc3Qub2xNYXJrZXIpOy8qIFx1MjYwNSAqL1xyXG5cclxuICAvKiAtLS0tLS0tLS0tIGJvbGQgLS0tLS0tLS0tLSAqL1xyXG5lbC5zdHlsZS5zZXRQcm9wZXJ0eShgLS1jdC1ib2xkLSR7c3VmfWAsIFAuYm9sZC5ib2xkKTsgICAvLyBcdTI2MDUgTkVXXHJcblxyXG5lbC5zdHlsZS5zZXRQcm9wZXJ0eShgLS1jdC1pdGFsaWMtJHtzdWZ9YCwgUC5pdGFsaWMuaXRhbGljKTsgICAvLyBcdTI2MDUgTkVXXHJcblxyXG4gIC8qIC0tdGFibGUtLSAqL1xyXG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KFZBUi50Qm9yZGVyLCBQLnRhYmxlLmJvcmRlciApO1xyXG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KFZBUi50U2hhZG93LCBQLnRhYmxlLnNoYWRvdyApO1xyXG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KFZBUi50RXZlbiAsICBQLnRhYmxlLnJvd0V2ZW4pO1xyXG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KFZBUi50SG92ZXIsICBQLnRhYmxlLnJvd0hvdmVyKTtcclxuXHJcbiAgLyogLS1pbWFnZS0tICovXHJcbmVsLnN0eWxlLnNldFByb3BlcnR5KGAtLWN0LWltYWdlLWJvcmRlcmAsIFAuaW1hZ2UuYm9yZGVyKTtcclxuZWwuc3R5bGUuc2V0UHJvcGVydHkoYC0tY3QtaW1hZ2Utc2hhZG93YCwgUC5pbWFnZS5zaGFkb3cpO1xyXG59XHJcbiIsICIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogc3JjL3NldHRpbmcudHMgXHUyMDEzIENvdmVyLVRhYmxlIHYzIChlcnJvci1mcmVlLCBkdWFsLXBpY2tlciBVSSlcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQge1xyXG4gIERFRkFVTFRfVE9LRU5TLFxyXG4gIGluamVjdFRva2VucyxcclxuICB0eXBlIEFwcERlc2lnblRva2VucyxcclxufSBmcm9tIFwiLi90aGVtZS90b2tlbnNcIjtcclxuXHJcbmltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgdHlwZSBDb3ZlclRhYmxlUGx1Z2luIGZyb20gXCIuL2NvcmUvUGx1Z2luXCI7ICAgLy8gXHVENTBDXHVCN0VDXHVBREY4XHVDNzc4IFx1RDA3NFx1Qjc5OFx1QzJBNFxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tIFwiLi9mZWF0dXJlcy9pbnRlcmFjdGl2ZS10YWJsZS91dGlscy9sb2dcIjtcclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIDEuIExpc3QtY2FsbG91dCBcdUM4MTVcdUM3NTggXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuZXhwb3J0IGludGVyZmFjZSBMaXN0Q2FsbG91dCB7XHJcbiAgY2hhciAgICA6IHN0cmluZztcclxuICBiZ0xpZ2h0IDogc3RyaW5nOyBmZ0xpZ2h0IDogc3RyaW5nO1xyXG4gIGJnRGFyayAgOiBzdHJpbmc7IGZnRGFyayAgOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIDIuIFx1QzEyNFx1QzgxNSBcdUMyQTRcdUQwQTRcdUI5QzggLyBcdUFFMzBcdUJDRjhcdUFDMTIgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuZXhwb3J0IGludGVyZmFjZSBDb3ZlclRhYmxlU2V0dGluZ3Mge1xyXG4gIGhpZGVaZXJvRm9sZGVycyAgICAgIDogYm9vbGVhbjtcclxuICBsaXN0Q2FsbG91dHMgICAgICAgICA6IExpc3RDYWxsb3V0W107XHJcblxyXG4gIGJhc2VWYXJzICA6IFJlY29yZDxzdHJpbmcsc3RyaW5nPjtcclxuICB0b2tlbnMgICAgOiBBcHBEZXNpZ25Ub2tlbnM7XHJcbiAgY3VzdG9tQ3NzIDogc3RyaW5nO1xyXG4gIGRlYnVnTG9nOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogQ292ZXJUYWJsZVNldHRpbmdzID0ge1xyXG4gIGhpZGVaZXJvRm9sZGVycyAgICAgIDogdHJ1ZSxcclxuICBsaXN0Q2FsbG91dHMgICAgICAgICA6IFtdLFxyXG5cclxuXHJcbiAgdG9rZW5zICAgOiBzdHJ1Y3R1cmVkQ2xvbmUoREVGQVVMVF9UT0tFTlMpLFxyXG4gIGJhc2VWYXJzIDoge30sXHJcbiAgY3VzdG9tQ3NzOiBcIlwiLFxyXG4gIGRlYnVnTG9nOiBmYWxzZSxcclxufTtcclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIDMuIFx1Qjc3Q1x1QkNBOCBcdUMwQUNcdUM4MDQgKFVJIFx1RDE0RFx1QzJBNFx1RDJCOCkgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuY29uc3QgTEFCRUwgPSB7XHJcbiAgLyogQmFzZSAqL1xyXG4gIGJhc2VXaGl0ZSA6IFwiQmFzZSBcdTIwMjcgXHVCQzMwXHVBQ0JEKFx1RDc3MFx1QzBDOSlcIixcclxuICBiYXNlQmxhY2sgOiBcIkJhc2UgXHUyMDI3IFx1QUUwMFx1Qzc5MChcdUFDODBcdUM4MTUpXCIsXHJcbiAgLyogSGVhZGluZyAqL1xyXG4gIGgxOlwiSDEgKFJlZClcIiwgaDI6XCJIMiAoT3JhbmdlKVwiLCBoMzpcIkgzIChZZWxsb3cpXCIsXHJcbiAgaDQ6XCJINCAoR3JlZW4pXCIsIGg1OlwiSDUgKEJsdWUpXCIsIGg2OlwiSDYgKFZpb2xldClcIixcclxuICAvKiBMaXN0ICovXHJcbiAgYnVsbGV0OlwiTGlzdCBCdWxsZXRcIiwgb2xNYXJrZXI6XCJPcmRlcmVkLWxpc3QgTnVtYmVyXCIsXHJcbiAgLyogVGFibGUgLyBJbWFnZSAqL1xyXG4gIHRCb3JkZXI6XCJUYWJsZSBCb3JkZXJcIiwgdFNoYWRvdzpcIlRhYmxlIFNoYWRvd1wiLFxyXG4gIHRSb3dFdmVuOlwiVGFibGUgUm93IChldmVuKVwiLCB0Um93SG92ZXI6XCJUYWJsZSBSb3cgKGhvdmVyKVwiLFxyXG4gIGlCb3JkZXI6XCJJbWFnZSBCb3JkZXJcIiwgaVNoYWRvdzpcIkltYWdlIFNoYWRvd1wiLFxyXG59IGFzIGNvbnN0O1xyXG5jb25zdCBDQUxMT1VUX0xJTUlUID0gNTtcclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIDQuIFNldHRpbmdUYWIgXHVEMDc0XHVCNzk4XHVDMkE0IFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbnR5cGUgTW9kZUtleSA9IGtleW9mIEFwcERlc2lnblRva2VuczsgICAgLy8gXCJkYXJrXCIgfCBcImxpZ2h0XCJcclxuXHJcbmV4cG9ydCBjbGFzcyBDb3ZlclRhYmxlU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG4gIHByaXZhdGUgcGx1Z2luOiBDb3ZlclRhYmxlUGx1Z2luO1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBDb3ZlclRhYmxlUGx1Z2luKSB7XHJcbiAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICB9XHJcblxyXG5wcml2YXRlIGFzeW5jIGNvbW1pdCgpIHtcclxuICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHJcbiAgaW5qZWN0VG9rZW5zKFwiZGFya1wiLCAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudG9rZW5zKTtcclxuICBpbmplY3RUb2tlbnMoXCJsaWdodFwiLCB0aGlzLnBsdWdpbi5zZXR0aW5ncy50b2tlbnMpO1xyXG5cclxuICAvKiBcdTI3MDUgXHVENTBDXHVCN0VDXHVBREY4XHVDNzc4IFx1QUNGNVx1QUMxQyBcdUJBNTRcdUMxMUNcdUI0REMgXHVENjM4XHVDRDlDXHVCOUNDIFx1QjBBOFx1QUU0MCAqL1xyXG4gIHRoaXMucGx1Z2luLnJlYnVpbGRMaXN0Q2FsbG91dHMoKTtcclxufVxyXG5cclxuXHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIGZpbGxNaXNzaW5nKCkgXHUyMDEzIFx1QjIwNFx1Qjc3RFx1QUMxMiBcdUJDRjRcdUNEQTlcclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxucHJpdmF0ZSBmaWxsTWlzc2luZyh0b2tlbnM6IEFwcERlc2lnblRva2Vucykge1xyXG4gIChbXCJkYXJrXCIsXCJsaWdodFwiXSBhcyBjb25zdCkuZm9yRWFjaChtb2RlID0+IHtcclxuICAgIGNvbnN0IGRlZiA9IERFRkFVTFRfVE9LRU5TW21vZGVdO1xyXG4gICAgY29uc3QgdGd0ID0gdG9rZW5zW21vZGVdO1xyXG5cclxuICAgIHRndC5iYXNlICAgID0geyAuLi5kZWYuYmFzZSwgICAgLi4udGd0LmJhc2UgICAgfTtcclxuICAgIHRndC5oZWFkaW5nID0geyAuLi5kZWYuaGVhZGluZywgLi4udGd0LmhlYWRpbmcgfTtcclxuICAgIHRndC5saXN0ICAgID0geyAuLi5kZWYubGlzdCwgICAgLi4udGd0Lmxpc3QgICAgfTtcclxuICAgIHRndC5ib2xkICA9IHsgLi4uZGVmLmJvbGQsIC4uLnRndC5ib2xkIH07XHJcbiAgICB0Z3QuaXRhbGljICA9IHsgLi4uZGVmLml0YWxpYywgLi4udGd0Lml0YWxpYyB9O1xyXG4gICAgLyogXHUyNUIyIFx1MjQ2MCBcdUFFMzBcdUJDRjggXHVCRTE0XHVCODVEXHVDNzQwIFx1QzgwNFx1QkQ4MCBPSyBcdTIwMTQgXHVDNTQ0XHVCNzk4IG1lcmdlIFx1RDU2OFx1QzIxOFx1QjlDQyBcdUMyMThcdUM4MTUgKi9cclxuXHJcbiAgICAvKiogZChcdUFFMzBcdUJDRjgpXHVDNUQwXHVDMTFDIFx1Qzg3NFx1QzdBQ1x1RDU1OFx1QjI5NCBrZXkgXHVCOTdDIHQoXHVENjA0XHVDN0FDKVx1Qjg1QyBcdUNDNDRcdUM2Q0MgXHVCMTIzXHVCMjk0XHVCMkU0ICovXHJcbiAgICBjb25zdCBtZXJnZSA9IDxPIGV4dGVuZHMgeyBbSyBpbiBrZXlvZiBPXTogc3RyaW5nIH0+KGQ6IE8sIHQ6IE8pOiB2b2lkID0+IHtcclxuICAgICAgKE9iamVjdC5rZXlzKGQpIGFzIChrZXlvZiBPKVtdKS5mb3JFYWNoKGsgPT4ge1xyXG4gICAgICAgIHRba10gPz89IGRba107XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiBUYWJsZSAvIEltYWdlICovXHJcbiAgICB0Z3QudGFibGUgPSB7IC4uLmRlZi50YWJsZSwgLi4udGd0LnRhYmxlIH07XHJcbiAgICB0Z3QuaW1hZ2UgPSB7IC4uLmRlZi5pbWFnZSwgLi4udGd0LmltYWdlIH07XHJcbiAgfSk7XHJcbn1cclxuXHJcblxyXG4vKiogMSBcdUQ1ODlcdUM1RDAgXHUyNjAwKExpZ2h0KSArIFx1RDgzQ1x1REYxOShEYXJrKSBcdUI0NTAgXHVDRUVDXHVCN0VDXHVENTNDXHVDRUU0XHVCOTdDIFx1QURGOFx1QjlCMFx1QjJFNCBcdTIwMTMgXHVDNTQ4XHVDODA0IFx1QkM4NFx1QzgwNCAqL1xyXG5wcml2YXRlIGFkZER1YWxQaWNrZXIoXHJcbiAgaG9zdCAgICAgICAgOiBIVE1MRWxlbWVudCxcclxuICBsYWJlbCAgICAgICA6IHN0cmluZyxcclxuICBsaWdodEdldHRlciA6ICgpID0+IHN0cmluZyxcclxuICBkYXJrR2V0dGVyICA6ICgpID0+IHN0cmluZyxcclxuICBsaWdodFNldHRlciA6ICh2OiBzdHJpbmcpID0+IHZvaWQsXHJcbiAgZGFya1NldHRlciAgOiAodjogc3RyaW5nKSA9PiB2b2lkLFxyXG4pIHtcclxuICBjb25zdCByb3cgPSBuZXcgU2V0dGluZyhob3N0KS5zZXROYW1lKGxhYmVsKS5zZXREZXNjKFwiXHUyNjAwIExpZ2h0IFx1MjVCOCBsZWZ0ICAgXHUwMEI3ICAgXHVEODNDXHVERjE5IERhcmsgXHUyNUI4IHJpZ2h0XCIpO1xyXG5cclxuXHJcbiAgXHJcblxyXG4gIC8qIFx1QjBCNFx1QkQ4MCBcdUQ1RUNcdUQzN0M6IFx1Q0VFQ1x1QjdFQ1x1RDUzQ1x1Q0VFNCBcdUFDRjVcdUQxQjUgXHVDRDA4XHVBRTMwXHVENjU0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbiAgY29uc3QgaW5pdFBpY2tlciA9IChcclxuICAgIGNwICA6IGFueSwgICAgICAgICAgICAgICAgICAgIC8vIENvbG9yQ29tcG9uZW50IChcdUI3RjBcdUQwQzBcdUM3ODQgXHVBRDZDXHVDODcwIFx1Qzc3NFx1QzZBOSlcclxuICAgIGdldCA6ICgpID0+IHN0cmluZyxcclxuICAgIHNldCA6ICh2OiBzdHJpbmcpID0+IHZvaWQsXHJcbiAgICB0aXAgOiBzdHJpbmcsXHJcbiAgKSA9PiB7XHJcbiAgICBjcC5zZXRWYWx1ZShnZXQoKSlcclxuICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2OiBzdHJpbmcpID0+IHsgc2V0KHYpOyBhd2FpdCB0aGlzLmNvbW1pdCgpOyB9KTtcclxuXHJcbiAgICAvKiBcdTI0NjAgaW5wdXRFbCBcdUM3NzQgXHVDNzg4XHVDNzNDXHVCQTc0IFx1QkMxNFx1Qjg1QyAqL1xyXG4gICAgbGV0IGlucDogSFRNTElucHV0RWxlbWVudCB8IG51bGwgPVxyXG4gICAgICAoY3AgYXMgYW55KS5pbnB1dEVsID8/IG51bGw7XHJcblxyXG4gICAgLyogXHUyNDYxIFx1QzU0NFx1QzlDMSBcdUM1QzZcdUM3M0NcdUJBNzQgXHVCMkU0XHVDNzRDIHRpY2sgXHVDNUQwIGNvbnRhaW5lckVsIFx1Qjg1QyBcdUM4NzBcdUQ2OEMgKi9cclxuICAgIGlmICghaW5wKSB7XHJcbiAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcclxuICAgICAgICBpbnAgPSBjcC5jb250YWluZXJFbD8ucXVlcnlTZWxlY3RvcihcImlucHV0W3R5cGU9J2NvbG9yJ11cIikgYXMgSFRNTElucHV0RWxlbWVudCB8IG51bGw7XHJcblxyXG4gICAgICAgIGlucD8uc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgdGlwKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpbnAuc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgdGlwKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKiBcdTI2MDAgTGlnaHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4gIHJvdy5hZGRDb2xvclBpY2tlcihjcCA9PlxyXG4gICAgaW5pdFBpY2tlcihjcCwgbGlnaHRHZXR0ZXIsIGxpZ2h0U2V0dGVyLCBcIkxpZ2h0IG1vZGUgY29sb3VyIChcdTI2MDApXCIpLFxyXG4gICk7XHJcblxyXG4gIC8qIFx1RDgzQ1x1REYxOSBEYXJrIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbiAgcm93LmFkZENvbG9yUGlja2VyKGNwID0+XHJcbiAgICBpbml0UGlja2VyKGNwLCBkYXJrR2V0dGVyLCBkYXJrU2V0dGVyLCBcIkRhcmsgbW9kZSBjb2xvdXIgKFx1RDgzQ1x1REYxOSlcIiksXHJcbiAgKTtcclxufVxyXG5cclxuLyogPT09IExpc3QtQ2FsbG91dCBcdUQ1NUMgXHVENTg5IFx1QzBERFx1QzEzMSA9PT0gKi9cclxucHJpdmF0ZSBidWlsZENhbGxvdXRSb3coXHJcbiAgaG9zdCA6IEhUTUxFbGVtZW50LCAgICAgLy8gU2V0dGluZyBcdUNFRThcdUQxNENcdUM3NzRcdUIxMDhcclxuICBjbyAgIDogTGlzdENhbGxvdXQsICAgICAvLyBcdUQ2MDRcdUM3QUMgXHVCMzcwXHVDNzc0XHVEMTMwXHJcbiAgaWR4ICA6IG51bWJlciwgICAgICAgICAgLy8gXHVCQzMwXHVDNUY0IFx1Qzc3OFx1QjM3MVx1QzJBNFxyXG4gIFMgICAgOiBDb3ZlclRhYmxlU2V0dGluZ3MsICAgLy8gc2V0dGluZ3MgXHVBQzFEXHVDQ0I0IChcdUM4MDBcdUM3QTVcdUM2QTkpXHJcbil7XHJcbiAgY29uc3Qgcm93ID0gbmV3IFNldHRpbmcoaG9zdCk7XHJcblxyXG4gIC8qIFx1MjQ2MCBcdUFFMDBcdUJBMzhcdUI5QUMgXHVBRTMwXHVENjM4IFx1Qzc4NVx1QjgyNSBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuICByb3cuYWRkVGV4dCh0ID0+XHJcbiAgICB0LnNldFBsYWNlaG9sZGVyKFwiXHUyNjA1XCIpXHJcbiAgICAgLnNldFZhbHVlKGNvLmNoYXIpXHJcbiAgICAgLm9uQ2hhbmdlKGFzeW5jIHYgPT4ge1xyXG4gICAgICAgY28uY2hhciA9IHYudHJpbSgpLmNoYXJBdCgwKSB8fCBcIlx1MjAyMlwiO1xyXG4gICAgICAgYXdhaXQgdGhpcy5jb21taXQoKTtcclxuICAgICAgIHRoaXMuZGlzcGxheSgpOyAgICAgICAgICAvLyBcdUM5MTFcdUJDRjUgXHVBQzgwXHVDMEFDIFx1QzcwNFx1RDU3NCBcdUM4MDRcdUNDQjQgXHVDN0FDXHVCODBDXHVCMzU0XHJcbiAgICAgfSksXHJcbiAgKS5zZXROYW1lKGBNYXJrZXIgJHtpZHggKyAxfWApO1xyXG5cclxuICAvKiBcdTI0NjEgNCBcdUFDMUMgXHVDRUVDXHVCN0VDXHVENTNDXHVDRUU0IChiZ0xpZ2h0IC8gZmdMaWdodCAvIGJnRGFyayAvIGZnRGFyaykgKi9cclxuLyogXHUyNDYxIDQgXHVBQzFDIFx1Q0VFQ1x1QjdFQ1x1RDUzQ1x1Q0VFNCAoYmdMaWdodCAvIGZnTGlnaHQgLyBiZ0RhcmsgLyBmZ0RhcmspICovXHJcbi8qIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCAqL1xyXG4vKiBcdTI0NjEgNCBcdUFDMUMgXHVDRUVDXHVCN0VDXHVENTNDXHVDRUU0IChiZ0xpZ2h0IC8gZmdMaWdodCAvIGJnRGFyayAvIGZnRGFyaykgKi9cclxuLyogXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwICovXHJcbmNvbnN0IGFkZENsciA9IChcclxuICBsYWIgOiBzdHJpbmcsXHJcbiAgZ2V0IDogKCkgPT4gc3RyaW5nLFxyXG4gIHNldCA6ICh2OiBzdHJpbmcpID0+IHZvaWQsXHJcbikgPT4ge1xyXG4gIHJvdy5hZGRDb2xvclBpY2tlcihjcCA9PiB7XHJcbiAgICBjcC5zZXRWYWx1ZShnZXQoKSlcclxuICAgICAgLm9uQ2hhbmdlKGFzeW5jIHYgPT4geyBzZXQodik7IGF3YWl0IHRoaXMuY29tbWl0KCk7IH0pO1xyXG5cclxuICAgIC8qIHRvb2x0aXAgXHVCRDgwXHVDNUVDIFx1MjAxNCBcdUQwQzBcdUM3ODUgXHVDNjI0XHVCOTU4IFx1QzVDNlx1Qzc3NCAqL1xyXG4gICAgY29uc3Qgc2V0VGlwID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBhbnlDcCA9IGNwIGFzIGFueTsgICAgICAgICAgICAgICAgICAgICAvLyBcdUI3RjBcdUQwQzBcdUM3ODQgXHVBQzFEXHVDQ0I0XHJcbiAgICAgIGNvbnN0IGlucCA9IChhbnlDcC5jb250YWluZXJFbCBhcyBIVE1MRWxlbWVudCB8IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgPy5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbdHlwZT0nY29sb3InXVwiKSBhcyBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbDtcclxuICAgICAgaW5wPy5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBsYWIpO1xyXG4gICAgfTtcclxuICAgIHNldFRpcCgpO1xyXG4gICAgcXVldWVNaWNyb3Rhc2soc2V0VGlwKTsgICAgLy8gXHVDOUMwXHVDNUYwIFx1QzBERFx1QzEzMSBcdUIzMDBcdUJFNDRcclxuICB9KTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcbiAgYWRkQ2xyKFwiYmdMaWdodFwiLCAoKSA9PiBjby5iZ0xpZ2h0LCB2ID0+IChjby5iZ0xpZ2h0ID0gdikpO1xyXG4gIGFkZENscihcImZnTGlnaHRcIiwgKCkgPT4gY28uZmdMaWdodCwgdiA9PiAoY28uZmdMaWdodCA9IHYpKTtcclxuICBhZGRDbHIoXCJiZ0RhcmtcIiAsICgpID0+IGNvLmJnRGFyayAsIHYgPT4gKGNvLmJnRGFyayAgPSB2KSk7XHJcbiAgYWRkQ2xyKFwiZmdEYXJrXCIgLCAoKSA9PiBjby5mZ0RhcmsgLCB2ID0+IChjby5mZ0RhcmsgID0gdikpO1xyXG5cclxuICAvKiBcdTI0NjIgXHVDMEFEXHVDODFDIFx1QkM4NFx1RDJCQyBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuLyogXHUyNDYyIFx1QzBBRFx1QzgxQyBcdUJDODRcdUQyQkMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5yb3cuYWRkRXh0cmFCdXR0b24oYnRuID0+XHJcbiAgYnRuLnNldEljb24oXCJ0cmFzaFwiKVxyXG4gICAgIC5zZXRUb29sdGlwKFwiRGVsZXRlXCIpXHJcbiAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgUy5saXN0Q2FsbG91dHMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICBhd2FpdCB0aGlzLmNvbW1pdCgpO1xyXG4gICAgICAgdGhpcy5kaXNwbGF5KCk7ICAgICAgICAgICAgICAgICAgLy8gXHVENTg5IFx1QzdBQ1x1QURGOFx1QjlBQ1x1QUUzMFxyXG4gICAgIH0pLFxyXG4pO1xyXG5cclxufVxyXG5cclxuLyogPT09IFx1QzBDOCBDYWxsb3V0IFx1QUUzMFx1QkNGOFx1QUMxMiBcdUJDMThcdUQ2NTggPT09ICovXHJcbnByaXZhdGUgbmV3Q2FsbG91dCgpOiBMaXN0Q2FsbG91dCB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGNoYXIgICA6IFwiXHUyNjA1XCIsXHJcbiAgICBiZ0xpZ2h0OiBcIiNkYmVhZmVcIixcclxuICAgIGZnTGlnaHQ6IFwiIzFlNDBhZlwiLFxyXG4gICAgYmdEYXJrIDogXCIjMWUzYThhXCIsXHJcbiAgICBmZ0RhcmsgOiBcIiNkYmVhZmVcIixcclxuICB9O1xyXG59XHJcblxyXG5cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIDUuIFVJIFx1QjgwQ1x1QjM1NFx1QjlDMSBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5vdmVycmlkZSBkaXNwbGF5KCk6IHZvaWQge1xyXG4gIGNvbnN0IGMgPSB0aGlzLmNvbnRhaW5lckVsO1xyXG4gIGMuZW1wdHkoKTtcclxuICBjb25zdCBTID0gdGhpcy5wbHVnaW4uc2V0dGluZ3M7XHJcbiAgdGhpcy5maWxsTWlzc2luZyhTLnRva2Vucyk7XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT0gR2VuZXJhbCBvcHRpb25zID09PT09PT09PT09PT09PT09PT09PSAqL1xyXG4vLyBlLmcuIFNldHRpbmdUYWIudHNcclxubmV3IFNldHRpbmcoYylcclxuICAuc2V0TmFtZShcIkRlYnVnIFx1Qjg1Q1x1QURGOCBcdUQ0NUNcdUMyRENcIilcclxuICAuYWRkVG9nZ2xlKHQgPT5cclxuICAgIHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVidWdMb2cpXHJcbiAgICAgLm9uQ2hhbmdlKGFzeW5jICh2KSA9PiB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVidWdMb2cgPSB2O1xyXG4gICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgIExvZy5zZXREZWJ1Zyh2KTsgICAgICAgLy8gPFx1MjAxNCBcdUQxQTBcdUFFMDAgXHVDOTg5XHVDMkRDIFx1QkMxOFx1QzYwMVxyXG4gICAgIH0pKTtcclxuXHJcbi8qIChBKSBfMCAgT24gLyBPZmYgIFx1MjE5MiBoaWRlWmVyb0ZvbGRlcnMgXHVEMUEwXHVBRTAwICovXHJcbm5ldyBTZXR0aW5nKGMpXHJcbiAgLnNldE5hbWUoXCJfMCAgT24gLyBPZmZcIilcclxuICAuc2V0RGVzYygnSGlkZSBldmVyeSBmb2xkZXIgd2hvc2UgbmFtZSBzdGFydHMgd2l0aCBcIjBfXCIgaW4gRXhwbG9yZXI7IGZpbGVzIGluc2lkZSByZW1haW4gdmlzaWJsZScpXHJcbiAgLmFkZFRvZ2dsZSh0ID0+XHJcbiAgICB0LnNldFZhbHVlKFMuaGlkZVplcm9Gb2xkZXJzKVxyXG4gICAgIC5vbkNoYW5nZShhc3luYyB2ID0+IHtcclxuICAgICAgIFMuaGlkZVplcm9Gb2xkZXJzID0gdjtcclxuICAgICAgIGF3YWl0IHRoaXMuY29tbWl0KCk7XHJcbiAgICAgICB0aGlzLnBsdWdpbi5hcHBseVplcm9Gb2xkZXJWaXNpYmlsaXR5KCk7ICAgLy8gXHVDOTg5XHVDMkRDIFx1QkMxOFx1QzYwMVxyXG4gICAgIH0pLFxyXG4gICk7XHJcblxyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PSBcdUM3NzRcdUQ1NTggXHVBRTMwXHVDODc0IFx1RDMxNFx1QjgwOFx1RDJCOCBcdUNGNTRcdUI0REMgXHVCNEYxIFx1QURGOFx1QjMwMFx1Qjg1QyA9PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcblxyXG4gICAgLyotLSBQYWxldHRlIGhlYWRsaW5lIC0tKi9cclxuICAgIGMuY3JlYXRlRWwoXCJoM1wiLCB7IHRleHQ6IFwiXHVEODNDXHVERkE4IENvbG9yIHBhbGV0dGUgXHUyMDEzIExpZ2h0IC8gRGFya1wiIH0pO1xyXG5cclxuXHJcbiAgICAvKiBcdUQ4M0NcdUREOTUgXHVDNTQ4XHVCMEI0IFx1QkIzOFx1QUQ2QyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5jLmNyZWF0ZUVsKFwicFwiLCB7XHJcbiAgdGV4dDogXCJFYWNoIHJvdyBzaG93cyB0d28gY29sb3VyIHBpY2tlcnM6ICBcdTI2MDAgID0gTGlnaHQgbW9kZSAgIFx1MDBCNyAgIFx1RDgzQ1x1REYxOSAgPSBEYXJrIG1vZGUuXCIsXHJcbiAgY2xzIDogXCJjdC10aXBcIixcclxufSk7XHJcblxyXG4gICAgLyogMSkgQmFzZSAqL1xyXG4gICAgdGhpcy5hZGREdWFsUGlja2VyKFxyXG4gICAgICBjLCBMQUJFTC5iYXNlV2hpdGUsXHJcbiAgICAgICgpID0+IFMudG9rZW5zLmxpZ2h0LmJhc2Uud2hpdGUsICgpID0+IFMudG9rZW5zLmRhcmsuYmFzZS53aGl0ZSxcclxuICAgICAgdiAgPT4gUy50b2tlbnMubGlnaHQuYmFzZS53aGl0ZSA9IHYsIHYgID0+IFMudG9rZW5zLmRhcmsuYmFzZS53aGl0ZSA9IHYsXHJcbiAgICApO1xyXG4gICAgdGhpcy5hZGREdWFsUGlja2VyKFxyXG4gICAgICBjLCBMQUJFTC5iYXNlQmxhY2ssXHJcbiAgICAgICgpID0+IFMudG9rZW5zLmxpZ2h0LmJhc2UuYmxhY2ssICgpID0+IFMudG9rZW5zLmRhcmsuYmFzZS5ibGFjayxcclxuICAgICAgdiAgPT4gUy50b2tlbnMubGlnaHQuYmFzZS5ibGFjayA9IHYsIHYgID0+IFMudG9rZW5zLmRhcmsuYmFzZS5ibGFjayA9IHYsXHJcbiAgICApO1xyXG5cclxuICAgIC8qIDIpIEhlYWRpbmdzICovXHJcbiAgICBjLmNyZWF0ZUVsKFwiaDRcIiwgeyB0ZXh0OiBcIkhlYWRpbmdzIChIMVx1MjAxM0g2KVwiIH0pO1xyXG4gICAgKFtcImgxXCIsXCJoMlwiLFwiaDNcIixcImg0XCIsXCJoNVwiLFwiaDZcIl0gYXMgY29uc3QpLmZvckVhY2goayA9PlxyXG4gICAgICB0aGlzLmFkZER1YWxQaWNrZXIoXHJcbiAgICAgICAgYywgTEFCRUxba10sXHJcbiAgICAgICAgKCkgPT4gUy50b2tlbnMubGlnaHQuaGVhZGluZ1trXSwgKCkgPT4gUy50b2tlbnMuZGFyay5oZWFkaW5nW2tdLFxyXG4gICAgICAgIHYgID0+IFMudG9rZW5zLmxpZ2h0LmhlYWRpbmdba10gPSB2LCB2ICA9PiBTLnRva2Vucy5kYXJrLmhlYWRpbmdba10gID0gdixcclxuICAgICAgKVxyXG4gICAgKTtcclxuXHJcbiAgICAvKiAzKSBMaXN0IC8gQm9sZCAqL1xyXG4gICAgYy5jcmVhdGVFbChcImg0XCIsIHsgdGV4dDogXCJMaXN0IC8gQm9sZFwiIH0pO1xyXG4gICAgKFtcImJ1bGxldFwiLFwib2xNYXJrZXJcIl0gYXMgY29uc3QpLmZvckVhY2goayA9PlxyXG4gICAgICB0aGlzLmFkZER1YWxQaWNrZXIoXHJcbiAgICAgICAgYywgTEFCRUxba10sXHJcbiAgICAgICAgKCkgPT4gUy50b2tlbnMubGlnaHQubGlzdFtrXSwgKCkgPT4gUy50b2tlbnMuZGFyay5saXN0W2tdLFxyXG4gICAgICAgIHYgID0+IFMudG9rZW5zLmxpZ2h0Lmxpc3Rba10gPSB2LCB2ICA9PiBTLnRva2Vucy5kYXJrLmxpc3Rba10gID0gdixcclxuICAgICAgKVxyXG4gICAgKTtcclxuLyogYm9sZCAoTkVXKSAqL1xyXG50aGlzLmFkZER1YWxQaWNrZXIoXHJcbiAgYywgXCJCb2xkIHRleHRcIixcclxuICAoKSA9PiBTLnRva2Vucy5saWdodC5ib2xkLmJvbGQsICAoKSA9PiBTLnRva2Vucy5kYXJrLmJvbGQuYm9sZCxcclxuICB2ICA9PiBTLnRva2Vucy5saWdodC5ib2xkLmJvbGQgPSB2LCB2ID0+IFMudG9rZW5zLmRhcmsuYm9sZC5ib2xkID0gdixcclxuKTtcclxuXHJcbi8qIGl0YWxpYyAoTkVXKSAqL1xyXG50aGlzLmFkZER1YWxQaWNrZXIoXHJcbiAgYywgXCJJdGFsaWMgdGV4dFwiLFxyXG4gICgpID0+IFMudG9rZW5zLmxpZ2h0Lml0YWxpYy5pdGFsaWMsICAoKSA9PiBTLnRva2Vucy5kYXJrLml0YWxpYy5pdGFsaWMsXHJcbiAgdiAgPT4gUy50b2tlbnMubGlnaHQuaXRhbGljLml0YWxpYyA9IHYsIHYgPT4gUy50b2tlbnMuZGFyay5pdGFsaWMuaXRhbGljID0gdixcclxuKTtcclxuXHJcblxyXG5cclxuLyogNikgXHVEODNEXHVEQ0REIExpc3QgQ2FsbG91dHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbmMuY3JlYXRlRWwoXCJoM1wiLCB7IHRleHQ6IFwiXHVEODNEXHVEQ0REIExpc3QgQ2FsbG91dHNcIiB9KTtcclxuXHJcbi8qIChBKSBcdUFFMzBcdUM4NzQgQ2FsbG91dCBcdUQ1ODkgXHVCODBDXHVCMzU0ICovXHJcblMubGlzdENhbGxvdXRzLmZvckVhY2goKGNvLCBpKSA9PiB0aGlzLmJ1aWxkQ2FsbG91dFJvdyhjLCBjbywgaSwgUykpO1xyXG5cclxuLyogKEIpICsgQWRkIFx1QkM4NFx1RDJCQyBcdTIwMTMgXHVDRDVDXHVCMzAwIDVcdUFDMUMgXHVDODFDXHVENTVDICovXHJcbm5ldyBTZXR0aW5nKGMpXHJcbiAgLmFkZEJ1dHRvbihidG4gPT4ge1xyXG4gICAgY29uc3QgZnVsbCA9IFMubGlzdENhbGxvdXRzLmxlbmd0aCA+PSBDQUxMT1VUX0xJTUlUO1xyXG5cclxuICAgIGJ0bi5zZXRCdXR0b25UZXh0KGZ1bGwgPyBcIkxpbWl0IHJlYWNoZWRcIiA6IFwiKyBBZGRcIilcclxuICAgICAgIC5zZXREaXNhYmxlZChmdWxsKSAgICAgICAgICAgICAgIC8vIDVcdUFDMUNcdUFDMDAgXHVCNDE4XHVCQTc0IFx1QkU0NFx1RDY1Q1x1QzEzMVx1RDY1NFxyXG4gICAgICAgLnNldEN0YSgpXHJcbiAgICAgICAuc2V0VG9vbHRpcChmdWxsXHJcbiAgICAgICAgID8gYFlvdSBjYW4gcmVnaXN0ZXIgdXAgdG8gJHtDQUxMT1VUX0xJTUlUfSBjYWxsb3V0c2BcclxuICAgICAgICAgOiBcIkFkZCBhIG5ldyBjYWxsb3V0XCIpXHJcbiAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgIC8qIFx1QzU0OFx1QzgwNFx1QUMwMFx1QjREQzogXHVCMzU0XHVCRTE0LVx1RDA3NFx1QjlBRC9cdUI4MDhcdUM3NzRcdUMyQTQgXHVDRUU4XHVCNTE0XHVDMTU4IFx1QjMwMFx1QkU0NCAqL1xyXG4gICAgICAgICBpZiAoUy5saXN0Q2FsbG91dHMubGVuZ3RoID49IENBTExPVVRfTElNSVQpIHJldHVybjtcclxuXHJcbiAgICAgICAgIFMubGlzdENhbGxvdXRzLnB1c2godGhpcy5uZXdDYWxsb3V0KCkpO1xyXG4gICAgICAgICBhd2FpdCB0aGlzLmNvbW1pdCgpO1xyXG4gICAgICAgICB0aGlzLmRpc3BsYXkoKTsgICAgICAgICAgICAgICAgLy8gXHVDMEM4IFx1RDU4OVx1QUU0Q1x1QzlDMCBcdUIyRTRcdUMyREMgXHVBREY4XHVCOUFDXHVBRTMwXHJcbiAgICAgICB9KTtcclxuICB9KVxyXG4gIC5zZXROYW1lKGBcdUMwQzggQ2FsbG91dCBcdUNEOTRcdUFDMDAgKG1heCAke0NBTExPVVRfTElNSVR9KWApO1xyXG5cclxuICBcclxuXHJcblxyXG4gIH1cclxufVxyXG4iLCAiLyogdXRpbHMvbG9nLnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG50eXBlIENNZXRob2QgPSBcImRlYnVnXCIgfCBcImluZm9cIiB8IFwid2FyblwiIHwgXCJlcnJvclwiO1xyXG5cclxuZnVuY3Rpb24gbWFrZShtZXRob2Q6IENNZXRob2QpIHtcclxuICByZXR1cm4gKC4uLmE6IGFueVtdKSA9PiBERUJVRyAmJiAoY29uc29sZSBhcyBhbnkpW21ldGhvZF0oXCJbQ1RdXCIsIC4uLmEpO1xyXG59XHJcblxyXG5sZXQgREVCVUcgPSB0cnVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1QUUzMFx1QkNGOCBPTlxyXG5cclxuZXhwb3J0IGNvbnN0IExvZyA9IHtcclxuICAvKiBcdUQxQTBcdUFFMDAgXHVDMkE0XHVDNzA0XHVDRTU4IChTZXR0aW5nVGFiIFx1QjRGMVx1QzVEMFx1QzExQyBcdUQ2MzhcdUNEOUMpICovXHJcbiAgc2V0RGVidWcodjogYm9vbGVhbikgeyBERUJVRyA9IHY7IH0sXHJcblxyXG4gIC8qIFx1QjgwOFx1QkNBOFx1QkNDNCBcdUI3OThcdUQzN0MgKi9cclxuICBkIDogbWFrZShcImRlYnVnXCIpLCAgIC8vID0gZGVidWcgLyBsb2cgLyBpbmZvIFx1MjE5MiBcdUM4MDRcdUJEODAgXHVDNUVDXHVBRTMwXHVCODVDIFx1RDFCNVx1RDU2OVxyXG4gIHcgOiBtYWtlKFwid2FyblwiKSxcclxuICBlIDogbWFrZShcImVycm9yXCIpLFxyXG5cclxuICAvKiBcdUMyRENcdUFDMDQgXHVBQ0M0XHVDRTIxICovXHJcbiAgdGltZShsYWJlbDogc3RyaW5nKSAgICB7IERFQlVHICYmIGNvbnNvbGUudGltZShgW0NUXSAke2xhYmVsfWApOyB9LFxyXG4gIHRpbWVFbmQobGFiZWw6IHN0cmluZykgeyBERUJVRyAmJiBjb25zb2xlLnRpbWVFbmQoYFtDVF0gJHtsYWJlbH1gKTsgfSxcclxufSBhcyBjb25zdDtcclxuIiwgIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBzcmMvdWkvaW50ZXJhY3RpdmUtdGFibGUvVUlNYW5hZ2VyLnRzIFx1MjAxMyBhdXRvLWdlbmVyYXRlZCBmcm9tXHJcbiAqIGxlZ2FjeSBDb3Zlci1UYWJsZSB2MjAyNS0wNVxyXG4gKiAgIFx1MjAyMiBcdUM4MDRcdUNDQjQgXHVDNzc0XHVBRDAwIFx1Q0Y1NFx1QjREQyBcdTIwMTMgXHVDMjE4XHVDODE1IFx1QUUwOFx1QzlDMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogIFx1RDgzRFx1RENEMCBVSU1hbmFnZXIgXHUyMDEzIEludGVyYWN0aXZlXHUyMDExVGFibGUgVmlldyBCdWlsZGVyXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgXHUyMDIyIEFjdHMgYXMgdGhlICoqcHJlc2VudGF0aW9uIGxheWVyKio6IHRha2VzIHRoZSBhbHJlYWR5XHUyMDExZmlsdGVyZWRcclxuICogICAgcm93cyBmcm9tIEludGVyYWN0aXZlVGFibGVNb2RlbCAmIHJlbmRlcnMgRE9NIGNvbXBvbmVudHNcclxuICogICAgKEZpbHRlckJhciBcdTIxOTIgRGF0YVRhYmxlIFx1MjE5MiBQYWdpbmF0aW9uKSBpbnNpZGUgdGhlIGhvc3QgPHByZT4uXHJcbiAqXHJcbiAqICBcdTIwMjIgQ29udGFpbnMgKipubyBidXNpbmVzcyBsb2dpYyoqIFx1MjAxMyBhbnkgc3RhdGUgbXV0YXRpb25cclxuICogICAgKGZpbHRlciwgc2VhcmNoLCBwYWdpbmF0aW9uKSBpcyBkZWxlZ2F0ZWQgdG8gdGhlIGNhbGxiYWNrXHJcbiAqICAgIGZhXHUwMEU3YWRlIHNvIENvbnRyb2xsZXIgXHUyMUM2IE1vZGVsIFx1MjFDNiBTdGF0ZUNlbnRlciByZW1haW4gdGhlIHNpbmdsZVxyXG4gKiAgICBzb3VyY2VzIG9mIHRydXRoLlxyXG4gKlxyXG4gKiAgXHUyMDIyIExlZ2FjeSBgdWkudHNgIHJlc3BvbnNpYmlsaXRpZXMgYXJlIG5vdyBzcGxpdDpcclxuICogICAgICAgIGF0b21zLyAgICAgICAgICAgXHUyMDEzIERvbSwgQnV0dG9uLCBJbnB1dCwgXHUyMDI2XHJcbiAqICAgICAgICBtb2xlY3VsZXMvICAgICAgIFx1MjAxMyBGaWx0ZXJCYXIsIFBhZ2luYXRpb24sIFx1MjAyNlxyXG4gKiAgICAgICAgbGF5b3V0cy8gICAgICAgICBcdTIwMTMgRGF0YVRhYmxlLCBIZWFkZXJMYXlvdXQsIFx1MjAyNlxyXG4gKiAgICAgICAgaW50ZXJhY3RpdmUtdGFibGUvVUlNYW5hZ2VyLnRzICBcdTIxOTAgWU9VIEFSRSBIRVJFXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuaW1wb3J0IHsgQXBwLCBURmlsZSwgVEZvbGRlciB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBEb20gfSBmcm9tIFwiLi4vYXRvbXMvZG9tXCI7XHJcbmltcG9ydCB7IEZpbHRlckJhciB9IGZyb20gXCIuLi9tb2xlY3VsZXMvRmlsdGVyQmFyXCI7XHJcbmltcG9ydCB7IFBhZ2luYXRpb24gfSBmcm9tIFwiLi4vbW9sZWN1bGVzL1BhZ2luYXRpb25cIjtcclxuaW1wb3J0IHsgRGF0YVRhYmxlIH0gZnJvbSBcIi4uL2xheW91dHMvRGF0YVRhYmxlXCI7XHJcblxyXG5pbXBvcnQgdHlwZSB7IENvbHVtbkRlZiB9IGZyb20gXCIuLi8uLi9mZWF0dXJlcy9pbnRlcmFjdGl2ZS10YWJsZS90eXBlc1wiO1xyXG5pbXBvcnQgdHlwZSB7IEZpbHRlckJhck9wdGlvbnMgfSBmcm9tIFwiLi4vbW9sZWN1bGVzL0ZpbHRlckJhclwiO1xyXG5pbXBvcnQgdHlwZSB7IFBhZ2luYXRpb25PcHRpb25zIH0gZnJvbSBcIi4uL21vbGVjdWxlcy9QYWdpbmF0aW9uXCI7XHJcblxyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIG9wZW5QYXRoSW5OZXdMZWFmKGFwcDogQXBwLCBwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBpZiAoIXBhdGgpIHJldHVybjtcclxuICBjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYXRoKTtcclxuICBpZiAoIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSByZXR1cm47XHJcbiAgY29uc3QgbGVhZiA9IGFwcC53b3Jrc3BhY2UuZ2V0TGVhZih0cnVlKTtcclxuICBhd2FpdCBsZWFmLm9wZW5GaWxlKGZpbGUpO1xyXG4gIGFwcC53b3Jrc3BhY2Uuc2V0QWN0aXZlTGVhZihsZWFmKTtcclxufVxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG4vKiAgT1BFTiBGSUxFIElOIFBPUE9VVCBXSU5ET1cgKyBBVVRPQ0xPU0UgTE9HSUMgICAgICAgICAgICAgICAgICAqL1xyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBvcGVuSW5OZXdMZWFmQW5kQ2xvc2UoXHJcbiAgYXBwOiBBcHAsXHJcbiAgZmlsZVBhdGg6IHN0cmluZyxcclxuICBfY3Vyckhvc3Q6IEhUTUxFbGVtZW50LFxyXG4pIHtcclxuICBjb25zdCBhYnMgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChmaWxlUGF0aCwgXCJcIikgPz9cclxuICAgICAgICAgICAgICBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKTtcclxuICBpZiAoIShhYnMgaW5zdGFuY2VvZiBURmlsZSkpIHJldHVybjtcclxuXHJcbiAgLy8gb3BlbiBpbiBhIG5ldyBsZWFmIHNvIHRoZSBvcmlnaW5hbCB2aWV3IHJlbWFpbnNcclxuICBjb25zdCBsZWFmID0gYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpO1xyXG4gIGF3YWl0IGxlYWYub3BlbkZpbGUoYWJzKTtcclxuICBhcHAud29ya3NwYWNlLnNldEFjdGl2ZUxlYWYobGVhZik7XHJcbn1cclxuXHJcblxyXG5cclxuLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAxLiBVSVRhYmxlQ2FsbGJhY2tzIFx1MjAxMyBDb250cm9sbGVyIFx1MjE5NCBVSSBjb250cmFjdFxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFVJVGFibGVDYWxsYmFja3Mge1xyXG4gIC8qXHUyNTAwXHUyNTAwIHN0YXRlIGhlbHBlcnMgKFx1MjE5MiBTdGF0ZUNlbnRlcikgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuICBnZXRTdGF0ZSAgICAgOiAobm90ZTogc3RyaW5nLCB2aWV3SWQ6IHN0cmluZywga2V5OiBzdHJpbmcpID0+IGFueTtcclxuICBzZXRTdGF0ZSAgICAgOiAobm90ZTogc3RyaW5nLCB2aWV3SWQ6IHN0cmluZywga2V5OiBzdHJpbmcsIHZhbDogYW55KSA9PiB2b2lkO1xyXG4gIC8qKiBMb2NhbCBtb2RlbCBjYWNoZSAocGFnZXMgZXRjLikgKi9cclxuICBnZXRMb2NhbFN0YXRlOiAobm90ZTogc3RyaW5nLCB2aWV3SWQ6IHN0cmluZykgPT4gYW55O1xyXG5cclxuICAvKlx1MjUwMFx1MjUwMCB1dGlsIHBhcml0eSB3aXRoIE1vZGVsIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgZ2V0VmFsICAgICAgIDogKHJvdzogYW55LCBwcm9wOiBzdHJpbmcpID0+IGFueTtcclxuICBwYXJzZURhdGVZTUQgOiAoc3RyOiBzdHJpbmcpID0+IERhdGUgfCBudWxsO1xyXG4gIGZvcm1hdEFzRGF0ZSA6ICh2OiBhbnkpID0+IHN0cmluZztcclxuICBnZXRTb3J0VmFsdWUgOiAodjogYW55KSA9PiBzdHJpbmcgfCBudW1iZXI7XHJcbiAgc3VnZ2VzdGVyICAgIDogKHZhbHVlczogc3RyaW5nW10pID0+IFByb21pc2U8c3RyaW5nIHwgbnVsbD47XHJcblxyXG4gIC8qXHUyNTAwXHUyNTAwIHJlbmRlciBmbG93IGNvbnRyb2wgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuICByZXJlbmRlciAgICAgOiAoKSA9PiBQcm9taXNlPHZvaWQ+OyAgICAgICAgICAgICAgICAgIC8vIENvbnRyb2xsZXJcdTIxOTJNb2RlbFx1MjE5MlVJXHJcbiAgc3luYyAgICAgICAgIDogKG5vdGU6IHN0cmluZywgdmlld0lkOiBzdHJpbmcsIGtleTogc3RyaW5nLCB2YWw6IGFueSkgPT4gUHJvbWlzZTx2b2lkPiB8IHZvaWQ7XHJcbiAgcmVzZXRTdGF0ZSAgIDogKG5vdGU6IHN0cmluZywgdmlld0lkOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD4gfCB2b2lkO1xyXG59XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIDIuIEludGVybmFsIEhlbHBlciBUeXBlc1xyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFVJTWFuYWdlck9wdGlvbnMge1xyXG4gIHNob3dPcGVuRm9sZGVyQnV0dG9uICAgICAgICA6IGJvb2xlYW47XHJcbiAgc2hvd05ld05vdGVCdXR0b24gICAgICAgICAgIDogYm9vbGVhbjtcclxuICBzaG93TmV3Q2FudmFzQnV0dG9uICAgICAgICAgOiBib29sZWFuOyAgIC8vIFx1MjYwNVxyXG4gIHNob3dUYWdGaWx0ZXJCdXR0b24gICAgICAgICA6IGJvb2xlYW47XHJcbiAgc2hvd0Zyb250bWF0dGVyRmlsdGVyQnV0dG9uIDogYm9vbGVhbjtcclxuICBzaG93U2VhcmNoQm94ICAgICAgICAgICAgICAgOiBib29sZWFuO1xyXG4gIHNob3dSZWZyZXNoQnV0dG9uICAgICAgICAgICA6IGJvb2xlYW47XHJcbiAgZm9sZGVyUGF0aCAgICAgICAgICAgICAgICAgIDogc3RyaW5nIHwgbnVsbDtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRm1DYW5kaWRhdGUgeyAgICAgICAgICAgICAgICAgICAgLy8gXHVDMEM4IFx1RDBDMFx1Qzc4NVxyXG4gIHByb3AgICA6IHN0cmluZztcclxuICBuYW1lICAgOiBzdHJpbmc7XHJcbiAgdmFsdWVzIDogc3RyaW5nW107XHJcbn1cclxuXHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIDMuIFVJTWFuYWdlciBDbGFzc1xyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgY2xhc3MgVUlNYW5hZ2VyIHtcclxuICBwcml2YXRlIGFwcDogQXBwO1xyXG4gIHByaXZhdGUgY2IgOiBVSVRhYmxlQ2FsbGJhY2tzO1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgY2FsbGJhY2tzOiBVSVRhYmxlQ2FsbGJhY2tzKSB7XHJcbiAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgIHRoaXMuY2IgID0gY2FsbGJhY2tzO1xyXG4gIH1cclxuXHJcbiAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIGJ1aWxkVmlldygpIFx1MjAxMyAocmUpcmVuZGVyIGVudGlyZSBJbnRlcmFjdGl2ZVx1MjAxMVRhYmxlIGJsb2NrXHJcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuICBhc3luYyBidWlsZFZpZXcoXHJcbiAgICBob3N0UHJlICAgOiBIVE1MRWxlbWVudCxcclxuICAgIG5vdGVQYXRoICA6IHN0cmluZyxcclxuICAgIHZpZXdJZCAgICA6IHN0cmluZyxcclxuICAgIHJvd3MgICAgICA6IGFueVtdLFxyXG4gICAgY29sdW1ucyAgIDogQ29sdW1uRGVmW10sXHJcbiAgICBwZXJQYWdlICAgOiBudW1iZXIsXHJcbiAgICB0b3RhbFJvd3MgOiBudW1iZXIsXHJcbiAgICBvcHRzICAgICAgOiBVSU1hbmFnZXJPcHRpb25zLFxyXG4gICAgLyogcmVzZXJ2ZWQgcGFyYW1zIGZvciBmdXR1cmUgY29tcGF0aWJpbGl0eSAqL1xyXG4gICAgZm1MaXN0ICAgOiBGbUNhbmRpZGF0ZVtdID0gW10sXHJcbiAgICB0YWdMaXN0ICA6IHN0cmluZ1tdIHwgbnVsbCA9IG51bGwsXHJcbiAgICBjYjogVUlUYWJsZUNhbGxiYWNrcyA9IHRoaXMuY2JcclxuICApOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIC8qIFx1MjUwMFx1MjUwMCAwLiBQcmVwYXJlIGhvc3QgY29udGFpbmVyIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgICBob3N0UHJlLmVtcHR5KCk7IFxyXG4gICAgaG9zdFByZS5jbGFzc0xpc3QuYWRkKFwiY3QtaXQtY29udGFpbmVyXCIpO1xyXG5cclxuICAgIC8qIFx1MjUwMFx1MjUwMCAxLiBGaWx0ZXJCYXIgKG1vbGVjdWxlKSBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4gICAgY29uc3QgZmJPcHRzOiBGaWx0ZXJCYXJPcHRpb25zID0ge1xyXG4gICAgICBzaG93T3BlbkZvbGRlckJ1dHRvbiAgICAgICAgOiBvcHRzLnNob3dPcGVuRm9sZGVyQnV0dG9uLFxyXG4gICAgICBzaG93TmV3Tm90ZUJ1dHRvbiAgICAgICAgICAgOiBvcHRzLnNob3dOZXdOb3RlQnV0dG9uLFxyXG4gICAgICBzaG93TmV3Q2FudmFzQnV0dG9uICAgICAgICAgOiBvcHRzLnNob3dOZXdDYW52YXNCdXR0b24sIC8vIFx1MjYwNVxyXG4gICAgICBzaG93VGFnRmlsdGVyQnV0dG9uICAgICAgICAgOiBvcHRzLnNob3dUYWdGaWx0ZXJCdXR0b24sXHJcbiAgICAgIHNob3dGcm9udG1hdHRlckZpbHRlckJ1dHRvbiA6IG9wdHMuc2hvd0Zyb250bWF0dGVyRmlsdGVyQnV0dG9uLFxyXG4gICAgICBzaG93U2VhcmNoQm94ICAgICAgICAgICAgICAgOiBvcHRzLnNob3dTZWFyY2hCb3gsXHJcbiAgICAgIHNob3dSZWZyZXNoQnV0dG9uICAgICAgICAgICA6IG9wdHMuc2hvd1JlZnJlc2hCdXR0b24sXHJcbiAgICAgIGZvbGRlclBhdGggICAgICAgICAgICAgICAgICA6IG9wdHMuZm9sZGVyUGF0aCxcclxuICAgIH07XHJcbiAgICBuZXcgRmlsdGVyQmFyKFxyXG4gICAgICB0aGlzLmFwcCxcclxuICAgICAgaG9zdFByZSxcclxuICAgICAgbm90ZVBhdGgsXHJcbiAgICAgIHZpZXdJZCxcclxuICAgICAgY29sdW1ucyxcclxuICAgICAgY2IsXHJcbiAgICAgIGZiT3B0cyxcclxuICAgICAgZm1MaXN0LFxyXG4gICAgICB0YWdMaXN0XHJcbiAgICApO1xyXG5cclxuICAgIC8qIFx1MjUwMFx1MjUwMCAyLiBEYXRhVGFibGUgKGxheW91dCkgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuLyogXHUyNTAwXHUyNTAwIDIuIERhdGFUYWJsZSAobGF5b3V0KSBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5jb25zdCB0YWJsZSA9IERhdGFUYWJsZS5idWlsZCh7XHJcbiAgY29sdW1ucyxcclxuICByb3dzLFxyXG4gIHplYnJhOiB0cnVlLFxyXG5vblJvd0NsaWNrOiAocm93KSA9PiB7XHJcbiAgY29uc3QgZmlsZSA9IHJvdz8uZmlsZT8ucGF0aDtcclxuICBpZiAoIWZpbGUpIHJldHVybjtcclxuXHJcbiAgLyogXHVDMEM4IExlYWZcdUI4NUMgXHVDNUY0XHVBQ0UwLCBcdUQ2MDRcdUM3QUMgTGVhZiBcdUIyRUJcdUFFMzAgKi9cclxuICBvcGVuSW5OZXdMZWFmQW5kQ2xvc2UodGhpcy5hcHAsIGZpbGUsIGhvc3RQcmUpO1xyXG59LFxyXG4gIG5vdGVQYXRoLFxyXG4gIHZpZXdJZCxcclxuICBjYjoge1xyXG4gICAgZ2V0U3RhdGU6IGNiLmdldFN0YXRlLFxyXG4gICAgc3luYyAgICA6IGNiLnN5bmMsXHJcbiAgfSxcclxufSk7XHJcbmhvc3RQcmUuYXBwZW5kQ2hpbGQodGFibGUpO1xyXG5cclxuXHJcbi8qIFx1Mjc4QyAgRGVsZWdhdGVkIGhhbmRsZXIgc28gXHUyMDFDbGluay1pbi1jZWxsXHUyMDFEICYgZGJsLWNsaWNrXHVCM0M0IHBvcC1vdXQgKi9cclxudGFibGUuYWRkRXZlbnRMaXN0ZW5lcihcclxuICBcImRibGNsaWNrXCIsXHJcbiAgYXN5bmMgKGUpID0+IHtcclxuICAgIGNvbnN0IGVsID0gZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBpZiAoZWwuY2xvc2VzdChcIi5uYXYtZmlsZS10aXRsZVwiKSkgcmV0dXJuOyAgICAgIC8vIFx1RDBEMFx1QzBDOVx1QUUzMCBcdUM2MDhcdUM2NzhcclxuXHJcbiAgICBjb25zdCBocmVmID0gZWwuY2xvc2VzdDxIVE1MQW5jaG9yRWxlbWVudD4oXCJhXCIpPy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xyXG4gICAgY29uc3Qgcm93ICA9IGVsLmNsb3Nlc3Q8SFRNTFRhYmxlUm93RWxlbWVudD4oXCJ0clwiKTtcclxuICAgIGNvbnN0IHBhdGggPSBocmVmID8/IHJvdz8uZGF0YXNldC5wYXRoID8/IFwiXCI7XHJcbiAgICBpZiAoIXBhdGgpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCB0YXJnZXQgPVxyXG4gICAgICB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KHBhdGgsIFwiXCIpID8/XHJcbiAgICAgIHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYXRoKTtcclxuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIFRGaWxlKSkgcmV0dXJuO1xyXG4gICAgY29uc3QgZXh0ID0gdGFyZ2V0LmV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpO1xyXG4gICAgaWYgKCFbXCJtZFwiLCBcInBkZlwiLCBcImNhbnZhc1wiXS5pbmNsdWRlcyhleHQpKSByZXR1cm47XHJcblxyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdUFFMzBcdUJDRjggXHVEMEQwXHVDMEM5IFx1QzVCNVx1QzgxQ1xyXG4gICAgYXdhaXQgb3BlblBhdGhJbk5ld0xlYWYodGhpcy5hcHAsIHRhcmdldC5wYXRoKTsgICAgICAvLyBvcGVuIGluIG5ldyB0YWJcclxuICB9LFxyXG4gIHRydWUsICAgLy8gY2FwdHVyZSBcdUIyRThcdUFDQzRcclxuKTtcclxuXHJcblxyXG5cclxuXHJcbiAgICAvKiBcdTI1MDBcdTI1MDAgMy4gUGFnaW5hdGlvbiAobW9sZWN1bGUpIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgICBpZiAocGVyUGFnZSA+IDApIHtcclxuICAgICAgY29uc3QgcGdPcHRzOiBQYWdpbmF0aW9uT3B0aW9ucyA9IHtcclxuICAgICAgICBwZXJQYWdlLFxyXG4gICAgICAgIHRvdGFsUm93cyxcclxuICAgICAgfTtcclxuICAgICAgbmV3IFBhZ2luYXRpb24obm90ZVBhdGgsIHZpZXdJZCwgY2IsIGhvc3RQcmUsIHBnT3B0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgfVxyXG59XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIFx1RDgzRFx1REQwRCAgXHVDQzM4XHVBQ0UwXHJcbiAgICAgIFx1MjAyMiBTb3J0aW5nIGNsaWNrXHUyMDExaGFuZGxlcnMgd2VyZSByZW1vdmVkIGZyb20gVUkgbGF5ZXIgXHUyMDEzIHRoZXkgYXJlXHJcbiAgICAgICAgbm93IGhhbmRsZWQgaW5zaWRlIENvbnRyb2xsZXIgKHN5bmMgXHUyMTkyIHJlcmVuZGVyKS5cclxuICAgICAgXHUyMDIyIExlZ2FjeSBDU1MgY2xhc3NlcyBhcmUgcHJlc2VydmVkIHRvIG1pbmltaXNlIHZpc3VhbCBkaWZmLlxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4iLCAiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIHNyYy91aS9tb2xlY3VsZXMvRmlsdGVyQmFyLnRzIFx1MjAxMyBhdXRvLWdlbmVyYXRlZCBmcm9tIGxlZ2FjeSBDb3Zlci1UYWJsZSB2MjAyNS0wNVxyXG4gKiAgIFx1MjAyMiBcdUM4MDRcdUNDQjQgXHVDNzc0XHVBRDAwIFx1Q0Y1NFx1QjREQyBcdTIwMTMgXHVDMjE4XHVDODE1IFx1QUUwOFx1QzlDMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogIFx1RDgzRFx1REQwRCBGaWx0ZXJCYXIgXHUyMDEzIE1vbGVjdWxlIENvbXBvbmVudFxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIFx1MjAyMiBSZXBsYWNlcyBsZWdhY3kgdWkudHMgKCMzICBGaWx0ZXJcdTIwMTFBcmVhKSB3aXRoIGEgY2xlYW4sIG1vZHVsYXJcclxuICogICAgY29tcG9uZW50IHRoYXQgZ3JvdXBzICoqZnJvbnRcdTIwMTFtYXR0ZXIgZmlsdGVyIGJ1dHRvbnMsIHRhZ1xyXG4gKiAgICBzZWxlY3Rvciwgc2VhcmNoIGJveCwgYW5kIHV0aWxpdHkgY29udHJvbHMqKiAocmVmcmVzaCwgb3BlblxyXG4gKiAgICBmb2xkZXIsIG5ldyBub3RlKS5cclxuICogIFx1MjAyMiBDb25zdW1lcyBhdG9tcyAoQnV0dG9uRmFjdG9yeSwgSW5wdXQsIEljb24pIGFuZCB0aGUgY2FsbGJhY2tcclxuICogICAgZmFcdTAwRTdhZGUgKGBVSVRhYmxlQ2FsbGJhY2tzYCkgcHJvdmlkZWQgYnkgSW50ZXJhY3RpdmVUYWJsZUNvbnRyb2xsZXIuXHJcbiAqICBcdTIwMjIgRW1pdHMgbm8gc2lkZVx1MjAxMWVmZmVjdHMgaXRzZWxmIFx1MjAxMyBldmVyeSB1c2VyIGFjdGlvbiBkZWxlZ2F0ZXMgdG9cclxuICogICAgdGhlIGNhbGxiYWNrcyBzbyBDb250cm9sbGVyIFx1MjE5NCBNb2RlbCBcdTIxOTQgU3RhdGVDZW50ZXIgcGlwZWxpbmVcclxuICogICAgc3RheXMgaW50YWN0LlxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbmltcG9ydCB7IEFwcCwgTm90aWNlLCBURm9sZGVyfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgRG9tIH0gZnJvbSBcIi4uL2F0b21zL2RvbVwiO1xyXG5pbXBvcnQgeyBCdXR0b25GYWN0b3J5IH0gZnJvbSBcIi4uL2F0b21zL2J1dHRvblwiO1xyXG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gXCIuLi9hdG9tcy9pbnB1dFwiO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uL2F0b21zL3NwaW5uZXJcIjtcclxuaW1wb3J0IHR5cGUgeyBDb2x1bW5EZWYgfSBmcm9tIFwiLi4vLi4vZmVhdHVyZXMvaW50ZXJhY3RpdmUtdGFibGUvdHlwZXNcIjtcclxuaW1wb3J0IHR5cGUgeyBGbUNhbmRpZGF0ZSwgVUlUYWJsZUNhbGxiYWNrcyB9IGZyb20gXCIuLi9pbnRlcmFjdGl2ZS10YWJsZS9VSU1hbmFnZXJcIjsgLy8gcmVsYXRpdmUgdG8gdWkgZm9sZGVyXHJcbmltcG9ydCB7IG9wZW5Jbk5ld0xlYWZBbmRDbG9zZSB9IGZyb20gXCIuLi9pbnRlcmFjdGl2ZS10YWJsZS9VSU1hbmFnZXJcIjtcclxuaW1wb3J0IHsgdjQgYXMgdXVpZCB9IGZyb20gXCJ1dWlkXCI7XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIFx1RDgzRFx1REQyNyBTYWZlLWNhc3QgaGVscGVyIFx1MjAxMyB0YWcgXHVBQzEyXHVDNzc0IFx1QzVCNFx1QjVBNCBcdUQ2MTVcdUQwRENcdUI0RTAgXHVCQzMwXHVDNUY0XHVCODVDIFx1QkNDMFx1RDY1OFxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5mdW5jdGlvbiB0b1RhZ0FycmF5KHJhdzogYW55KTogc3RyaW5nW10geyAgICAgICAgICAvLyBcdTI2MDUgUEFUQ0hcclxuICBpZiAoIXJhdykgcmV0dXJuIFtdO1xyXG4gIGlmIChBcnJheS5pc0FycmF5KHJhdykpIHJldHVybiByYXc7ICAgICAgICAgICAgICAvLyBcdUM3NzRcdUJCRjggXHVCQzMwXHVDNUY0XHJcbiAgaWYgKHJhdyBpbnN0YW5jZW9mIFNldCkgcmV0dXJuIFsuLi5yYXddOyAgICAgICAgIC8vIERhdGF2aWV3IFNldFxyXG4gIGlmICh0eXBlb2YgcmF3ID09PSBcIm9iamVjdFwiICYmIHJhdy50YWcpIHJldHVybiBbU3RyaW5nKHJhdy50YWcpXTtcclxuICByZXR1cm4gW1N0cmluZyhyYXcpXTtcclxufVxyXG5cclxuLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAxLiBGaWx0ZXJCYXIgT3B0aW9ucyAoc3Vic2V0IG9mIFVJTWFuYWdlciBvcHRpb25zKVxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEZpbHRlckJhck9wdGlvbnMge1xyXG4gIHNob3dPcGVuRm9sZGVyQnV0dG9uICAgICAgICA6IGJvb2xlYW47XHJcbiAgc2hvd05ld05vdGVCdXR0b24gICAgICAgICAgIDogYm9vbGVhbjtcclxuICBzaG93TmV3Q2FudmFzQnV0dG9uICAgICAgICAgOiBib29sZWFuOyAgIC8vIFx1MjYwNSBcdUNEOTRcdUFDMDBcclxuICBzaG93VGFnRmlsdGVyQnV0dG9uICAgICAgICAgOiBib29sZWFuO1xyXG4gIHNob3dGcm9udG1hdHRlckZpbHRlckJ1dHRvbiA6IGJvb2xlYW47XHJcbiAgc2hvd1NlYXJjaEJveCAgICAgICAgICAgICAgIDogYm9vbGVhbjtcclxuICBzaG93UmVmcmVzaEJ1dHRvbiAgICAgICAgICAgOiBib29sZWFuO1xyXG4gIGZvbGRlclBhdGggICAgICAgICAgICAgICAgICA6IHN0cmluZyB8IG51bGw7IC8vIGZvciBvcGVuXHUyMDExZm9sZGVyXHJcbn1cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgMi4gRmlsdGVyQmFyIENsYXNzXHJcblx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJCYXIge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgd3JhcCA6IEhUTUxEaXZFbGVtZW50O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgYnRucyA6IEhUTUxEaXZFbGVtZW50O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgYnRuRmFjdG9yeTogQnV0dG9uRmFjdG9yeTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFwcCAgICA6IEFwcCxcclxuICAgIGhvc3QgICAgICAgICAgICAgICAgICAgIDogSFRNTEVsZW1lbnQsICAgICAgLy8gcGFyZW50IGNvbnRhaW5lclxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBub3RlICAgOiBzdHJpbmcsICAgICAgICAgICAvLyBjdHguc291cmNlUGF0aFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSB2aWQgICAgOiBzdHJpbmcsICAgICAgICAgICAvLyB2aWV3SWRcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29scyAgIDogQ29sdW1uRGVmW10sICAgICAgLy8gZm9yIGZtXHUyMDExZmlsdGVyIGJ1dHRvbnNcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2IgICAgIDogVUlUYWJsZUNhbGxiYWNrcywgLy8gZ2V0L3NldCBzdGF0ZSBldGMuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdHMgICA6IEZpbHRlckJhck9wdGlvbnMsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZtTGlzdCA6IEZtQ2FuZGlkYXRlW10sXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRhZ0xpc3Q6IHN0cmluZ1tdIHwgbnVsbFxyXG5cclxuICApIHtcclxuICAgIHRoaXMuYnRuRmFjdG9yeSA9IG5ldyBCdXR0b25GYWN0b3J5KGFwcCk7XHJcblxyXG4gICAgLyogV3JhcHBlciAoZmxleCByb3cpIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4gICAgdGhpcy53cmFwID0gRG9tLmVsKFwiZGl2XCIsIFwiY3QtZmlsdGVyLWJhclwiKTtcclxuICAgIGhvc3QucHJlcGVuZCh0aGlzLndyYXApO1xyXG5cclxuICAgIC8qIChBKSBGcm9udFx1MjAxMW1hdHRlciAvIFRhZyBidXR0b25zIChsZWZ0KSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuICAgIGlmIChvcHRzLnNob3dGcm9udG1hdHRlckZpbHRlckJ1dHRvbikgdGhpcy5idWlsZEZyb250bWF0dGVyRmlsdGVycygpO1xyXG4gICAgaWYgKG9wdHMuc2hvd1RhZ0ZpbHRlckJ1dHRvbikgICAgICAgICB0aGlzLmJ1aWxkVGFnRmlsdGVyKCk7XHJcblxyXG4gICAgLyogKEIpIFNlYXJjaCBib3ggLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuICAgIGlmIChvcHRzLnNob3dTZWFyY2hCb3gpICAgICAgICAgICAgICB0aGlzLmJ1aWxkU2VhcmNoQm94KCk7XHJcblxyXG4gICAgLyogKEMpIFV0aWxpdHkgYnV0dG9ucyAocmlnaHQpIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4gICAgdGhpcy5idG5zID0gRG9tLmVsKFwiZGl2XCIsIFwiY3QtZmlsdGVyLWJhcl9fdXRpbHNcIik7XHJcbiAgICB0aGlzLndyYXAuYXBwZW5kQ2hpbGQodGhpcy5idG5zKTtcclxuXHJcbiAgICBpZiAob3B0cy5zaG93T3BlbkZvbGRlckJ1dHRvbiAmJiBvcHRzLmZvbGRlclBhdGgpXHJcbiAgICAgIHRoaXMuYnRucy5hcHBlbmRDaGlsZCh0aGlzLmJ0bkZhY3Rvcnkub3BlbkZvbGRlcihvcHRzLmZvbGRlclBhdGgpKTtcclxuXHJcbmlmIChvcHRzLnNob3dOZXdOb3RlQnV0dG9uKSB7XHJcbiAgY29uc3QgYnRuID0gdGhpcy5idG5GYWN0b3J5Lm5ld05vdGUoKTtcclxuXHJcbiAgYnRuLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAvKiBBLiBcdUMwQzggXHVEMzBDXHVDNzdDXHVDNzQ0IFx1QjlDQ1x1QjRFNCBcdUIzMDBcdUMwQzEgXHVEM0Y0XHVCMzU0ICovXHJcbiAgICBjb25zdCBmb2xkZXJQYXRoID1cclxuICAgICAgdGhpcy5vcHRzLmZvbGRlclBhdGggPz9cclxuICAgICAgdGhpcy5ub3RlLnN1YnN0cmluZygwLCB0aGlzLm5vdGUubGFzdEluZGV4T2YoXCIvXCIpKTtcclxuXHJcbiAgICAvKiBCLiBURm9sZGVyIFx1RDY1NVx1QkNGNCAoXHVDNUM2XHVDNzNDXHVCQTc0IFx1Qzk4OVx1QzJEQyBcdUMwRERcdUMxMzEpICovXHJcbiAgICBsZXQgdEZvbGRlciA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmb2xkZXJQYXRoKTtcclxuICAgIGlmICghKHRGb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKSkge1xyXG4gICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGVGb2xkZXIoZm9sZGVyUGF0aCk7XHJcbiAgICAgIHRGb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZm9sZGVyUGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogQy4gXHVDMEM4IFx1QjlDOFx1RDA2Q1x1QjJFNFx1QzZCNCBcdUQzMENcdUM3N0MgXHVDMEREXHVDMTMxICovXHJcbiAgICBjb25zdCBmaWxlTmFtZSA9IGBVbnRpdGxlZCAke3dpbmRvdy5tb21lbnQoKS5mb3JtYXQoXCJZWVlZLU1NLUREIEhIbW1zc1wiKX0ubWRgO1xyXG4gICAgY29uc3QgZmlsZSA9IGF3YWl0ICh0aGlzLmFwcCBhcyBhbnkpXHJcbiAgICAgIC5maWxlTWFuYWdlci5jcmVhdGVOZXdNYXJrZG93bkZpbGUodEZvbGRlciwgZmlsZU5hbWUpO1xyXG5cclxuICAgIC8qIEQuIFx1QzBDOCBMZWFmIFx1Qjg1QyBcdUM1RjRcdUFDRTAsIEludGVyYWN0aXZlLVRhYmxlIExlYWYgXHVCMkVCXHVBRTMwICovXHJcbiAgICBhd2FpdCBvcGVuSW5OZXdMZWFmQW5kQ2xvc2UodGhpcy5hcHAsIGZpbGUucGF0aCwgaG9zdCk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5idG5zLmFwcGVuZENoaWxkKGJ0bik7XHJcbn1cclxuXHJcblxyXG4vKiArIE5ldyBjYW52YXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5pZiAob3B0cy5zaG93TmV3Q2FudmFzQnV0dG9uKSB7XHJcbiAgY29uc3QgYnRuID0gdGhpcy5idG5GYWN0b3J5Lm5ld0NhbnZhcygpO1xyXG5cclxuICBidG4ub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8qIFx1MjQ2MCBcdUIzMDBcdUMwQzEgXHVEM0Y0XHVCMzU0IFx1QUNCMFx1QzgxNSAqL1xyXG4gICAgICBjb25zdCBmb2xkZXJQYXRoID1cclxuICAgICAgICB0aGlzLm9wdHMuZm9sZGVyUGF0aCA/P1xyXG4gICAgICAgIHRoaXMubm90ZS5zdWJzdHJpbmcoMCwgdGhpcy5ub3RlLmxhc3RJbmRleE9mKFwiL1wiKSk7XHJcblxyXG4gICAgICAvKiBcdTI0NjEgXHVEM0Y0XHVCMzU0XHVBQzAwIFx1QzVDNlx1QzczQ1x1QkE3NCBcdUMwRERcdUMxMzEgKi9cclxuICAgICAgbGV0IHRGb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZm9sZGVyUGF0aCk7XHJcbiAgICAgIGlmICghKHRGb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKSkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcihmb2xkZXJQYXRoKTtcclxuICAgICAgICB0Rm9sZGVyID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZvbGRlclBhdGgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBcdTI0NjIgXHVEMzBDXHVDNzdDXHVCQTg1IFx1Qzc4NVx1QjgyNSAqL1xyXG4gICAgICBjb25zdCB0cyAgID0gd2luZG93Lm1vbWVudCgpLmZvcm1hdChcIllZWVktTU0tREQgSEhtbXNzXCIpO1xyXG4gICAgICBsZXQgbmFtZSAgID0gYXdhaXQgdGhpcy5wcm9tcHRGb3JOYW1lKGBVbnRpdGxlZCAke3RzfWApO1xyXG4gICAgICBpZiAoIW5hbWUpIHJldHVybjtcclxuICAgICAgaWYgKCFuYW1lLmVuZHNXaXRoKFwiLmNhbnZhc1wiKSkgbmFtZSArPSBcIi5jYW52YXNcIjtcclxuICAgICAgY29uc3QgZnVsbCA9IGAke2ZvbGRlclBhdGh9LyR7bmFtZX1gO1xyXG5cclxuICAgICAgLyogXHUyNDYzIFx1QzkxMVx1QkNGNSBcdUM1RUNcdUJEODAgXHVENjU1XHVDNzc4IFx1RDZDNCBcdUQzMENcdUM3N0MgXHVDMEREXHVDMTMxICovXHJcbiAgICAgIGNvbnN0IGV4aXN0cyA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmdWxsKTtcclxuICAgICAgaWYgKCFleGlzdHMpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZUJsYW5rQ2FudmFzKGZ1bGwpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBcdTI0NjQgXHVEMzFELVx1QzU0NFx1QzZDMyBMZWFmIFx1Qjg1QyBcdUM1RjRcdUFDRTAsIEludGVyYWN0aXZlLVRhYmxlIFx1Q0MzRCBcdUIyRUJcdUFFMzAgKi9cclxuICAgICAgYXdhaXQgb3BlbkluTmV3TGVhZkFuZENsb3NlKHRoaXMuYXBwLCBmdWxsLCBob3N0KTtcclxuXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIG5ldyBOb3RpY2UoYEZhaWxlZCB0byBjcmVhdGUgY2FudmFzOiAkeyhlIGFzIEVycm9yKS5tZXNzYWdlfWApO1xyXG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMuYnRucy5hcHBlbmRDaGlsZChidG4pO1xyXG59XHJcblxyXG5cclxuICAgIGlmIChvcHRzLnNob3dSZWZyZXNoQnV0dG9uKVxyXG4gICAgICB0aGlzLmJ0bnMuYXBwZW5kQ2hpbGQodGhpcy5idG5GYWN0b3J5LnJlZnJlc2goYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIC8qIFJlcGxhY2UgbGFiZWwgd2l0aCBzcGlubmVyIHdoaWxlIGF3YWl0aW5nICovXHJcbiAgICAgICAgY29uc3QgYnRuID0gKGV2ZW50IS5jdXJyZW50VGFyZ2V0IGFzIEhUTUxCdXR0b25FbGVtZW50KTtcclxuICAgICAgICBjb25zdCBwcmV2ID0gYnRuLnRleHRDb250ZW50O1xyXG4gICAgICAgIGJ0bi5yZXBsYWNlQ2hpbGRyZW4oU3Bpbm5lci50aW55KCkpO1xyXG4gICAgICAgIHRyeSB7IGF3YWl0IHRoaXMuY2IucmVyZW5kZXIoKTsgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBidG4udGV4dENvbnRlbnQgPSBwcmV2ID8/IFwiXHUyMUJCXCI7IH1cclxuICAgICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAgIDJcdTIwMTFBLiBUYWcgRmlsdGVyIEJ1dHRvblxyXG4gIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgcHJpdmF0ZSBidWlsZFRhZ0ZpbHRlcigpOiB2b2lkIHtcclxuICAgIC8qIGN1cnJlbnQgc2VsZWN0aW9uICovXHJcbiAgICBjb25zdCBrZXkgPSBgdGFnRmlsdGVyXyR7dGhpcy52aWR9YDtcclxuICAgIGNvbnN0IGN1ciA9ICh0aGlzLmNiLmdldFN0YXRlIGFzIGFueSkodGhpcy5ub3RlLCB0aGlzLnZpZCwga2V5KSB8fCBcIkFMTFwiO1xyXG5cclxuICAgIGNvbnN0IGJ0biA9IHRoaXMuYnRuRmFjdG9yeS50YWdGaWx0ZXIoY3VyID09PSBcIkFMTFwiID8gXCIjVGFnc1wiIDogY3VyLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGlmICghdGhpcy50YWdMaXN0KSByZXR1cm47IFxyXG4gICAgICBjb25zdCBjaG9zZW4gPSBhd2FpdCB0aGlzLmNiLnN1Z2dlc3Rlcih0aGlzLnRhZ0xpc3QpO1xyXG4gICAgICBpZiAoY2hvc2VuID09IG51bGwpIHJldHVybjtcclxuICAgICAgdGhpcy5jYi5zeW5jKHRoaXMubm90ZSwgdGhpcy52aWQsIGtleSwgY2hvc2VuKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qIFx1MjcyOCBcdUNEOTRcdUFDMDA6IFx1MjAxQ0FMTFx1MjAxRCBcdUM3NzQgXHVDNTQ0XHVCMkM4XHVCQTc0IFx1QUMxNVx1Qzg3MCAqL1xyXG4gIGlmIChjdXIgIT09IFwiQUxMXCIpIGJ0bi5jbGFzc0xpc3QuYWRkKFwiaXMtYWN0aXZlXCIpO1xyXG5cclxuICAgIHRoaXMud3JhcC5hcHBlbmRDaGlsZChidG4pO1xyXG4gIH1cclxuXHJcbiAgLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAgIDJcdTIwMTFCLiBGcm9udFx1MjAxMW1hdHRlciBGaWx0ZXIgQnV0dG9uc1xyXG4gIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgcHJpdmF0ZSBidWlsZEZyb250bWF0dGVyRmlsdGVycygpOiB2b2lkIHtcclxuICAgIHRoaXMuZm1MaXN0LmZvckVhY2goKHsgcHJvcCwgbmFtZSwgdmFsdWVzIH0pID0+IHtcclxuICAgICAgY29uc3Qga2V5ID0gYGZpbHRlcl8ke3RoaXMudmlkfV8ke3Byb3B9YDtcclxuICAgICAgY29uc3QgY3VyID0gKHRoaXMuY2IuZ2V0U3RhdGUgYXMgYW55KSh0aGlzLm5vdGUsIHRoaXMudmlkLCBrZXkpIHx8IFwiQUxMXCI7XHJcbiAgICAgIGNvbnN0IGJhc2UgPSBuYW1lIHx8IHByb3A7XHJcbiAgICAgIGNvbnN0IGxhYmVsID0gY3VyID09PSBcIkFMTFwiID8gYmFzZSA6IGAke2Jhc2V9OiAke2N1cn1gO1xyXG5cclxuICAgICAgY29uc3QgYnRuID0gdGhpcy5idG5GYWN0b3J5LmZpbHRlcihsYWJlbCwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNob3NlbiA9IGF3YWl0IHRoaXMuY2Iuc3VnZ2VzdGVyKHZhbHVlcyk7XHJcbiAgICAgICAgaWYgKGNob3NlbiA9PSBudWxsKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5jYi5zeW5jKHRoaXMubm90ZSwgdGhpcy52aWQsIGtleSwgY2hvc2VuKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvKiBcdTI3MjggXHVDRDk0XHVBQzAwICovXHJcbmlmIChjdXIgIT09IFwiQUxMXCIpIGJ0bi5jbGFzc0xpc3QuYWRkKFwiaXMtYWN0aXZlXCIpO1xyXG5cclxuICAgICAgdGhpcy53cmFwLmFwcGVuZENoaWxkKGJ0bik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29sbGVjdFByb3BWYWx1ZXMocHJvcDogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgY29uc3QgcGFnZXM6IGFueVtdID0gdGhpcy5jYi5nZXRMb2NhbFN0YXRlKHRoaXMubm90ZSwgdGhpcy52aWQpPy5wYWdlcyA/PyBbXTtcclxuICAgIGNvbnN0IHNldCA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG4gICAgcGFnZXMuZm9yRWFjaChwZyA9PiB7XHJcbiAgICAgIGNvbnN0IHJhdyA9IHRoaXMuY2IuZ2V0VmFsKHBnLCBwcm9wKTtcclxuICAgICAgY29uc3QgdiA9IHRoaXMuY2IuZm9ybWF0QXNEYXRlKHJhdykgfHwgU3RyaW5nKHJhdyA/PyBcIi1cIik7XHJcbiAgICAgIHNldC5hZGQodik7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBBcnJheS5mcm9tKHNldCkuZmlsdGVyKHY9PnYhPT1cIi1cIikuc29ydCgpO1xyXG4gIH1cclxuXHJcbiAgLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAgIDJcdTIwMTFDLiBTZWFyY2ggQm94XHJcbiAgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuICBwcml2YXRlIGJ1aWxkU2VhcmNoQm94KCk6IHZvaWQge1xyXG4gICAgY29uc3Qga2V5UmVhZHkgPSBgc2VhcmNoX3JlYWR5XyR7dGhpcy52aWR9YDtcclxuICAgIGNvbnN0IGtleVF1ZXJ5ID0gYHNlYXJjaF8ke3RoaXMudmlkfWA7XHJcbiAgICBjb25zdCBwcmV2ICAgICA9ICh0aGlzLmNiLmdldFN0YXRlIGFzIGFueSkodGhpcy5ub3RlLCB0aGlzLnZpZCwga2V5UXVlcnkpIHx8IFwiXCI7XHJcblxyXG4gICAgY29uc3QgaW5wdXQgPSBJbnB1dC50ZXh0KHtcclxuICAgICAgY2xzOiBcImN0LWZpbHRlci1iYXJfX3NlYXJjaFwiLFxyXG4gICAgICBwbGFjZWhvbGRlcjogXCJTZWFyY2hcdTIwMjZcIixcclxuICAgICAgdmFsdWU6IHByZXYsXHJcbiAgICAgIG9uRW50ZXI6IHEgPT4ge1xyXG4gICAgICAgIHRoaXMuY2Iuc3luYyh0aGlzLm5vdGUsIHRoaXMudmlkLCBrZXlSZWFkeSwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5jYi5zeW5jKHRoaXMubm90ZSwgdGhpcy52aWQsIGtleVF1ZXJ5LCBxKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy53cmFwLmFwcGVuZENoaWxkKGlucHV0KTtcclxuICB9XHJcbiAgLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAgIDJcdTIwMTFELiBDYW52YXMgbmV3XHJcbiAgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuXHJcbi8qIFx1RDA3NFx1Qjc5OFx1QzJBNCBcdUIwQjRcdUJEODAoYW55IFx1QzcwNFx1Q0U1OCkgKi9cclxucHJpdmF0ZSBhc3luYyBjcmVhdGVCbGFua0NhbnZhcyhwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBibGFuayA9IEpTT04uc3RyaW5naWZ5KFxyXG4gICAgeyBub2RlczogW10sIGVkZ2VzOiBbXSwgdmVyc2lvbjogXCIxLjAuMFwiLCBpZDogdXVpZCgpIH0sXHJcbiAgICBudWxsLFxyXG4gICAgMixcclxuICApO1xyXG4gIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShwYXRoLCBibGFuayk7XHJcbn1cclxuXHJcbnByaXZhdGUgYXN5bmMgcHJvbXB0Rm9yTmFtZShkZWY6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgY29uc3QgeyBNb2RhbCB9ID0gKGdsb2JhbFRoaXMgYXMgYW55KS5jb3ZlclRhYmxlLm9ic2lkaWFuO1xyXG4gICAgY2xhc3MgTmFtZU1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgICB2YWx1ZSA9IGRlZjtcclxuICAgICAgYWNjZXB0ZWQgPSBmYWxzZTtcclxuICAgICAgY29uc3RydWN0b3IoYXBwOiBBcHApIHsgc3VwZXIoYXBwKTsgfVxyXG4gICAgICBvbk9wZW4oKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKFwiaDFcIiwgeyB0ZXh0OiBcIk5ldyBjYW52YXMgbmFtZVwiIH0pO1xyXG4gICAgICAgIGNvbnN0IGlucHV0ID0gY29udGVudEVsLmNyZWF0ZUVsKFwiaW5wdXRcIiwgeyB2YWx1ZTogdGhpcy52YWx1ZSB9KTtcclxuICAgICAgICBpbnB1dC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgIGlucHV0LmZvY3VzKCk7XHJcbiAgICAgICAgY29uc3QgYWNjZXB0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy52YWx1ZSA9IGlucHV0LnZhbHVlLnRyaW0oKTtcclxuICAgICAgICAgIHRoaXMuYWNjZXB0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGV2OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICBpZiAoZXYua2V5ID09PSBcIkVudGVyXCIpIGFjY2VwdCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IG9rID0gY29udGVudEVsLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHsgdGV4dDogXCJPS1wiIH0pO1xyXG4gICAgICAgIG9rLm9uY2xpY2sgPSBhY2NlcHQ7XHJcbiAgICAgIH1cclxuICAgICAgb25DbG9zZSgpIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gICAgICAgIHJlc29sdmUodGhpcy5hY2NlcHRlZCA/IHRoaXMudmFsdWUgOiBudWxsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgbmV3IE5hbWVNb2RhbCh0aGlzLmFwcCkub3BlbigpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5cclxuXHJcbn1cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgXHVEODNEXHVEQ0NDICBMZWdhY3kgTWFwcGluZyBOb3Rlc1xyXG4gICAgICBcdTIwMjIgVGFnUGlsbCAmIFNlYXJjaElucHV0IG9yaWdpbmFsbHkgaW4gdWkudHMgKCMyLUMgLyAjMi1CKSBcdTIwMTMgbW92ZWQuXHJcbiAgICAgIFx1MjAyMiBTdGF0ZSBrZXlzIGFuZCBuYW1pbmcgc3RyaWN0bHkgaWRlbnRpY2FsIHRvIGxlZ2FjeSBzbyBTdGF0ZUNlbnRlclxyXG4gICAgICAgIGNvbnRpbnVlcyB0byB3b3JrIHdpdGhvdXQgbWlncmF0aW9uLlxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4iLCAiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIHNyYy91aS9hdG9tcy9kb20udHMgXHUyMDEzIGF1dG8tZ2VuZXJhdGVkIGZyb20gbGVnYWN5IENvdmVyLVRhYmxlIHYyMDI1LTA1XHJcbiAqICAgXHUyMDIyIFx1QzgwNFx1Q0NCNCBcdUM3NzRcdUFEMDAgXHVDRjU0XHVCNERDIFx1MjAxMyBcdUMyMThcdUM4MTUgXHVBRTA4XHVDOUMwXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiAgXHVEODNFXHVEREU5IERvbSAgXHUyMDEzICBVSSBBdG9tIEhlbHBlclxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIFx1MDBCNyBcdTIwMUNcdUIyRTggXHVENTVDIFx1QzkwNFx1MjAxRFx1Qjg1QyBFbGVtZW50IFx1QzBERFx1QzEzMVx1RDU1OFx1QjI5NCBcdUNEMDhcdUFDQkRcdUI3QzkgXHVENUVDXHVEMzdDLlxyXG4gKiAgICAgIERvbS5lbChcImRpdlwiLCBcImNscyBmb29cIiwgXCJIZWxsb1wiKTtcclxuICogIFx1MDBCNyBJbnRlcmFjdGl2ZS1UYWJsZSAvIEdhbnR0IC8gU2V0dGluZyBVSSBcdUI0RjFcclxuICogICAgXHVDODA0XHVCQUE4XHVCNEM4XHVDNUQwXHVDMTFDIFx1QUNGNVx1RDFCNSBcdUMwQUNcdUM2QTlcdUQ1NThcdUJCQzBcdUI4NUMgYXRvbXMgXHVCODVDIFx1QkQ4NFx1QjlBQ1x1RDU4OFx1QzJCNVx1QjJDOFx1QjJFNC5cclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogSFRNTCBcdUQwRENcdUFERjggXHVDNzc0XHVCOTg0IFx1QkIzOFx1Qzc5MFx1QzVGNCBcdTIxOTQgSFRNTEVsZW1lbnQgXHVCOUU0XHVENTUxXHJcbiAqIFx1MjUwMCBLICAgICAgICAgICAgICAgICAgICAgICA6IHRhZyBcdUM3NzRcdUI5ODQgXHVCOUFDXHVEMTMwXHVCN0Y0IFx1RDBDMFx1Qzc4NVxyXG4gKiBcdTI1MDAgSFRNTEVsZW1lbnRUYWdOYW1lTWFwW0tdOiBcdUQ1NzRcdUIyRjkgXHVEMERDXHVBREY4XHVDNzU4IFx1QzgxNVx1RDY1NVx1RDU1QyBFbGVtZW50IFx1RDBDMFx1Qzc4NVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERvbSB7XHJcbiAgLyoqXHJcbiAgICogRWxlbWVudCBcdUMwRERcdUMxMzEgXHVENUVDXHVEMzdDXHJcbiAgICogQHBhcmFtIHRhZyAgXCJkaXZcIiB8IFwiYnV0dG9uXCIgfCBcdTIwMjZcclxuICAgKiBAcGFyYW0gY2xzICBjbGFzcz1cIlwiIFx1QUMxMiAoXHVBQ0Y1XHVCQzMxIFx1QUQ2Q1x1QkQ4NCwgXHVDMTIwXHVEMEREKVxyXG4gICAqIEBwYXJhbSB0ZXh0IHRleHRDb250ZW50IChcdUMxMjBcdUQwREQpXHJcbiAgICogQHJldHVybnMgICAgSFRNTEVsZW1lbnRUYWdOYW1lTWFwW0tdIFx1MjAxMyBcdUM4MTVcdUQ2NTVcdUQ1NUMgXHVEMERDXHVBREY4IFx1RDBDMFx1Qzc4NVxyXG4gICAqXHJcbiAgICogXHVEODNEXHVEQ0NDIFx1QzBBQ1x1QzZBOSBcdUM2MDhcclxuICAgKiBgYGB0c1xyXG4gICAqIGNvbnN0IGJ0biA9IERvbS5lbChcImJ1dHRvblwiLFxyXG4gICAqICAgXCJpdC1idG4gaXQtYnRuLS1wcmltYXJ5XCIsXHJcbiAgICogICBcIkNsaWNrXCIpO1xyXG4gICAqIGBgYFxyXG4gICAqL1xyXG4gIHN0YXRpYyBlbDxLIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwPihcclxuICAgIHRhZzogSyxcclxuICAgIGNscyA9IFwiXCIsXHJcbiAgICB0ZXh0ID0gXCJcIixcclxuICApOiBIVE1MRWxlbWVudFRhZ05hbWVNYXBbS10ge1xyXG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XHJcbiAgICBpZiAoY2xzKSAgZWwuY2xhc3NOYW1lICAgID0gY2xzO1xyXG4gICAgaWYgKHRleHQpIGVsLnRleHRDb250ZW50ICA9IHRleHQ7XHJcbiAgICByZXR1cm4gZWw7XHJcbiAgfVxyXG59XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIFx1RDgzRFx1REQwRCAgXHVDQzM4XHVBQ0UwXHJcbiAgICAgIFx1MDBCNyBcdUNGNTRcdUI0REMgXHVCODVDXHVDOUMxXHVDNzQwIHVpLnRzIENvcmUtaGVscGVyIERvbS5lbCgpIFx1Qzc0NCAxOjEgXHVDNzc0XHVDODA0XHVENTg4XHVDMkI1XHVCMkM4XHVCMkU0LiA6Y29udGVudFJlZmVyZW5jZVtvYWljaXRlOjBde2luZGV4PTB9OmNvbnRlbnRSZWZlcmVuY2Vbb2FpY2l0ZToxXXtpbmRleD0xfVxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4iLCAiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIHNyYy91aS9hdG9tcy9idXR0b24udHMgXHUyMDEzIGF1dG8tZ2VuZXJhdGVkIGZyb20gbGVnYWN5IENvdmVyLVRhYmxlIHYyMDI1LTA1XHJcbiAqICAgXHUyMDIyIFx1QzgwNFx1Q0NCNCBcdUM3NzRcdUFEMDAgXHVDRjU0XHVCNERDIFx1MjAxMyBcdUMyMThcdUM4MTUgXHVBRTA4XHVDOUMwXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiAgXHVEODNFXHVEREU5IEJ1dHRvbiBcdTIwMTMgQXRvbSBDb21wb25lbnRcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBcdTAwQjcgXHVCQUE4XHVCNEUwIFVJIFx1QkFBOFx1QjRDOFx1QzVEMFx1QzExQyBcdUM3QUNcdUMwQUNcdUM2QTlcdUQ1NThcdUIyOTQgKipcdUIyRThcdUM3N0MgXHVCQzg0XHVEMkJDIFx1QzBERFx1QzEzMSBcdUQzMjlcdUQxQTBcdUI5QUMqKlx1Qzc4NVx1QjJDOFx1QjJFNC5cclxuICogIFx1MDBCNyBcdUFFMzBcdUM4NzQgdWkudHMgXHVDNzU4IFx1MjAxQ0VsZW1lbnRzIFx1MjAxMyBCdXR0b25zXHUyMDFEIFx1QUQ2Q1x1QzVFRCgjMi1BKSBcdUNGNTRcdUI0RENcdUI5N0NcclxuICogICAgYXRvbXMgXHVCODA4XHVCQ0E4XHVCODVDIFx1QkQ4NFx1QjlBQy1cdUM3NzRcdUFEMDBcdUQ1ODhcdUMyQjVcdUIyQzhcdUIyRTQuXHJcbiAqICBcdTAwQjcgRG9tLmVsKCkgXHVDNzIwXHVEMkY4XHVDNzQ0IFx1QzBBQ1x1QzZBOVx1RDU1OFx1QzVFQyAqKlx1RDU1QyBcdUM5MDQqKlx1Qjg1QyBIVE1MQnV0dG9uRWxlbWVudFxyXG4gKiAgICBcdUM3NzhcdUMyQTRcdUQxMzRcdUMyQTRcdUI5N0MgXHVCOUNDXHVCNEU0XHVBQ0UwLCBcdUFDRjVcdUQxQjUgXHVCRTQ0XHVENjVDXHVDMTMxKGRpc2FibGVkKSBcdUMyQTRcdUQwQzBcdUM3N0NcdUM3NDQgXHVDODAxXHVDNkE5XHVENTY5XHVCMkM4XHVCMkU0LlxyXG4gKlxyXG4gKiAgXHUyNzI4IFx1QzhGQ1x1QzY5NCBcdUJBNTRcdUMxMUNcdUI0RENcclxuICogICAgXHUyMDIyIGNyZWF0ZShvcHRzKSAgICAgICAgICAgIFx1MjAxMyBcdUM3N0NcdUJDMTggXHVCQzg0XHVEMkJDXHJcbiAqICAgIFx1MjAyMiBvcGVuRm9sZGVyKHJlbFBhdGgpICAgICBcdTIwMTMgXHUyMDFDXHUyMUFBIE9wZW4gRm9sZGVyXHUyMDFEIChFbGVjdHJvbiBzaGVsbClcclxuICogICAgXHUyMDIyIG5ld05vdGUoKSAgICAgICAgICAgICAgIFx1MjAxMyBcdTIwMUNcdUZGMEIgTmV3IG5vdGVcdTIwMUQgICAoRXhwbG9yZXIgY29tbWFuZClcclxuICogICAgXHUyMDIyIHJlZnJlc2gob25SZWZyZXNoKSAgICAgIFx1MjAxMyBcdTIwMUNcdTIxQkIgUmVmcmVzaFx1MjAxRCAgICAgKGFzeW5jIGNhbGxiYWNrKVxyXG4gKiAgICBcdTIwMjIgdGFnRmlsdGVyKGN1clRhZywgY2IpICAgXHUyMDEzIFx1RDBEQ1x1QURGOCBcdUQ1NDRcdUQxMzAgXHVEMUEwXHVBRTAwXHJcbiAqICAgIFx1MjAyMiBmaWx0ZXIocHJvcCwgY2IpICAgICAgICBcdTIwMTMgZnJvbnQtbWF0dGVyIFx1RDU0NFx1RDEzMCBcdUQxQTBcdUFFMDBcclxuICogICAgXHUyMDIyIHBhZ2luYXRpb24obGFiZWwsXHUyMDI2KSAgICAgXHUyMDEzIFx1RDM5OFx1Qzc3NFx1QzlDMFx1QjEyNFx1Qzc3NFx1QzE1OCBcdTIwMThcdTIxOTAgLyBcdTIxOTIgLyAxXHUyMDI2XHUyMDE5IFx1QkM4NFx1RDJCQ1xyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbmltcG9ydCB7IEFwcCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBEb20gfSBmcm9tIFwiLi9kb21cIjtcclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgMS4gIFx1RDBDMFx1Qzc4NSBcdUM4MTVcdUM3NThcclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuLyoqXHJcbiAqICoqVUlCdXR0b25PcHRpb25zKipcclxuICogIFx1MDBCNyBCdXR0b25GYWN0b3J5LmNyZWF0ZSgpIFx1RDMwQ1x1Qjc3Q1x1QkJGOFx1RDEzMFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBVSUJ1dHRvbk9wdGlvbnMge1xyXG4gIC8qKiBcdUJDODRcdUQyQkMgdGV4dENvbnRlbnQgICAgICAgICAgICAgICAqL1xyXG4gIGxhYmVsICAgIDogc3RyaW5nO1xyXG4gIC8qKiBjbGFzcz1cIlwiIChcdUFDRjVcdUJDMzFcdUFENkNcdUJEODQsIEJFTSBldGMuKSAgKi9cclxuICBjbHMgICAgICA6IHN0cmluZztcclxuICAvKiogXHVEMDc0XHVCOUFEIFx1QzJEQyBcdUMyRTRcdUQ1ODlcdUQ1NjAgXHVDRjVDXHVCQzMxICAgICAgICAgICAgKi9cclxuICBvbkNsaWNrICA6ICgpID0+IGFueSB8IFByb21pc2U8YW55PjtcclxuICAvKiogdHJ1ZSBcdTIxRDIgZGlzYWJsZWQgKyBhcmlhLWRpc2FibGVkICovXHJcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIDIuICBCdXR0b25GYWN0b3J5XHJcblx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbmV4cG9ydCBjbGFzcyBCdXR0b25GYWN0b3J5IHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGFwcDogQXBwKSB7fVxyXG5cclxuXHJcbiAgICAvKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gICAgXHVEODNEXHVERDM5IFx1Mjc4QSAgXHVDMEM4IFx1Q0U5NFx1QkM4NFx1QzJBNCBcdUJDODRcdUQyQkMgcHJlc2V0IFx1Q0Q5NFx1QUMwMFxyXG4gIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgLyoqIFx1RkYwQiAqKk5ldyBjYW52YXMqKiBcdTIwMTMgXHVBQ0Y1XHVEMUI1IFx1QzJBNFx1RDBDMFx1Qzc3Q1x1QjlDQyBcdUM5QzBcdUM4MTUgKG9uQ2xpY2sgXHVDNzQwIEZpbHRlckJhciBcdUNBQkRcdUM1RDBcdUMxMUMgXHVDN0FDXHVCQzE0XHVDNzc4XHVCNTI5KSAqL1xyXG4gIG5ld0NhbnZhcygpOiBIVE1MQnV0dG9uRWxlbWVudCB7XHJcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoe1xyXG4gICAgICBsYWJlbCA6IFwiXHVGRjBCIE5ldyBjYW52YXNcIixcclxuICAgICAgY2xzICAgOiBcImludGVyYWN0aXZlX3RhYmxlLWJ1dHRvbiBpbnRlcmFjdGl2ZV90YWJsZS1idXR0b24tLW5ldy1jYW52YXNcIixcclxuICAgICAgb25DbGljazogKCkgPT4gey8qIG5vb3AgXHUyMDEzIEZpbHRlckJhciBcdUM1RDBcdUMxMUMgXHVCMzZFXHVDNUI0XHVDNTAwICovfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIGNyZWF0ZSgpIFx1MjAxMyBcdUFDRjVcdUQxQjUgXHVCQzg0XHVEMkJDIFx1QzBERFx1QzEzMSBcdUQ1RUNcdUQzN0NcclxuICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG4gIGNyZWF0ZShvcHRzOiBVSUJ1dHRvbk9wdGlvbnMpOiBIVE1MQnV0dG9uRWxlbWVudCB7XHJcbiAgICBjb25zdCBidG4gPSBEb20uZWwoXCJidXR0b25cIiwgb3B0cy5jbHMsIG9wdHMubGFiZWwpO1xyXG5cclxuICAgIC8qIFx1MjUwMFx1MjUwMCBcdUJFNDRcdUQ2NUNcdUMxMzEoZGlzYWJsZWQpIFx1Q0M5OFx1QjlBQyBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuICAgIGlmIChvcHRzLmRpc2FibGVkKSB7XHJcbiAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKGAke29wdHMuY2xzfS0tZGlzYWJsZWRgKTtcclxuICAgICAgYnRuLnNldEF0dHJpYnV0ZShcImFyaWEtZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgICBidG4uZGlzYWJsZWQgPSB0cnVlOyAgICAgICAgICAvLyBcdTIxOTAgXHVDMkU0XHVDODFDIFx1RDA3NFx1QjlBRCBcdUJEODhcdUFDMDBcclxuICAgICAgcmV0dXJuIGJ0bjsgICAgICAgICAgICAgICAgICAgLy8gXHUyNjA1IFx1Qzc3NFx1QkNBNFx1RDJCOCBcdUJDMTRcdUM3NzhcdUI1MjkgXHVDMEREXHVCN0I1XHJcbiAgICB9XHJcblxyXG4gICAgLyogXHUyNTAwXHUyNTAwIFx1Qzc3Q1x1QkMxOChvbkNsaWNrKSBcdUJDMTRcdUM3NzhcdUI1MjkgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwICovXHJcbiAgICBidG4ub25jbGljayA9IG9wdHMub25DbGljaztcclxuICAgIHJldHVybiBidG47XHJcbiAgfVxyXG5cclxuICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgMi1BLiBQcmVzZXQgQnV0dG9uc1xyXG4gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbiAgLyoqIFx1MjFBQSAqKk9wZW4gRm9sZGVyKiogXHUyMDEzIFx1RDMwQ1x1Qzc3QyBcdUFEMDBcdUI5QUNcdUM3OTBcdUM1RDBcdUMxMUMgXHVEM0Y0XHVCMzU0L1x1RDMwQ1x1Qzc3QyBcdUM1RjRcdUFFMzAgKi9cclxuICBvcGVuRm9sZGVyKHJlbFBhdGg6IHN0cmluZyk6IEhUTUxCdXR0b25FbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XHJcbiAgICAgIGxhYmVsOiBcIlx1MjFBQSBPcGVuIEZvbGRlclwiLFxyXG4gICAgICBjbHMgIDogXCJpbnRlcmFjdGl2ZV90YWJsZS1idXR0b24gaW50ZXJhY3RpdmVfdGFibGUtYnV0dG9uLS1vcGVuLWZvbGRlclwiLFxyXG4gICAgICBvbkNsaWNrOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgLyogRWxlY3Ryb24gXHVENjU4XHVBQ0JEIFx1RDU1Q1x1QzgxNSBcdTIwMTMgXHVDNTQ4XHVDODA0XHVENTU4XHVBQzhDIHRyeS9jYXRjaCAqL1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCB7IHNoZWxsIH0gICA9ICh3aW5kb3cgYXMgYW55KS5yZXF1aXJlKFwiZWxlY3Ryb25cIik7XHJcbiAgICAgICAgICBjb25zdCBwYXRoTW9kICAgICA9ICh3aW5kb3cgYXMgYW55KS5yZXF1aXJlKFwicGF0aFwiKTtcclxuICAgICAgICAgIGNvbnN0IHZhdWx0QmFzZSAgID0gKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgYW55KS5iYXNlUGF0aDtcclxuICAgICAgICAgIGNvbnN0IGFicyAgICAgICAgID0gcGF0aE1vZC5yZXNvbHZlKHZhdWx0QmFzZSwgcmVsUGF0aCk7XHJcbiAgICAgICAgICBjb25zdCBpc0ZpbGUgICAgICA9IHBhdGhNb2QuZXh0bmFtZShhYnMpICE9PSBcIlwiO1xyXG4gICAgICAgICAgaXNGaWxlID8gc2hlbGwuc2hvd0l0ZW1JbkZvbGRlcihhYnMpIDogc2hlbGwub3BlblBhdGgoYWJzKTtcclxuICAgICAgICB9IGNhdGNoIChfKSB7Lyogbm8tb3AgXHUyMDEzIFx1QkFBOFx1QkMxNFx1Qzc3Qy9XZWIgXHVENjU4XHVBQ0JEICovIH1cclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqIFx1RkYwQiAqKk5ldyBub3RlKiogXHUyMDEzIFx1RDBEMFx1QzBDOVx1QUUzMCBcdTIwMThcdUMwQzggXHVEMzBDXHVDNzdDXHUyMDE5IFx1QkE4NVx1QjgzOSBcdUQ2MzhcdUNEOUMgKi9cclxuICBuZXdOb3RlKCk6IEhUTUxCdXR0b25FbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XHJcbiAgICAgIGxhYmVsIDogXCJcdUZGMEIgTmV3IG5vdGVcIixcclxuICAgICAgY2xzICAgOiBcImludGVyYWN0aXZlX3RhYmxlLWJ1dHRvbiBpbnRlcmFjdGl2ZV90YWJsZS1idXR0b24tLW5ldy1ub3RlXCIsXHJcbiAgICAgIG9uQ2xpY2s6ICgpID0+XHJcbiAgICAgICAgKHRoaXMuYXBwIGFzIGFueSkuY29tbWFuZHMuZXhlY3V0ZUNvbW1hbmRCeUlkKFwiZmlsZS1leHBsb3JlcjpuZXctZmlsZVwiKSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqIFx1MjFCQiAqKlJlZnJlc2gqKiBcdTIwMTMgYXN5bmMgXHVDN0FDXHVCODBDXHVCMzU0IFx1Q0Y1Q1x1QkMzMSBcdUM4MDRcdUIyRjQgKi9cclxuICByZWZyZXNoKG9uUmVmcmVzaDogKCkgPT4gUHJvbWlzZTx2b2lkPik6IEhUTUxCdXR0b25FbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XHJcbiAgICAgIGxhYmVsIDogXCJcdTIxQkJcIixcclxuICAgICAgY2xzICAgOiBcImludGVyYWN0aXZlX3RhYmxlLWJ1dHRvbiBpbnRlcmFjdGl2ZV90YWJsZS1idXR0b24tLXJlZnJlc2hcIixcclxuICAgICAgb25DbGljazogb25SZWZyZXNoLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKiogKipUYWcgRmlsdGVyKiogXHUyMDEzIFx1RDYwNFx1QzdBQyBcdUQwRENcdUFERjggXHVENDVDXHVDMkRDICYgXHVDMTIwXHVEMEREIFx1QkFBOFx1QjJFQyAqL1xyXG4gIHRhZ0ZpbHRlcihjdXJUYWc6IHN0cmluZywgb25TZWxlY3Q6ICgpID0+IFByb21pc2U8dm9pZD4pOiBIVE1MQnV0dG9uRWxlbWVudCB7XHJcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoe1xyXG4gICAgICBsYWJlbCAgOiBjdXJUYWcsXHJcbiAgICAgIGNscyAgICA6IFwiaW50ZXJhY3RpdmVfdGFibGUtYnV0dG9uIGludGVyYWN0aXZlX3RhYmxlLWJ1dHRvbi0tdGFnLWZpbHRlclwiLFxyXG4gICAgICBvbkNsaWNrOiBvblNlbGVjdCxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqICoqRnJvbnQtbWF0dGVyIEZpbHRlcioqIFx1MjAxMyBcdUQ1MDRcdUI4NUNcdUQzN0NcdUQyRjBcdUJBODUgXHVENDVDXHVDMkRDICYgXHVDMTIwXHVEMEREIFx1QkFBOFx1QjJFQyAqL1xyXG4gIGZpbHRlcihwcm9wTmFtZTogc3RyaW5nLCBvblNlbGVjdDogKCkgPT4gUHJvbWlzZTx2b2lkPik6IEhUTUxCdXR0b25FbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XHJcbiAgICAgIGxhYmVsICA6IHByb3BOYW1lLFxyXG4gICAgICBjbHMgICAgOiBcImludGVyYWN0aXZlX3RhYmxlLWJ1dHRvbiBpbnRlcmFjdGl2ZV90YWJsZS1maWx0ZXJfX2J0blwiLFxyXG4gICAgICBvbkNsaWNrOiBvblNlbGVjdCxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqICoqUGFnaW5hdGlvbioqIFx1MjAxMyBcdTIwMThcdTIxOTAgLyBcdTIxOTIgLyAxXHUyMDI2XHUyMDE5IFx1QkM4NFx1RDJCQyAoZGlzYWJsZWQgXHVDOUMwXHVDNkQwKSAqL1xyXG4gIHBhZ2luYXRpb24oXHJcbiAgICBsYWJlbCAgICA6IHN0cmluZyxcclxuICAgIGRpc2FibGVkIDogYm9vbGVhbixcclxuICAgIG9uQ2xpY2sgIDogKCkgPT4gYW55LFxyXG4gICk6IEhUTUxCdXR0b25FbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XHJcbiAgICAgIGxhYmVsLFxyXG4gICAgICBjbHMgICAgIDogXCJpbnRlcmFjdGl2ZV90YWJsZS1wYWdpbmF0aW9uX19idG5cIixcclxuICAgICAgZGlzYWJsZWQsXHJcbiAgICAgIG9uQ2xpY2ssXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgXHVEODNEXHVERDBEICBcdUNDMzhcdUFDRTBcclxuICAgICAgXHUwMEI3IFx1QkFBOFx1QjRFMCBcdUI4NUNcdUM5QzFcdUM3NDAgbGVnYWN5IHVpLnRzICgjMi1BIEJ1dHRvbnMpIFx1Qjk3QyBcdUFERjhcdUIzMDBcdUI4NUMgXHVDNzc0XHVDODA0XHVENTg4XHVDMkI1XHVCMkM4XHVCMkU0LiA6Y29udGVudFJlZmVyZW5jZVtvYWljaXRlOjBde2luZGV4PTB9OmNvbnRlbnRSZWZlcmVuY2Vbb2FpY2l0ZToxXXtpbmRleD0xfVxyXG4gICAgICBcdTAwQjcgQnV0dG9uR3JvdXAoXHVDNUVDXHVCN0VDIFx1QkM4NFx1RDJCQ1x1Qzc0NCBcdUI3OThcdUQ1NTEpIFx1Qzc0MCBcdTIwMUN1aS9tb2xlY3VsZXMvQnV0dG9uR3JvdXAudHNcdTIwMURcclxuICAgICAgICBcdUI4NUMgXHVDNzc0XHVCM0Q5XHVCNDE4XHVDNUM4XHVDNzNDXHVCQTcwLCBcdUM1RUNcdUFFMzBcdUMxMUNcdUIyOTQgKipcdUIyRThcdUM3N0MgXHVCQzg0XHVEMkJDIEF0b20qKiBcdUI5Q0MgXHVDODFDXHVBQ0Y1XHVENTY5XHVCMkM4XHVCMkU0LlxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4iLCAiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIHNyYy91aS9hdG9tcy9pbnB1dC50cyBcdTIwMTMgYXV0by1nZW5lcmF0ZWQgZnJvbSBsZWdhY3kgQ292ZXItVGFibGUgdjIwMjUtMDVcclxuICogICBcdTIwMjIgXHVDODA0XHVDQ0I0IFx1Qzc3NFx1QUQwMCBcdUNGNTRcdUI0REMgXHUyMDEzIFx1QzIxOFx1QzgxNSBcdUFFMDhcdUM5QzBcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqICBcdUQ4M0VcdURERTkgSW5wdXQgXHUyMDEzIEF0b20gQ29tcG9uZW50c1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIFx1MDBCNyAqKmlucHV0LnRzKiogaG91c2VzIHVsdHJhLWxpZ2h0d2VpZ2h0IGZhY3RvcmllcyBmb3IgdGhlIHRocmVlXHJcbiAqICAgIHByaW1pdGl2ZSBIVE1MIDwgaW5wdXQgPiB0eXBlcyB0aGF0IEludGVyYWN0aXZlLVRhYmxlIGFuZCBvdGhlclxyXG4gKiAgICBVSSBibG9ja3MgcmVseSBvbjogKip0ZXh0KiosICoqbnVtYmVyKiosIGFuZCAqKmRhdGUqKi5cclxuICogIFx1MDBCNyBBbGwgZnVuY3Rpb25zIHJldHVybiB0aGUgKmV4YWN0KiBIVE1MRWxlbWVudCB0eXBlIHNvXHJcbiAqICAgIGRvd25zdHJlYW0gY29kZSBrZWVwcyBpdHMgc3Ryb25nIHR5cGluZy5cclxuICpcclxuICogIFx1MjVCOCBXaHkgYSBzZXBhcmF0ZSBhdG9tP1xyXG4gKiAgICAgIHVpLnRzIG9yaWdpbmFsbHkgZW1iZWRkZWQgXHUyMDFDIzItQiBFbGVtZW50cyBcdTIwMTMgSW5wdXRzXHUyMDFEIHN1Y2ggYXNcclxuICogICAgICBgU2VhcmNoSW5wdXRgLiBUaG9zZSBzbmlwcGV0cyBhcmUgZXh0cmFjdGVkIHZlcmJhdGltIGFuZFxyXG4gKiAgICAgIGdlbmVyYWxpc2VkIGhlcmUgc28gdGhhdCBldmVyeSBmZWF0dXJlIChHYW50dCwgU2V0dGluZy1UYWIsXHJcbiAqICAgICAgZXRjLikgY2FuIHJldXNlIHRoZSBzYW1lIGlucHV0IGhlbHBlcnMgd2l0aG91dCBkcmFnZ2luZyBpblxyXG4gKiAgICAgIGhlYXZ5IFVJIGxvZ2ljLiA6Y29udGVudFJlZmVyZW5jZVtvYWljaXRlOjBde2luZGV4PTB9OmNvbnRlbnRSZWZlcmVuY2Vbb2FpY2l0ZToxXXtpbmRleD0xfVxyXG4gKlxyXG4gKiAgXHUyNzI4IFF1aWNrIFVzYWdlXHJcbiAqICAgIGBgYHRzXHJcbiAqICAgIGNvbnN0IHR4dCA9IElucHV0LnRleHQoe1xyXG4gKiAgICAgIGNsczogXCJpdC1zZWFyY2hfX2lucHV0XCIsXHJcbiAqICAgICAgcGxhY2Vob2xkZXI6IFwiU2VhcmNoXHUyMDI2XCIsXHJcbiAqICAgICAgdmFsdWU6IFwiZm9vXCIsXHJcbiAqICAgICAgb25FbnRlcjogKCkgPT4gZG9TZWFyY2goKSxcclxuICogICAgfSk7XHJcbiAqXHJcbiAqICAgIGNvbnN0IG51bSA9IElucHV0Lm51bWJlcih7XHJcbiAqICAgICAgbWluOiAwLCBtYXg6IDk5LCBzdGVwOiAxLFxyXG4gKiAgICAgIHZhbHVlOiAxMixcclxuICogICAgICBvbkNoYW5nZTogdiA9PiBjb25zb2xlLmxvZyh2KSxcclxuICogICAgfSk7XHJcbiAqICAgIGBgYFxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbmltcG9ydCB7IERvbSB9IGZyb20gXCIuL2RvbVwiO1xyXG5cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgMS4gVHlwZSBEZWNsYXJhdGlvbnNcclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuZXhwb3J0IGludGVyZmFjZSBCYXNlSW5wdXRPcHRpb25zPFQgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIgfCBEYXRlPiB7XHJcbiAgLyoqIGNsYXNzPVwiXCIgdmFsdWUgKHNwYWNlLXNlcGFyYXRlZCkgICAgICAgICAgICAgICAgICAgICAqL1xyXG4gIGNscz86IHN0cmluZztcclxuICAvKiogcGxhY2Vob2xkZXIgYXR0cmlidXRlICh0ZXh0IGlucHV0IG9ubHkpICAgICAgICAgICAgICAqL1xyXG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xyXG4gIC8qKiBpbml0aWFsIHZhbHVlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXHJcbiAgdmFsdWU/OiBUO1xyXG4gIC8qKiBmaXJlZCBvbiA8RW50ZXI+IGtleSAodGV4dCkgb3Igb24gPGNoYW5nZT4gKG51bS9kYXRlKSovXHJcbiAgb25FbnRlcj86ICh2YWw6IHN0cmluZykgPT4gYW55O1xyXG4gIG9uQ2hhbmdlPzogKHZhbDogVCkgPT4gYW55O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE51bWJlcklucHV0RXh0cmEge1xyXG4gIG1pbj86IG51bWJlcjtcclxuICBtYXg/OiBudW1iZXI7XHJcbiAgc3RlcD86IG51bWJlcjtcclxufVxyXG5cclxuLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAyLiBJbnB1dCBGYWN0b3J5XHJcblx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbmV4cG9ydCBjbGFzcyBJbnB1dCB7XHJcbiAgLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAgIDItQS4gVGV4dCBJbnB1dFxyXG4gIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgc3RhdGljIHRleHQob3B0czogQmFzZUlucHV0T3B0aW9uczxzdHJpbmc+ID0ge30pOiBIVE1MSW5wdXRFbGVtZW50IHtcclxuICAgIGNvbnN0IGVsID0gRG9tLmVsKFwiaW5wdXRcIiwgb3B0cy5jbHMgPz8gXCJcIik7XHJcbiAgICBlbC50eXBlICAgICAgICA9IFwidGV4dFwiO1xyXG4gICAgZWwucGxhY2Vob2xkZXIgPSBvcHRzLnBsYWNlaG9sZGVyID8/IFwiXCI7XHJcbiAgICBpZiAob3B0cy52YWx1ZSAhPSBudWxsKSBlbC52YWx1ZSA9IFN0cmluZyhvcHRzLnZhbHVlKTtcclxuXHJcbiAgICAvKiA8RW50ZXI+IGtleSBcdTIxOTIgb25FbnRlciAqL1xyXG4gICAgaWYgKG9wdHMub25FbnRlcilcclxuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZXYgPT4ge1xyXG4gICAgICAgIGlmIChldi5rZXkgPT09IFwiRW50ZXJcIikgb3B0cy5vbkVudGVyIShlbC52YWx1ZS50cmltKCkpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvKiBjaGFuZ2UgXHUyMTkyIG9uQ2hhbmdlICovXHJcbiAgICBpZiAob3B0cy5vbkNoYW5nZSlcclxuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoKSA9PiBvcHRzLm9uQ2hhbmdlIShlbC52YWx1ZS50cmltKCkpKTtcclxuXHJcbiAgICByZXR1cm4gZWw7XHJcbiAgfVxyXG5cclxuICAvKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gICAgMi1CLiBOdW1iZXIgSW5wdXRcclxuICBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4gIHN0YXRpYyBudW1iZXIoXHJcbiAgICBvcHRzOiBCYXNlSW5wdXRPcHRpb25zPG51bWJlcj4gJiBOdW1iZXJJbnB1dEV4dHJhID0ge30sXHJcbiAgKTogSFRNTElucHV0RWxlbWVudCB7XHJcbiAgICBjb25zdCBlbCA9IERvbS5lbChcImlucHV0XCIsIG9wdHMuY2xzID8/IFwiXCIpO1xyXG4gICAgZWwudHlwZSAgPSBcIm51bWJlclwiO1xyXG4gICAgaWYgKG9wdHMubWluICAhPSBudWxsKSBlbC5taW4gID0gU3RyaW5nKG9wdHMubWluKTtcclxuICAgIGlmIChvcHRzLm1heCAgIT0gbnVsbCkgZWwubWF4ICA9IFN0cmluZyhvcHRzLm1heCk7XHJcbiAgICBpZiAob3B0cy5zdGVwICE9IG51bGwpIGVsLnN0ZXAgPSBTdHJpbmcob3B0cy5zdGVwKTtcclxuICAgIGlmIChvcHRzLnZhbHVlICE9IG51bGwpIGVsLnZhbHVlID0gU3RyaW5nKG9wdHMudmFsdWUpO1xyXG5cclxuICAgIC8qIGNoYW5nZSBcdTIxOTIgb25DaGFuZ2UgKi9cclxuICAgIGlmIChvcHRzLm9uQ2hhbmdlKVxyXG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsICgpID0+XHJcbiAgICAgICAgb3B0cy5vbkNoYW5nZSEoZWwudmFsdWUgPT09IFwiXCIgPyBOYU4gOiBOdW1iZXIoZWwudmFsdWUpKSxcclxuICAgICAgKTtcclxuXHJcbiAgICByZXR1cm4gZWw7XHJcbiAgfVxyXG5cclxuICAvKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gICAgMi1DLiBEYXRlIElucHV0IChZWVlZLU1NLUREKVxyXG4gIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgc3RhdGljIGRhdGUob3B0czogQmFzZUlucHV0T3B0aW9uczxEYXRlIHwgc3RyaW5nPiA9IHt9KTogSFRNTElucHV0RWxlbWVudCB7XHJcbiAgICBjb25zdCBlbCA9IERvbS5lbChcImlucHV0XCIsIG9wdHMuY2xzID8/IFwiXCIpO1xyXG4gICAgZWwudHlwZSAgPSBcImRhdGVcIjtcclxuXHJcbiAgICBpZiAob3B0cy52YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgIGNvbnN0IHZhbCA9XHJcbiAgICAgICAgb3B0cy52YWx1ZSBpbnN0YW5jZW9mIERhdGVcclxuICAgICAgICAgID8gb3B0cy52YWx1ZS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKVxyXG4gICAgICAgICAgOiBTdHJpbmcob3B0cy52YWx1ZSk7XHJcbiAgICAgIGVsLnZhbHVlID0gdmFsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIGNoYW5nZSBcdTIxOTIgb25DaGFuZ2UgKi9cclxuICAgIGlmIChvcHRzLm9uQ2hhbmdlKVxyXG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsICgpID0+XHJcbiAgICAgICAgb3B0cy5vbkNoYW5nZSEoXHJcbiAgICAgICAgICBlbC52YWx1ZSA/IG5ldyBEYXRlKGAke2VsLnZhbHVlfVQwMDowMDowMGApIDogKFwiXCIgYXMgYW55KSxcclxuICAgICAgICApLFxyXG4gICAgICApO1xyXG5cclxuICAgIHJldHVybiBlbDtcclxuICB9XHJcbn1cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgXHVEODNEXHVEQ0NDICBOb3Rlc1xyXG4gICAgICBcdTIwMjIgVGhlc2UgYXRvbXMgYXJlICpsb2dpYy1mcmVlKjogdmFsaWRhdGlvbiBvciBmb3JtYXR0aW5nXHJcbiAgICAgICAgc2hvdWxkIGJlIGhhbmRsZWQgaW4gY2FsbGVyIG1vZHVsZXMuXHJcbiAgICAgIFx1MjAyMiBTdHlsaXN0aWMgcnVsZXMgKHBhZGRpbmcsIGJvcmRlciByYWRpdXMsIGZvY3VzIHJpbmcpIGFyZVxyXG4gICAgICAgIGRlZmluZWQgaW4gYHNyYy90aGVtZS9jc3MvaW50ZXJhY3RpdmUtdGFibGUuY3NzYC5cclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuIiwgIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBzcmMvdWkvYXRvbXMvc3Bpbm5lci50cyBcdTIwMTMgYXV0by1nZW5lcmF0ZWQgZnJvbSBsZWdhY3kgQ292ZXItVGFibGUgdjIwMjUtMDVcclxuICogICBcdTIwMjIgXHVDODA0XHVDQ0I0IFx1Qzc3NFx1QUQwMCBcdUNGNTRcdUI0REMgXHUyMDEzIFx1QzIxOFx1QzgxNSBcdUFFMDhcdUM5QzBcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqICBcdUQ4M0VcdURERTkgU3Bpbm5lciBcdTIwMTMgQXRvbSBDb21wb25lbnRcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBcdTAwQjcgRXh0cmVtZWx5IGxpZ2h0d2VpZ2h0ICoqbG9hZGluZyBpbmRpY2F0b3IqKiB1c2VkIGJ5XHJcbiAqICAgIEludGVyYWN0aXZlXHUyMDExVGFibGUsIEdhbnR0LCBhbmQgU2V0dGluZ1x1MjAxMVRhYiB3aGlsZSB3YWl0aW5nIGZvclxyXG4gKiAgICBhc3luYyB3b3JrIChEYXRhdmlldyBxdWVyaWVzLCBoZWF2eSBET00gZGlmZiwgZXRjLikuXHJcbiAqICBcdTAwQjcgSW1wbGVtZW50YXRpb24gaXMgKipDU1NcdTIwMTFvbmx5Kio6IGEgc2luZ2xlIDxkaXY+IGVsZW1lbnQgd2l0aFxyXG4gKiAgICBjbGFzcyBgLmN0LXNwaW5uZXJgIHdob3NlIHN0eWxlL2FuaW1hdGlvbiBpcyBkZWZpbmVkIGluXHJcbiAqICAgIGBzcmMvdGhlbWUvY3NzL2ludGVyYWN0aXZlLXRhYmxlLmNzc2AuXHJcbiAqXHJcbiAqICAgIC5jdC1zcGlubmVyIHtcclxuICogICAgICB3aWR0aDoxNnB4O2hlaWdodDoxNnB4O2JvcmRlci1yYWRpdXM6NTAlO1xyXG4gKiAgICAgIGJvcmRlcjoycHggc29saWQgdmFyKC0tY3Qtc3Bpbm5lci1iZywjOTk5Mik7XHJcbiAqICAgICAgYm9yZGVyLXRvcC1jb2xvcjp2YXIoLS1jdC1zcGlubmVyLWZnLCM2NjYpO1xyXG4gKiAgICAgIGFuaW1hdGlvbjpjdC1zcGluIDAuNnMgbGluZWFyIGluZmluaXRlO1xyXG4gKiAgICB9XHJcbiAqICAgIEBrZXlmcmFtZXMgY3Qtc3Bpbnt0b3t0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9fVxyXG4gKlxyXG4gKiAgXHUwMEI3IFRoaXMgYXRvbSBleHBvc2VzIGEgZmFjdG9yeSBzbyBldmVyeSBtb2R1bGUgY3JlYXRlcyB0aGUgc2FtZVxyXG4gKiAgICBET00gc3RydWN0dXJlLCBtYWtpbmcgc3R5bGUgb3ZlcnJpZGVzIHRyaXZpYWwuXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuaW1wb3J0IHsgRG9tIH0gZnJvbSBcIi4vZG9tXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3Bpbm5lciB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IHNwaW5uZXIgZWxlbWVudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBzbWFsbCAgIHNldCB0byBgdHJ1ZWAgZm9yIDEyXHUwMEQ3MTIgdmFyaWFudFxyXG4gICAqIEBwYXJhbSBjbHMgICAgIGV4dHJhIGNsYXNzTmFtZShzKSBhcHBlbmRlZCB0byBgLmN0LXNwaW5uZXJgXHJcbiAgICogQHJldHVybnMgICAgICAgSFRNTERpdkVsZW1lbnQgcmVhZHkgZm9yIGluc2VydGlvblxyXG4gICAqL1xyXG4gIHN0YXRpYyBjcmVhdGUoc21hbGwgPSBmYWxzZSwgY2xzID0gXCJcIik6IEhUTUxEaXZFbGVtZW50IHtcclxuICAgIGNvbnN0IHNwaW5uZXIgPSBEb20uZWwoXCJkaXZcIiwgYGN0LXNwaW5uZXIke3NtYWxsID8gXCIgY3Qtc3Bpbm5lci0tc21cIiA6IFwiXCJ9JHtjbHMgPyBcIiBcIiArIGNscyA6IFwiXCJ9YCk7XHJcbiAgICByZXR1cm4gc3Bpbm5lcjtcclxuICB9XHJcblxyXG4gIC8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgICBDb252ZW5pZW5jZSBoZWxwZXJzIG1pcnJvcmluZyBsZWdhY3kgdWkudHMgQVBJXHJcbiAgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuXHJcbiAgLyoqIExlZ2FjeSBhbGlhcyBcdTIwMTMgZGVmYXVsdCAxNlx1MDBENzE2IHNwaW5uZXIgKi9cclxuICBzdGF0aWMgZGVmYXVsdCgpOiBIVE1MRGl2RWxlbWVudCB7XHJcbiAgICByZXR1cm4gU3Bpbm5lci5jcmVhdGUoKTtcclxuICB9XHJcblxyXG4gIC8qKiAxMlx1MDBENzEyIHRpbnkgc3Bpbm5lciAoaW5saW5lIGljb24gc2l6ZSkgKi9cclxuICBzdGF0aWMgdGlueSgpOiBIVE1MRGl2RWxlbWVudCB7XHJcbiAgICByZXR1cm4gU3Bpbm5lci5jcmVhdGUodHJ1ZSk7XHJcbiAgfVxyXG59XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIFx1RDgzRFx1REQwRCAgXHVDQzM4XHVBQ0UwXHJcbiAgICAgIFx1MDBCNyBDU1MgXHVDODE1XHVDNzU4XHVCMjk0IGJhc2UgdGhlbWUgJiBpbnRlcmFjdGl2ZS10YWJsZS5jc3MgXHVCODVDIFx1Qzc3NFx1QjNEOS5cclxuICAgICAgXHUwMEI3IFx1QUNGQ1x1QUM3MCB1aS50cyBcdUM3NTggYGNyZWF0ZVNwaW5uZXIoKWAgXHVENTY4XHVDMjE4IFx1QUQ2Q1x1RDYwNFx1Qzc0NCBcdUFERjhcdUIzMDBcdUI4NUMgXHVDNjJFXHVBQ0E4XHJcbiAgICAgICAgQ2xhc3MgKyBzdGF0aWMgZmFjdG9yeSBcdUQ2MTVcdUQwRENcdUI4NUMgXHVBQzFDXHVDMTIwXHVENTg4XHVDMkI1XHVCMkM4XHVCMkU0LlxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4iLCAiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xyXG5jb25zdCBieXRlVG9IZXggPSBbXTtcclxuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xyXG4gICAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xyXG4gICAgcmV0dXJuIChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArXHJcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gK1xyXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICtcclxuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArXHJcbiAgICAgICAgJy0nICtcclxuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArXHJcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gK1xyXG4gICAgICAgICctJyArXHJcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gK1xyXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICtcclxuICAgICAgICAnLScgK1xyXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICtcclxuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArXHJcbiAgICAgICAgJy0nICtcclxuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gK1xyXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArXHJcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICtcclxuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gK1xyXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArXHJcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpO1xyXG59XHJcbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcclxuICAgIGNvbnN0IHV1aWQgPSB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQpO1xyXG4gICAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xyXG4gICAgICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdXVpZDtcclxufVxyXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7XHJcbiIsICJsZXQgZ2V0UmFuZG9tVmFsdWVzO1xyXG5jb25zdCBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xyXG4gICAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNyeXB0byA9PT0gJ3VuZGVmaW5lZCcgfHwgIWNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBnZXRSYW5kb21WYWx1ZXMgPSBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcclxuICAgIH1cclxuICAgIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xyXG59XHJcbiIsICJjb25zdCByYW5kb21VVUlEID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLnJhbmRvbVVVSUQgJiYgY3J5cHRvLnJhbmRvbVVVSUQuYmluZChjcnlwdG8pO1xyXG5leHBvcnQgZGVmYXVsdCB7IHJhbmRvbVVVSUQgfTtcclxuIiwgImltcG9ydCBuYXRpdmUgZnJvbSAnLi9uYXRpdmUuanMnO1xyXG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcclxuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xyXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xyXG4gICAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcclxuICAgIH1cclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgY29uc3Qgcm5kcyA9IG9wdGlvbnMucmFuZG9tID8/IG9wdGlvbnMucm5nPy4oKSA/PyBybmcoKTtcclxuICAgIGlmIChybmRzLmxlbmd0aCA8IDE2KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSYW5kb20gYnl0ZXMgbGVuZ3RoIG11c3QgYmUgPj0gMTYnKTtcclxuICAgIH1cclxuICAgIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcclxuICAgIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcclxuICAgIGlmIChidWYpIHtcclxuICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcclxuICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxNiA+IGJ1Zi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFVVSUQgYnl0ZSByYW5nZSAke29mZnNldH06JHtvZmZzZXQgKyAxNX0gaXMgb3V0IG9mIGJ1ZmZlciBib3VuZHNgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XHJcbiAgICAgICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBidWY7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KHJuZHMpO1xyXG59XHJcbmV4cG9ydCBkZWZhdWx0IHY0O1xyXG4iLCAiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIHNyYy91aS9tb2xlY3VsZXMvUGFnaW5hdGlvbi50cyBcdTIwMTMgYXV0by1nZW5lcmF0ZWQgZnJvbSBsZWdhY3kgQ292ZXItVGFibGUgdjIwMjUtMDVcclxuICogICBcdTIwMjIgXHVDODA0XHVDQ0I0IFx1Qzc3NFx1QUQwMCBcdUNGNTRcdUI0REMgXHUyMDEzIFx1QzIxOFx1QzgxNSBcdUFFMDhcdUM5QzBcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqICBcdUQ4M0RcdUREMjIgUGFnaW5hdGlvbiBcdTIwMTMgTW9sZWN1bGUgQ29tcG9uZW50XHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgXHUyMDIyIFJlXHUyMDExaW1wbGVtZW50cyBsZWdhY3kgdWkudHMgKCMyXHUyMDExRCBQYWdpbmF0aW9uKSBhcyBhIHN0YW5kYWxvbmVcclxuICogICAgY2xhc3MgdGhhdCBjcmVhdGVzIGFuZCBtYW5hZ2VzIHBhZ2VcdTIwMTFuYXZpZ2F0aW9uIGNvbnRyb2xzIGZvclxyXG4gKiAgICBJbnRlcmFjdGl2ZVx1MjAxMVRhYmxlLlxyXG4gKiAgXHUyMDIyIFdvcmtzIGV4Y2x1c2l2ZWx5IHRocm91Z2ggKipVSVRhYmxlQ2FsbGJhY2tzKiogc28gdGhhdCBpdCBjYW5cclxuICogICAgcmVhZC93cml0ZSBTdGF0ZUNlbnRlciB3aXRob3V0IGRpcmVjdCBpbXBvcnRzLlxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbmltcG9ydCB7IERvbSB9IGZyb20gXCIuLi9hdG9tcy9kb21cIjtcclxuaW1wb3J0IHsgQnV0dG9uRmFjdG9yeSB9IGZyb20gXCIuLi9hdG9tcy9idXR0b25cIjtcclxuaW1wb3J0IHR5cGUgeyBVSVRhYmxlQ2FsbGJhY2tzIH0gZnJvbSBcIi4uL2ludGVyYWN0aXZlLXRhYmxlL1VJTWFuYWdlclwiO1xyXG5cclxuLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAxLiBPcHRpb25zICYgSW50ZXJuYWwgVHlwZXNcclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuZXhwb3J0IGludGVyZmFjZSBQYWdpbmF0aW9uT3B0aW9ucyB7XHJcbiAgcGVyUGFnZSAgICAgOiBudW1iZXI7ICAgLy8gcm93cyBwZXIgcGFnZSAoXHUyMjY1MSlcclxuICB0b3RhbFJvd3MgICA6IG51bWJlcjsgICAvLyBmaWx0ZXJlZCByb3cgY291bnRcclxuICBtYXhCdXR0b25zPyA6IG51bWJlcjsgICAvLyBwYWdlIGJ1dHRvbnMgdG8gc2hvdyAoZGVmYXVsdCA3KVxyXG59XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIDIuIFBhZ2luYXRpb24gQ2xhc3NcclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuZXhwb3J0IGNsYXNzIFBhZ2luYXRpb24ge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgd3JhcCAgICAgICA6IEhUTUxEaXZFbGVtZW50O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgYnRuRmFjdG9yeSA6IEJ1dHRvbkZhY3Rvcnk7XHJcbiAgcHJpdmF0ZSB0b3RhbFBhZ2VzICAgICAgICAgIDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbm90ZSA6IHN0cmluZyxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdmlkICA6IHN0cmluZyxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2IgICA6IFVJVGFibGVDYWxsYmFja3MsXHJcbiAgICBob3N0ICAgICAgICAgICAgICAgICAgOiBIVE1MRWxlbWVudCwgICAgICAgIC8vIGNvbnRhaW5lciBiZWxvdyB0YWJsZVxyXG4gICAgb3B0cyAgICAgICAgICAgICAgICAgIDogUGFnaW5hdGlvbk9wdGlvbnMsXHJcbiAgKSB7XHJcbiAgICB0aGlzLmJ0bkZhY3RvcnkgPSBuZXcgQnV0dG9uRmFjdG9yeShjYiBhcyBhbnkpO1xyXG5cclxuICAgIC8qIFx1QUNDNFx1QzBCMCAqL1xyXG4gICAgY29uc3QgcGVyID0gTWF0aC5tYXgob3B0cy5wZXJQYWdlLCAxKTtcclxuICAgIHRoaXMudG90YWxQYWdlcyA9IE1hdGguY2VpbChvcHRzLnRvdGFsUm93cyAvIHBlcik7XHJcbiAgICBpZiAodGhpcy50b3RhbFBhZ2VzIDw9IDEpIHtcclxuICAgICAgdGhpcy53cmFwID0gRG9tLmVsKFwiZGl2XCIpO1xyXG4gICAgICByZXR1cm47ICAgICAgICAgIC8vIFx1RDU0NFx1QzY5NCBcdUM1QzZcdUM3NENcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLndyYXAgPSBEb20uZWwoXCJkaXZcIiwgXCJjdC1wYWdpbmF0aW9uXCIpO1xyXG4gICAgaG9zdC5hcHBlbmRDaGlsZCh0aGlzLndyYXApO1xyXG5cclxuICAgIHRoaXMucmVuZGVyKG9wdHMubWF4QnV0dG9ucyA/PyA3KTtcclxuICB9XHJcblxyXG4gIC8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgICByZW5kZXIoKSBcdTIwMTMgKHJlKWNyZWF0ZSBidXR0b25zIHNldFxyXG4gIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgcHJpdmF0ZSByZW5kZXIobWF4QnRuOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMud3JhcC5lbXB0eSgpO1xyXG5cclxuICAgIGNvbnN0IGtleSAgID0gYHBhZ2luYXRpb25fJHt0aGlzLnZpZH1gO1xyXG4gICAgY29uc3QgY3VyICAgPSAodGhpcy5jYi5nZXRTdGF0ZSBhcyBhbnkpKHRoaXMubm90ZSwgdGhpcy52aWQsIGtleSkgPz8gMDtcclxuXHJcbiAgICAvKiBoZWxwZXIgdG8gYWRkIGJ1dHRvbiAqL1xyXG4gICAgY29uc3QgYWRkID0gKGxibDogc3RyaW5nLCBwZzogbnVtYmVyLCBkaXNhYmxlZCA9IGZhbHNlKSA9PiB7XHJcbiAgICAgIGNvbnN0IGJ0biA9IHRoaXMuYnRuRmFjdG9yeS5wYWdpbmF0aW9uKGxibCwgZGlzYWJsZWQsICgpID0+IHtcclxuICAgICAgICB0aGlzLmNiLnN5bmModGhpcy5ub3RlLCB0aGlzLnZpZCwga2V5LCBwZyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKiBcdTI1QkNcdTI1QkNcdTI1QkMgXHVDNUVDXHVBRTMwIFx1RDU1QyBcdUM5MDQgXHUyMDEzIFx1RDY1NFx1QzBCNFx1RDQ1Q1x1QkE3NCBhcnJvdywgXHVDNTQ0XHVCMkM4XHVCQTc0IG51bSBcdUQwNzRcdUI3OThcdUMyQTQgXHVCRDgwXHVDNUVDIFx1MjVCQ1x1MjVCQ1x1MjVCQyAqL1xyXG4gIGJ0bi5jbGFzc0xpc3QuYWRkKCBsYmwgPT09IFwiXHUyMTkwXCIgfHwgbGJsID09PSBcIlx1MjE5MlwiXHJcbiAgICA/IFwiaW50ZXJhY3RpdmVfdGFibGUtcGFnaW5hdGlvbl9fYnRuLS1hcnJvd1wiXHJcbiAgICA6IFwiaW50ZXJhY3RpdmVfdGFibGUtcGFnaW5hdGlvbl9fYnRuLS1udW1cIiApO1xyXG5cclxuICAgIGlmIChkaXNhYmxlZCkgYnRuLmNsYXNzTGlzdC5hZGQoXCJpcy1hY3RpdmVcIik7XHJcbiAgICAgIHRoaXMud3JhcC5hcHBlbmRDaGlsZChidG4pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiBcdTIxOTAgUHJldiAqL1xyXG4gICAgYWRkKFwiXHUyMTkwXCIsIGN1ciAtIDEsIGN1ciA9PT0gMCk7XHJcblxyXG4gICAgLyogbnVtYmVyZWQgYnV0dG9ucyB3aXRoIHdpbmRvd2luZyAqL1xyXG4gICAgY29uc3Qgd2luID0gTWF0aC5tYXgoMywgbWF4QnRuKTtcclxuICAgIGxldCBzdGFydCA9IE1hdGgubWF4KDAsIGN1ciAtIE1hdGguZmxvb3Iod2luIC8gMikpO1xyXG4gICAgbGV0IGVuZCAgID0gc3RhcnQgKyB3aW4gLSAxO1xyXG4gICAgaWYgKGVuZCA+PSB0aGlzLnRvdGFsUGFnZXMpIHtcclxuICAgICAgZW5kICAgPSB0aGlzLnRvdGFsUGFnZXMgLSAxO1xyXG4gICAgICBzdGFydCA9IE1hdGgubWF4KDAsIGVuZCAtIHdpbiArIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzdGFydCA+IDApIGFkZChcIjFcIiwgMCk7XHJcbiAgICBpZiAoc3RhcnQgPiAxKSB0aGlzLndyYXAuYXBwZW5kQ2hpbGQoRG9tLmVsKFwic3BhblwiLCBcImN0LXBhZ2luYXRpb25fX2VsbGlwc2lzXCIsIFwiXHUyMDI2XCIpKTtcclxuXHJcbiAgICBmb3IgKGxldCBwID0gc3RhcnQ7IHAgPD0gZW5kOyBwKyspIHtcclxuICAgICAgYWRkKFN0cmluZyhwICsgMSksIHAsIHAgPT09IGN1cik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVuZCA8IHRoaXMudG90YWxQYWdlcyAtIDIpIHRoaXMud3JhcC5hcHBlbmRDaGlsZChEb20uZWwoXCJzcGFuXCIsIFwiY3QtcGFnaW5hdGlvbl9fZWxsaXBzaXNcIiwgXCJcdTIwMjZcIikpO1xyXG4gICAgaWYgKGVuZCA8IHRoaXMudG90YWxQYWdlcyAtIDEpIGFkZChTdHJpbmcodGhpcy50b3RhbFBhZ2VzKSwgdGhpcy50b3RhbFBhZ2VzIC0gMSk7XHJcblxyXG4gICAgLyogXHUyMTkyIE5leHQgKi9cclxuICAgIGFkZChcIlx1MjE5MlwiLCBjdXIgKyAxLCBjdXIgPj0gdGhpcy50b3RhbFBhZ2VzIC0gMSk7XHJcbiAgfVxyXG59XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIFx1RDgzRFx1RENDQyAgTm90ZXNcclxuICAgICAgXHUyMDIyIFN0YXRlIGtleSBuYW1pbmcgdW5jaGFuZ2VkLCBndWFyYW50ZWVpbmcgYmFja3dhcmRcdTIwMTFjb21wYXQuXHJcbiAgICAgIFx1MjAyMiBObyBkaXJlY3QgRE9NIHN0eWxlIGhlcmUgXHUyMDEzIENTUyBsaXZlcyBpbiBpbnRlcmFjdGl2ZVx1MjAxMXRhYmxlLmNzcy5cclxuICAgICAgXHUyMDIyIFVzZXMgQnV0dG9uRmFjdG9yeS5wYWdpbmF0aW9uKCkgZm9yIGNvbnNpc3RlbnQgbG9vayAmIGZlZWwuXHJcblx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiIsICIvKiogIFx1QzVCNFx1QjVBMFx1RDU1QyBcdUQwRENcdUFERjggXHVEMEMwXHVDNzg1XHVDNzc0IFx1QjRFNFx1QzVCNFx1QzY0MFx1QjNDNCBgc3RyaW5nYCBcdUM3M0NcdUI4NUMgXHVDODE1XHVBRERDXHVENjU0ICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1RhZ1N0cmluZyhyYXc6IGFueSk6IHN0cmluZyB7XHJcbiAgaWYgKHJhdyA9PSBudWxsKSAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICBpZiAodHlwZW9mIHJhdyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHJhdy50cmltKCk7XHJcbiAgaWYgKHJhdyBpbnN0YW5jZW9mIFNldCkgICByZXR1cm4gWy4uLnJhd11bMF0gPz8gXCJcIjtcclxuICBpZiAoQXJyYXkuaXNBcnJheShyYXcpKSAgIHJldHVybiByYXdbMF0gPz8gXCJcIjtcclxuICBpZiAodHlwZW9mIHJhdyA9PT0gXCJvYmplY3RcIiAmJiBcInRhZ1wiIGluIHJhdykgcmV0dXJuIFN0cmluZyhyYXcudGFnKTtcclxuICByZXR1cm4gU3RyaW5nKHJhdykudHJpbSgpO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKiByYXcodGFnIHwgdGFnW10pIFx1MjE5MiBcdTIwMUNcdUM4MTVcdUI4MkNcdTAwQjdcdUQ0NUNcdUMyRENcdUM2QTlcdTIwMUQgXHVDMjFDXHVDMjE4IFx1QkIzOFx1Qzc5MFx1QzVGNCBcdUJDMzBcdUM1RjQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVRhZ3MocmF3OiBhbnkpOiBzdHJpbmdbXSB7XHJcbiAgY29uc3QgYXJyOiBzdHJpbmdbXSA9XHJcbiAgICAgIHJhdyA9PSBudWxsICAgICAgICAgICAgID8gW11cclxuICAgIDogQXJyYXkuaXNBcnJheShyYXcpICAgICAgPyByYXdcclxuICAgIDogcmF3IGluc3RhbmNlb2YgU2V0ICAgICAgPyBbLi4ucmF3XVxyXG4gICAgOiB0eXBlb2YgcmF3ID09PSBcInN0cmluZ1wiID8gcmF3LnNwbGl0KC9bLDtdLykuZmlsdGVyKEJvb2xlYW4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW107XHJcblxyXG4gIHJldHVybiBhcnJcclxuICAgIC5tYXAodCA9PiAodCA/PyBcIlwiKS50cmltKCkpXHJcbiAgICAuZmlsdGVyKEJvb2xlYW4pXHJcbiAgICAubWFwKHQgPT4gdC5zdGFydHNXaXRoKFwiI1wiKSA/IHQuc2xpY2UoMSkgOiB0KTsgICAgLy8gXHUyMDFDI1x1MjAxRCBcdUM4MUNcdUFDNzBcclxufVxyXG5cclxuLyoqIHRhZ3MgXHVDNzU4IFx1Q0NBQiBcdUQ1NkRcdUJBQTlcdUM3NDQgXHVDODE1XHVCODJDXHVEMEE0XHVCODVDIFx1MjE5MiBbZ3JwLCBsb3dlciwgb3JpZ2luYWxdIFx1RDI5Q1x1RDUwQyBcdUJDMThcdUQ2NTggKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRhZ0tleShyYXc6IGFueSk6IFtudW1iZXIsc3RyaW5nLHN0cmluZ10ge1xyXG4gIGNvbnN0IGZpcnN0ID0gbm9ybWFsaXplVGFncyhyYXcpXHJcbiAgICAgICAgICAgICAgICAgLnNvcnQoKGEsYik9PmEubG9jYWxlQ29tcGFyZShiLFwia29cIikpWzBdID8/IFwiXCI7XHJcbiAgcmV0dXJuIFswLCBmaXJzdC50b0xvd2VyQ2FzZSgpLCBmaXJzdF07ICAgICAgICAgICAgIC8vIGdycD0wIChcdUQxNERcdUMyQTRcdUQyQjhcdUM2NDAgXHVCM0Q5XHVDNzdDKVxyXG59XHJcblxyXG4iLCAiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIHNyYy91aS9sYXlvdXRzL0RhdGFUYWJsZS50cyBcdTIwMTMgYXV0by1nZW5lcmF0ZWQgZnJvbSBsZWdhY3kgQ292ZXItVGFibGUgdjIwMjUtMDVcclxuICogICBcdTIwMjIgXHVDODA0XHVDQ0I0IFx1Qzc3NFx1QUQwMCBcdUNGNTRcdUI0REMgXHUyMDEzIFx1QzIxOFx1QzgxNSBcdUFFMDhcdUM5QzBcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqICBcdUQ4M0RcdURDQ0EgRGF0YVRhYmxlIFx1MjAxMyBMYXlvdXQgQ29tcG9uZW50IChPcmdhbmlzbSlcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBcdTIwMjIgUHVyZSBsYXlvdXQgd3JhcHBlciByZXNwb25zaWJsZSBmb3IgYnVpbGRpbmcgdGhlIERPTVxyXG4gKiAgICBzdHJ1Y3R1cmUgb2YgdGhlICoqaW50ZXJhY3RpdmUgdGFibGUqKiB3aGlsc3QgZGVsZWdhdGluZyBhbnlcclxuICogICAgYmVoYXZpb3VyYWwgbG9naWMgKHNvcnRpbmcsIGZpbHRlcmluZywgc3RhdGUtc3luYykgYmFjayB0b1xyXG4gKiAgICBVSU1hbmFnZXIgLyBDb250cm9sbGVyLlxyXG4gKlxyXG4gKiAgXHUyMDIyIEFjY2VwdHMgcmF3IHJvd3MgKyBDb2x1bW5EZWYgbWV0YSBhbmQgb3V0cHV0cyBhIDx0YWJsZT5cclxuICogICAgZWxlbWVudCB3aXRoIHNlbWFudGljIGNsYXNzIG5hbWVzIHNvIHRoZW1lIENTUyBjYW4gc3R5bGUgaXRcclxuICogICAgY29uc2lzdGVudGx5IChzZWUgYGludGVyYWN0aXZlLXRhYmxlLmNzc2ApLlxyXG4gKlxyXG4gKiAgXHUyMDIyIFRoaXMgZmlsZSBwdXJwb3NlZnVsbHkgY29udGFpbnMgKip6ZXJvIE9ic2lkaWFuIEFQSSB1c2FnZSoqXHJcbiAqICAgIHNvIHRoYXQgaXQgY2FuIGJlIHJlbmRlcmVkIGluIHBvcC11cHMgLyBSZWFjdCBwcmV2aWV3cyBvciBldmVuXHJcbiAqICAgIHNlcnZlci1zaWRlIHRlc3RzLlxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbmltcG9ydCB7IERvbSB9IGZyb20gXCIuLi9hdG9tcy9kb21cIjtcclxuaW1wb3J0IHR5cGUgeyBDb2x1bW5EZWYgfSBmcm9tIFwiLi4vLi4vZmVhdHVyZXMvaW50ZXJhY3RpdmUtdGFibGUvdHlwZXNcIjtcclxuaW1wb3J0IHsgbm9ybWFsaXplVGFncyB9IGZyb20gXCIuLi8uLi9mZWF0dXJlcy9pbnRlcmFjdGl2ZS10YWJsZS91dGlscy90YWdcIjtcclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgMS4gVHlwZSBEZWNsYXJhdGlvbnNcclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuZXhwb3J0IGludGVyZmFjZSBEYXRhVGFibGVPcHRpb25zIHtcclxuICAvKiogVmlzaWJsZSBjb2x1bW5zIGxpc3QgKENvbHVtbkRlZi5jb2x1bW4gPT09IHRydWUpICovXHJcbiAgY29sdW1ucyA6IENvbHVtbkRlZltdO1xyXG4gIC8qKiBSb3cgb2JqZWN0cyBjb21pbmcgZnJvbSBJbnRlcmFjdGl2ZVRhYmxlTW9kZWwuZGlzcGxheVJvd3MgKi9cclxuICByb3dzICAgIDogYW55W107XHJcbiAgLyoqXHJcbiAgICogT3B0aW9uYWwgY2VsbCByZW5kZXJlci4gSWYgb21pdHRlZCwgRGF0YVRhYmxlIGZhbGxzIGJhY2sgdG9cclxuICAgKiBzaW1wbGUgc3RyaW5naWZpY2F0aW9uIHdpdGggZGF0ZSBmb3JtYXR0aW5nIGlkZW50aWNhbCB0b1xyXG4gICAqIEludGVyYWN0aXZlVGFibGVNb2RlbC5nZXRWYWwoKS5cclxuICAgKi9cclxuICBjZWxsUmVuZGVyZXI/OiAocm93OiBhbnksIGNvbDogQ29sdW1uRGVmKSA9PiBzdHJpbmcgfCBIVE1MRWxlbWVudDtcclxuICAvKiogQ2xpY2sgY2FsbGJhY2sgZm9yIGVudGlyZSA8dHI+LiAqL1xyXG4gIG9uUm93Q2xpY2s/OiAocm93OiBhbnksIGluZGV4OiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgLyoqIFRydWUgXHUyMUQyIHplYnJhIHN0cmlwaW5nIHZpYSBDU1MgOm50aC1jaGlsZChldmVuKS4gKi9cclxuICB6ZWJyYT86IGJvb2xlYW47XHJcbiAgLyogXHUyNUJDIFx1QzgxNVx1QjgyQ1x1QzZBOSBcdUJBNTRcdUQwQzAgXHUyMDEzIFVJTWFuYWdlciBcdUFDMDAgXHVDODA0XHVCMkVDICovXHJcbiAgbm90ZVBhdGggOiBzdHJpbmc7XHJcbiAgdmlld0lkICAgOiBzdHJpbmc7XHJcbiAgY2IgICAgICAgOiB7XHJcbiAgICBnZXRTdGF0ZSA6IChub3RlOnN0cmluZywgdmlkOnN0cmluZywga2V5OnN0cmluZykgPT4gYW55O1xyXG4gICAgc3luYyAgICAgOiAobm90ZTpzdHJpbmcsIHZpZDpzdHJpbmcsIGtleTpzdHJpbmcsIHZhbDphbnkpID0+IHZvaWQ7XHJcbiAgfTtcclxuXHJcbn1cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgMi4gVXRpbGl0eSBcdTIwMTMgZ2V0VmFsIG1pcnJvciAoa2VwdCBoZXJlIGZvciBTU1IgcHVyaXR5KVxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5mdW5jdGlvbiBwYWQobjpudW1iZXIpe3JldHVybiBuLnRvU3RyaW5nKCkucGFkU3RhcnQoMixcIjBcIik7fVxyXG5mdW5jdGlvbiBmbXREYXRlKGQ6RGF0ZSl7cmV0dXJuIGAke2QuZ2V0RnVsbFllYXIoKX0tJHtwYWQoZC5nZXRNb250aCgpKzEpfS0ke3BhZChkLmdldERhdGUoKSl9YDt9XHJcblxyXG5mdW5jdGlvbiByZW5kZXJUYWdzKHJhdzphbnkpOiBIVE1MRWxlbWVudCB7XHJcbiAgY29uc3Qgd3JhcCA9IERvbS5lbChcInNwYW5cIiwgXCJcIik7XHJcbiAgY29uc3QgdGFncyA9IG5vcm1hbGl6ZVRhZ3MocmF3KS5zb3J0KChhLGIpPT5hLmxvY2FsZUNvbXBhcmUoYixcImtvXCIpKTtcclxuICB0YWdzLmZvckVhY2goKHQsIGkpID0+IHtcclxuICAgIGNvbnN0IHNwYW4gPSBEb20uZWwoXCJzcGFuXCIsIFwiY3QtdGFnXCIsIHQpO1xyXG4gICAgY29uc3QgcHJlZml4ID0gdC5zcGxpdChcIi9cIilbMF07XHJcbiAgICBzcGFuLmNsYXNzTGlzdC5hZGQoYGN0LXRhZy0tJHtwcmVmaXh9YCk7XHJcbiAgICB3cmFwLmFwcGVuZENoaWxkKHNwYW4pO1xyXG4gICAgaWYgKGkgPCB0YWdzLmxlbmd0aCAtIDEpIHdyYXAuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCIsIFwiKSk7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIHdyYXA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckJ5Rm9ybWF0KHJhdzphbnksIGZtdD86c3RyaW5nKTogc3RyaW5nIHwgSFRNTEVsZW1lbnQge1xyXG4gIGlmIChyYXcgPT0gbnVsbCkgcmV0dXJuIFwiXCI7XHJcblxyXG4gIHN3aXRjaChmbXQpe1xyXG4gICAgY2FzZSBcIm51bVwiOiAgIHJldHVybiBTdHJpbmcocmF3KTtcclxuICAgIGNhc2UgXCJ5ZWFyXCI6IHtcclxuICAgICAgY29uc3QgeSA9IFN0cmluZyhyYXcpLm1hdGNoKC9cXGR7NH0vKT8uWzBdO1xyXG4gICAgICByZXR1cm4geSA/PyBTdHJpbmcocmF3KTtcclxuICAgIH1cclxuICAgIGNhc2UgXCJkYXRlXCI6IHtcclxuICAgICAgY29uc3QgZCA9IG5ldyBEYXRlKHJhdyk7XHJcbiAgICAgIHJldHVybiBpc05hTihkLmdldFRpbWUoKSkgPyBTdHJpbmcocmF3KSA6IGZtdERhdGUoZCk7XHJcbiAgICB9XHJcbiAgICBjYXNlIFwidGFnc1wiOiB7XHJcbiAgcmV0dXJuIHJlbmRlclRhZ3MocmF3KTtcclxuICAgIH1cclxuICAgIGRlZmF1bHQ6ICAgICAvLyB0ZXh0XHJcbiAgICAgIHJldHVybiBTdHJpbmcocmF3KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFZhbChyb3c6IGFueSwgcHJvcDogc3RyaW5nKTogYW55IHtcclxuICByZXR1cm4gcHJvcC5zdGFydHNXaXRoKFwiZmlsZS5cIilcclxuICAgID8gcHJvcC5zcGxpdChcIi5cIikucmVkdWNlKCh2LCBrKSA9PiB2Py5ba10sIHJvdylcclxuICAgIDogcm93W3Byb3BdO1xyXG59XHJcblxyXG4vKiBEYXRlIGhlbHBlcnMgaWRlbnRpY2FsIHRvIE1vZGVsIGZvciBjb25zaXN0ZW50IGZvcm1hdHRpbmcgKi9cclxuY29uc3QgWU1EID0gL15cXGR7NH0tXFxkezEsMn0tXFxkezEsMn0kLztcclxuZnVuY3Rpb24gZm9ybWF0RGF0ZSh2OiBhbnkpOiBzdHJpbmcge1xyXG4gIGlmICh2ID09IG51bGwpIHJldHVybiBcIlwiO1xyXG4gIGNvbnN0IHMgPSBTdHJpbmcodik7XHJcbiAgaWYgKCFZTUQudGVzdChzKSkgcmV0dXJuIHM7XHJcbiAgY29uc3QgW3ksIG0sIGRdID0gcy5zcGxpdChcIi1cIikubWFwKE51bWJlcik7XHJcbiAgcmV0dXJuIGAke3l9LSR7bSA8IDEwID8gXCIwXCIgOiBcIlwifSR7bX0tJHtkIDwgMTAgPyBcIjBcIiA6IFwiXCJ9JHtkfWA7XHJcbn1cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgMy4gRGF0YVRhYmxlIENsYXNzIChzdGF0aWMgYnVpbGQgaGVscGVyKVxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgY2xhc3MgRGF0YVRhYmxlIHtcclxuICAvKipcclxuICAgKiBCdWlsZCBhIGNvbXBsZXRlIDx0YWJsZT4gZWxlbWVudCBhY2NvcmRpbmcgdG8gb3B0aW9ucy5cclxuICAgKi9cclxuICBzdGF0aWMgYnVpbGQob3B0czogRGF0YVRhYmxlT3B0aW9ucyk6IEhUTUxUYWJsZUVsZW1lbnQge1xyXG4gICAgY29uc3QgdGFibGUgPSBEb20uZWwoXCJ0YWJsZVwiLCBcImN0LWRhdGEtdGFibGVcIikgYXMgSFRNTFRhYmxlRWxlbWVudDtcclxuICAgIGlmIChvcHRzLnplYnJhKSB0YWJsZS5jbGFzc0xpc3QuYWRkKFwiY3QtZGF0YS10YWJsZS0temVicmFcIik7XHJcblxyXG4gICAgLyogXHUyNTAwXHUyNTAwIHRoZWFkIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgICBjb25zdCB0aGVhZCA9IERvbS5lbChcInRoZWFkXCIsIFwiXCIpO1xyXG4gICAgY29uc3QgdHJIZWFkID0gRG9tLmVsKFwidHJcIiwgXCJcIik7XHJcbiAgICAvLyBvcHRzLmNvbHVtbnMuZmlsdGVyKGMgPT4gYy5jb2x1bW4pLmZvckVhY2goY29sID0+IHtcclxuICAgIC8vICAgdHJIZWFkLmFwcGVuZENoaWxkKERvbS5lbChcInRoXCIsIFwiY3QtZGF0YS10YWJsZV9fdGhcIiwgY29sLm5hbWUpKTtcclxuICAgIC8vIH0pO1xyXG4gICAgb3B0cy5jb2x1bW5zLmZpbHRlcihjID0+IGMuY29sdW1uKS5mb3JFYWNoKGNvbCA9PiB7XHJcbiAgICAgIGNvbnN0IHRoID0gRG9tLmVsKFwidGhcIiwgXCJjdC1kYXRhLXRhYmxlX190aFwiLCBjb2wubmFtZSk7XHJcblxyXG4gICAgICAvKiA9PT09PSBcdUJDMTRcdUI4NUMgXHVDNTQ0XHVCNzk4XHVDNUQwIFx1Q0Q5NFx1QUMwMCA9PT09PSAqL1xyXG4gICAgICBjb25zdCBjdXJQcm9wID0gb3B0cy5jYi5nZXRTdGF0ZShvcHRzLm5vdGVQYXRoLCBvcHRzLnZpZXdJZCwgYHNvcnRfJHtvcHRzLnZpZXdJZH1gKTtcclxuICAgICAgY29uc3QgY3VyRGlyICA9IG9wdHMuY2IuZ2V0U3RhdGUob3B0cy5ub3RlUGF0aCwgb3B0cy52aWV3SWQsIGBzb3J0X2RpcmVjdGlvbl8ke29wdHMudmlld0lkfWApO1xyXG4gICAgICBpZiAoY29sLnByb3AgPT09IGN1clByb3ApIHtcclxuICAgICAgICBpZiAoY3VyRGlyID09PSBcImFzY1wiKSAgdGguY2xhc3NMaXN0LmFkZChcImlzLWFzY1wiKTtcclxuICAgICAgICBpZiAoY3VyRGlyID09PSBcImRlc2NcIikgdGguY2xhc3NMaXN0LmFkZChcImlzLWRlc2NcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qIFx1MjUwMFx1MjUwMCBcdUM4MTVcdUI4MkMgXHVEMDc0XHVCOUFEIFx1RDU3OFx1QjRFNFx1QjdFQyBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuICAgICAgdGguYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuXHJcbiAgICAgIC8qIFx1QkFBOFx1QjRFMCBcdUQ1RTRcdUIzNTRcdUM1RDBcdUMxMUMgXHVDNzc0XHVDODA0IFx1QzBDMVx1RDBEQyBcdUM4MUNcdUFDNzAgKi9cclxuICAgICAgdHJIZWFkLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY3QtZGF0YS10YWJsZV9fdGhcIilcclxuICAgICAgICAgICAgLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LnJlbW92ZShcImlzLWFzY1wiLFwiaXMtZGVzY1wiKSk7XHJcblxyXG5cclxuXHJcbiAgICAgIFxyXG4vKiBcdTI1MDBcdTI1MDBcdTI1MDAgXHVBRTMwXHVDODc0IFx1Q0Y1NFx1QjREQyBrZWVwIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCAqL1xyXG4gIGNvbnN0IGtleVNvcnQgPSBgc29ydF8ke29wdHMudmlld0lkfWA7XHJcbiAgY29uc3Qga2V5RGlyICA9IGBzb3J0X2RpcmVjdGlvbl8ke29wdHMudmlld0lkfWA7XHJcblxyXG4gIGNvbnN0IGN1clByb3AgPSBvcHRzLmNiLmdldFN0YXRlKG9wdHMubm90ZVBhdGgsIG9wdHMudmlld0lkLCBrZXlTb3J0KTtcclxuICBjb25zdCBjdXJEaXIgID0gb3B0cy5jYi5nZXRTdGF0ZShvcHRzLm5vdGVQYXRoLCBvcHRzLnZpZXdJZCwga2V5RGlyKTtcclxuXHJcbiAgLyogXHVBRTMwXHVDODc0IFx1QzEyMFx1QzVCOCBcdUFERjhcdUIzMDBcdUI4NUMgKi9cclxubGV0IG5leHRQcm9wOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxubGV0IG5leHREaXI6ICBcImFzY1wiIHwgXCJkZXNjXCIgfCBudWxsID0gbnVsbDtcclxuXHJcbmNvbnN0IGFueVNvcnRlZCA9IGN1clByb3AgJiYgY3VyRGlyOyAgICAgLy8gXHVENjA0XHVDN0FDIFx1QzVGNFx1Qzc3NFx1QjRFMCBcdUIyRTRcdUI5NzggXHVDNUY0XHVDNzc0XHVCNEUwIFx1QzgxNVx1QjgyQyBcdUM5MTFcdUM3NzhcdUFDMDA/XHJcblxyXG5pZiAoY29sLnByb3AgIT09IGN1clByb3ApIHsgICAgICAgICAgICAgIC8vIFx1MjUwMFx1MjUwMCBcdUIyRTRcdUI5NzggXHVDNUY0XHVDNzQ0IFx1QjIwQ1x1QjgwMFx1QjJFNFxyXG4gIGlmIChhbnlTb3J0ZWQpIHsgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1MjQ2MCBcdUM3NzRcdUJCRjggXHVDODE1XHVCODJDIFx1QzkxMVx1Qzc3NFx1QkE3NCBcdTIwMUNcdUNEMDhcdUFFMzBcdUQ2NTRcdTIwMURcdUI5Q0NcclxuICAgIG5leHRQcm9wID0gbnVsbDtcclxuICAgIG5leHREaXIgID0gbnVsbDsgICAgICAgICAgICAgICAgICAgICAvLyAgICg9IFx1QzgwNFx1Q0NCNCByZXNldClcclxuICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTI0NjEgXHVDNTQ0XHVCQjM0IFx1QzgxNVx1QjgyQ1x1QjNDNCBcdUM1QzZcdUM3NDQgXHVCNTRDXHVCMjk0IEFTQyBcdUMyRENcdUM3OTFcclxuICAgIG5leHRQcm9wID0gY29sLnByb3A7XHJcbiAgICBuZXh0RGlyICA9IFwiYXNjXCI7XHJcbiAgfVxyXG59IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1MjUwMFx1MjUwMCBcdUFDMTlcdUM3NDAgXHVDNUY0IFx1QkMxOFx1QkNGNSBcdUQwNzRcdUI5QURcclxuICBpZiAoY3VyRGlyID09PSBudWxsKSAgICAgICAgeyBuZXh0UHJvcCA9IGNvbC5wcm9wOyBuZXh0RGlyID0gXCJhc2NcIjsgIH0gLy8gXHVCMzAwXHVBRTMwIFx1MjE5MiBBU0NcclxuICBlbHNlIGlmIChjdXJEaXIgPT09IFwiYXNjXCIpICB7IG5leHRQcm9wID0gY29sLnByb3A7IG5leHREaXIgPSBcImRlc2NcIjsgfSAvLyBBU0MgIFx1MjE5MiBERVNDXHJcbiAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgIHsgbmV4dFByb3AgPSBudWxsOyAgICAgbmV4dERpciA9IG51bGw7ICAgfSAvLyBERVNDIFx1MjE5MiByZXNldFxyXG59XHJcblxyXG5cclxuLyogXHUyNDYyIFx1QUNDNFx1QzBCMFx1QjQxQyBuZXh0RGlyIFx1QzczQ1x1Qjg1QyBcdUQwNzRcdUI3OThcdUMyQTQgXHVCMkVDXHVBRTMwICovXHJcbiAgaWYgKG5leHREaXIgPT09IFwiYXNjXCIpICB0aC5jbGFzc0xpc3QuYWRkKFwiaXMtYXNjXCIpO1xyXG4gIGlmIChuZXh0RGlyID09PSBcImRlc2NcIikgdGguY2xhc3NMaXN0LmFkZChcImlzLWRlc2NcIik7XHJcblxyXG4vKiBcdTI0NjMgXHVDMEMxXHVEMERDIFx1QzgwMFx1QzdBNSAmIFx1QjlBQ1x1QjgwQ1x1QjM1NCBcdUQyQjhcdUI5QUNcdUFDNzAgKi9cclxuICBvcHRzLmNiLnN5bmMob3B0cy5ub3RlUGF0aCwgb3B0cy52aWV3SWQsIGtleVNvcnQsIG5leHRQcm9wKTtcclxuICBvcHRzLmNiLnN5bmMob3B0cy5ub3RlUGF0aCwgb3B0cy52aWV3SWQsIGtleURpciAsIG5leHREaXIpO1xyXG59KTtcclxuICAgICAgdHJIZWFkLmFwcGVuZENoaWxkKHRoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoZWFkLmFwcGVuZENoaWxkKHRySGVhZCk7XHJcbiAgICB0YWJsZS5hcHBlbmRDaGlsZCh0aGVhZCk7XHJcblxyXG4gICAgLyogXHUyNTAwXHUyNTAwIHRib2R5IFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgICBjb25zdCB0Ym9keSA9IERvbS5lbChcInRib2R5XCIsIFwiXCIpO1xyXG4gICAgb3B0cy5yb3dzLmZvckVhY2goKHJvdywgcm93SWR4KSA9PiB7XHJcbiAgICAgIGNvbnN0IHRyID0gRG9tLmVsKFwidHJcIiwgXCJjdC1kYXRhLXRhYmxlX190clwiKTtcclxuICAgICAgdHIuZGF0YXNldC5wYXRoID0gcm93Py5maWxlPy5wYXRoID8/IFwiXCI7XHJcblxyXG4vKiBcdTI1QkMgXHVBRTMwXHVDODc0IHRyLm9uY2xpY2sgPSBcdTIwMjYgXHVENTVDIFx1QzkwNFx1Qzc0NCBcdUM3NzQgXHVDRjU0XHVCNERDXHVCODVDIFx1QUQ1MFx1Q0NCNCBcdTI1QkMgKi9cclxudHIub25jbGljayA9ICgpID0+IHtcclxuICBjb25zdCBpc0FjdGl2ZSA9IHRyLmNsYXNzTGlzdC5jb250YWlucyhcImN0LXJvdy0tYWN0aXZlXCIpO1xyXG5cclxuICAvKiBcdTI0NjAgXHVDNzc0XHVCQkY4IFx1QzEyMFx1RDBERFx1QjNGQyBcdUM3ODhcdUM3M0NcdUJBNzQgXHUyMTkyIFx1RDU3NFx1QzgxQ1x1QjlDQyBcdUQ1NThcdUFDRTAgXHVDODg1XHVCOENDICovXHJcbiAgaWYgKGlzQWN0aXZlKSB7XHJcbiAgICB0ci5jbGFzc0xpc3QucmVtb3ZlKFwiY3Qtcm93LS1hY3RpdmVcIik7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKiBcdTI0NjEgXHVDNTQ0XHVCMkM4XHVCQTc0IFx1MjE5MiBcdUIyRTRcdUI5NzggXHVENTg5XHVDNzU4IFx1RDY1Q1x1QzEzMSBcdUMwQzFcdUQwRENcdUI5N0MgXHVENTc0XHVDODFDXHVENTU4XHVBQ0UwIFx1Qzc5MFx1QzJFMFx1Qzc0NCBcdUQ2NUNcdUMxMzFcdUQ2NTQgKi9cclxuICBjb25zdCBwcmV2ID0gdGFibGUucXVlcnlTZWxlY3RvcihcIi5jdC1yb3ctLWFjdGl2ZVwiKSBhcyBIVE1MVGFibGVSb3dFbGVtZW50IHwgbnVsbDtcclxuICBpZiAocHJldikgcHJldi5jbGFzc0xpc3QucmVtb3ZlKFwiY3Qtcm93LS1hY3RpdmVcIik7XHJcbiAgdHIuY2xhc3NMaXN0LmFkZChcImN0LXJvdy0tYWN0aXZlXCIpO1xyXG59O1xyXG5cclxuXHJcblxyXG4gICAgICBvcHRzLmNvbHVtbnMuZmlsdGVyKGMgPT4gYy5jb2x1bW4pLmZvckVhY2goY29sID0+IHtcclxuICAgICAgICBjb25zdCB0ZCA9IERvbS5lbChcInRkXCIsIFwiY3QtZGF0YS10YWJsZV9fdGRcIik7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQ6IHN0cmluZyB8IEhUTUxFbGVtZW50O1xyXG5cclxuICAgICAgICBpZiAob3B0cy5jZWxsUmVuZGVyZXIpIHtcclxuICAgICAgICAgIGNvbnRlbnQgPSBvcHRzLmNlbGxSZW5kZXJlcihyb3csIGNvbCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IHJhdyA9IGdldFZhbChyb3csIGNvbC5wcm9wKTtcclxuICAgICAgICAgIGlmIChjb2wucHJvcCA9PT0gXCJvYnNpZGlhblVJTW9kZVwiICYmIFN0cmluZyhyYXcpID09PSBcInNvdXJjZVwiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBEb20uZWwoXCJzcGFuXCIsIFwiY3QtbW9kZS1zb3VyY2VcIiwgXCJzb3VyY2VcIik7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBzcGFuO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGVudCA9IHJlbmRlckJ5Rm9ybWF0KHJhdywgY29sLmZvcm1hdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udGVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB0ZC5hcHBlbmRDaGlsZChjb250ZW50KTtcclxuICAgICAgICBlbHNlIHRkLnRleHRDb250ZW50ID0gY29udGVudDtcclxuXHJcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRib2R5LmFwcGVuZENoaWxkKHRyKTtcclxuICAgIH0pO1xyXG4gICAgdGFibGUuYXBwZW5kQ2hpbGQodGJvZHkpO1xyXG5cclxuICAgIHJldHVybiB0YWJsZTtcclxuICB9XHJcbn1cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgXHVEODNEXHVERDBEICBcdUNDMzhcdUFDRTBcclxuICAgICAgXHUyMDIyIENTUyBzZWxlY3RvcnMgYXJlIG5hbWVzcGFjZWQgd2l0aCBgY3QtZGF0YS10YWJsZWAgdG8gYXZvaWRcclxuICAgICAgICBjbGFzaGluZyB3aXRoIE9ic2lkaWFuIGRlZmF1bHQgdGFibGUgc3R5bGVzLlxyXG4gICAgICBcdTIwMjIgYnVpbGQoKSBpcyBzdGF0aWMgZm9yIHNpbXBsaWNpdHkgXHUyMDEzIG5vIGluc3RhbmNlIHN0YXRlIG5lZWRlZC5cclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuIiwgIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBzcmMvZmVhdHVyZXMvaW50ZXJhY3RpdmUtdGFibGUvc2VydmljZXMvVGFibGVDb250cm9sbGVyLnRzXHJcbiAqIFx1MjAxMyBhdXRvLWdlbmVyYXRlZCBmcm9tIGxlZ2FjeSBDb3Zlci1UYWJsZSB2MjAyNS0wNVxyXG4gKiAgIFx1MjAyMiBcdUM4MDRcdUNDQjQgXHVDNzc0XHVBRDAwIFx1Q0Y1NFx1QjREQyBcdTIwMTMgXHVDMjE4XHVDODE1IFx1QUUwOFx1QzlDMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQge1xyXG4gIEFwcCxcclxuICBURmlsZSxcclxuICBub3JtYWxpemVQYXRoLFxyXG4gIE5vdGljZSxcclxufSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgTG9nIH0gZnJvbSBcIi4uL3V0aWxzL2xvZ1wiO1xyXG5cclxuLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAxLiBcdUQwQzBcdUM3ODVcclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuZXhwb3J0IGludGVyZmFjZSBFZGl0UHJvcE9wdGlvbnMge1xyXG4gIC8qKiBjdXJyZW50bHkgb25seSBgXCJmaWxlIG5hbWVcImAgXHVDOUMwXHVDNkQwICovXHJcbiAgdHlwZSA6IFwiZmlsZSBuYW1lXCI7XHJcbiAgLyoqIFx1QjMwMFx1QzBDMSBcdUQzMENcdUM3N0NcdUM3NTggKlZhdWx0LXJlbGF0aXZlKiBcdUFDQkRcdUI4NUMgKi9cclxuICBwYXRoIDogc3RyaW5nO1xyXG4gIC8qKiBcdUQ1MDRcdUI3RjBcdUQyQjhcdUI5RTRcdUQxMzAvXHVEMzBDXHVDNzdDXHVDMThEXHVDMTMxIFx1QjRGMSBcdTIwMTMgXHVDQzI4XHVENkM0IFx1RDY1NVx1QzdBNVx1QzZBOSAqL1xyXG4gIHByb3A/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgMi4gXHVDMTFDXHVCRTQ0XHVDMkE0IFx1RDA3NFx1Qjc5OFx1QzJBNFxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJsZUNvbnRyb2xsZXIge1xyXG4gIC8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIFx1RDU0NFx1QjREQyBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGF0ZVlNRFJlZ2V4ID0gL14oXFxkezR9KS0oXFxkezEsMn0pLShcXGR7MSwyfSkkLztcclxuICBwcml2YXRlIHJlYWRvbmx5IHRpbWVITVJlZ2V4ICA9IC9eKFxcZHsxLDJ9KTooXFxkezEsMn0pJC87XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXBwOiBBcHApIHt9XHJcblxyXG4gIC8qXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHJcbiAgICBBLiAgXHUyMDFDXHVDNzc4XHVCNzdDXHVDNzc4IFx1RDNCOFx1QzlEMVx1MjAxRCBcdUFDRjVcdUM2QTkgXHVDOUM0XHVDNzg1XHVDODEwXHJcbiAgXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwKi9cclxuICAvKipcclxuICAgKiBcdUQzMENcdUM3N0MgXHVDNzc0XHVCOTg0L1x1RDUwNFx1QjdGMFx1RDJCOFx1QjlFNFx1RDEzMCBcdUI0RjEgKlx1QjJFOFx1Qzc3QyBcdUQ1MDRcdUI4NUNcdUQzN0NcdUQyRjAqIFx1QzIxOFx1QzgxNVx1QzZBOVxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiAgIGF3YWl0IHN2Yy5lZGl0UHJvcCh7IHR5cGU6IFwiZmlsZSBuYW1lXCIsIHBhdGg6IFwiRGlhcnkvMjAyNS0wNS0xMy5tZFwiIH0pO1xyXG4gICAqL1xyXG4gIGFzeW5jIGVkaXRQcm9wKG9wdHM6IEVkaXRQcm9wT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChub3JtYWxpemVQYXRoKG9wdHMucGF0aCkpO1xyXG4gICAgaWYgKCEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkgcmV0dXJuO1xyXG5cclxuICAgIC8qIFx1MjQ2MCBcdUQzMENcdUM3N0MgXHVDNzc0XHVCOTg0IFx1QkNDMFx1QUNCRCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4gICAgaWYgKG9wdHMudHlwZSA9PT0gXCJmaWxlIG5hbWVcIikge1xyXG4gICAgICBjb25zdCBvbGROYW1lID0gZmlsZS5iYXNlbmFtZTtcclxuICAgICAgY29uc3QgbmV4dCA9IGF3YWl0IHRoaXMudGV4dElucHV0KG9sZE5hbWUpO1xyXG4gICAgICBpZiAoIW5leHQgfHwgbmV4dCA9PT0gb2xkTmFtZSkgcmV0dXJuO1xyXG5cclxuICAgICAgY29uc3QgZm9sZGVyID0gZmlsZS5wYXJlbnQ/LnBhdGggPz8gXCJcIjtcclxuICAgICAgY29uc3QgZXh0ICAgID0gZmlsZS5leHRlbnNpb247XHJcbiAgICAgIGNvbnN0IGRlc3QgICA9IGZvbGRlciA/IGAke2ZvbGRlcn0vJHtuZXh0fS4ke2V4dH1gIDogYCR7bmV4dH0uJHtleHR9YDtcclxuXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQucmVuYW1lKGZpbGUsIGRlc3QpO1xyXG4gICAgICAgIG5ldyBOb3RpY2UoXCJcdTI3MDUgRmlsZSByZW5hbWVkXCIpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgTG9nLmUoZSk7XHJcbiAgICAgICAgbmV3IE5vdGljZShcIlx1MjZBMFx1RkUwRiBGYWlsZWQgdG8gcmVuYW1lIGZpbGVcIik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiBcdTI0NjEgXHVDQzI4XHVENkM0OiBcdUQ1MDRcdUI3RjBcdUQyQjhcdUI5RTRcdUQxMzAvXHVEMERDXHVBREY4IFx1QjRGMSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuICAgIC8vIChwcm9wIC8gdmFsdWUgXHVDQzk4XHVCOUFDIFx1Q0Y1NFx1QjREQ1x1QjI5NCBJbnRlcmFjdGl2ZVRhYmxlIFx1MjE5MiB0aGlzIHNlcnZpY2UgXHVCODVDXHJcbiAgICAvLyAgIFx1QzYyRVx1QUUzMFx1QUUzMFx1QjlDQyBcdUQ1ODhcdUM3M0NcdUJBNzAsIFx1QzU0NFx1QzlDMSBVSSBcdUM1RDBcdUMxMUMgXHVENjM4XHVDRDlDXHVCNDE4XHVDOUMwIFx1QzU0QVx1QjI5NFx1QjJFNC4pXHJcbiAgfVxyXG5cclxuICAvKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gICAgQS0xLiBcdUFDMDRcdUIyRTggXHVDNzg1XHVCODI1IFx1QkFBOFx1QjJFQ1xyXG4gIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgcHJpdmF0ZSBhc3luYyB0ZXh0SW5wdXQoZGVmOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBjb25zdCB7IE1vZGFsIH0gPSAoZ2xvYmFsVGhpcyBhcyBhbnkpLmNvdmVyVGFibGUub2JzaWRpYW47XHJcblxyXG4gICAgICBjbGFzcyBQcm9tcHRNb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuICAgICAgICByZXN1bHQgPSBkZWY7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwKSB7XHJcbiAgICAgICAgICBzdXBlcihhcHApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb25PcGVuKCkge1xyXG4gICAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoXCJoMVwiLCB7IHRleHQ6IFwiSW5wdXRcIiB9KTtcclxuXHJcbiAgICAgICAgICBjb25zdCBpbnB1dCA9IGNvbnRlbnRFbC5jcmVhdGVFbChcImlucHV0XCIsIHsgdmFsdWU6IHRoaXMucmVzdWx0IH0pO1xyXG4gICAgICAgICAgaW5wdXQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcclxuXHJcbiAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZXYgOiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChldi5rZXkgPT09IFwiRW50ZXJcIikge1xyXG4gICAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gaW5wdXQudmFsdWUudHJpbSgpO1xyXG4gICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgICByZXNvbHZlKHRoaXMucmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgY29uc3Qgb2sgPSBjb250ZW50RWwuY3JlYXRlRWwoXCJidXR0b25cIiwgeyB0ZXh0OiBcIk9LXCIgfSk7XHJcbiAgICAgICAgICBvay5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdCA9IGlucHV0LnZhbHVlLnRyaW0oKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICByZXNvbHZlKHRoaXMucmVzdWx0KTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvbkNsb3NlKCkge1xyXG4gICAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG5ldyBQcm9tcHRNb2RhbCh0aGlzLmFwcCkub3BlbigpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKlx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFx1MjU1MFxyXG4gICAgQi4gXHVBQzEyIFx1Q0Q5NFx1Q0Q5QyAvIFx1QjBBMFx1QzlEQ1x1MDBCN1x1QzJEQ1x1QUMwNCBcdUQzMENcdUMyRjEgXHVDNzIwXHVEMkY4XHJcbiAgXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwKi9cclxuICAvKiogRGF0YXZpZXcgUGFnZSBcdTIxOTIgXHVDNzg0XHVDNzU4IFx1RDUwNFx1Qjg1Q1x1RDM3Q1x1RDJGMCBcdUFDMTIgKi9cclxuICBnZXRWYWwocGFnZTogYW55LCBwcm9wOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgcmV0dXJuIHByb3Auc3RhcnRzV2l0aChcImZpbGUuXCIpXHJcbiAgICAgID8gcHJvcC5zcGxpdChcIi5cIikucmVkdWNlKCh2LCBrKSA9PiB2Py5ba10sIHBhZ2UpXHJcbiAgICAgIDogcGFnZVtwcm9wXTtcclxuICB9XHJcblxyXG4gIC8qKiBcdTIwMUNZWVlZLU1NLUREXHUyMDFEIFx1RDYzOVx1Qzc0MCBEYXRlLnBhcnNlIFx1QUMwMFx1QjJBNVx1RDU1QyBcdUJCMzhcdUM3OTBcdUM1RjQgXHUyMTkyIERhdGV8bnVsbCAqL1xyXG4gIHBhcnNlRGF0ZVlNRChzdHI6IHN0cmluZyk6IERhdGUgfCBudWxsIHtcclxuICAgIGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICBjb25zdCBtID0gc3RyLm1hdGNoKHRoaXMuZGF0ZVlNRFJlZ2V4KTtcclxuICAgIGlmIChtKSB7XHJcbiAgICAgIGNvbnN0IFtfLCB5LCBtbywgZF0gPSBtLm1hcChOdW1iZXIpO1xyXG4gICAgICBpZiAoeSA8IDEwMDAgfHwgeSA+IDk5OTkgfHwgbW8gPCAxIHx8IG1vID4gMTIgfHwgZCA8IDEgfHwgZCA+IDMxKVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICByZXR1cm4gbmV3IERhdGUoeSwgbW8gLSAxLCBkKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGR0ID0gbmV3IERhdGUoc3RyKTtcclxuICAgIHJldHVybiBpc05hTihkdC5nZXRUaW1lKCkpID8gbnVsbCA6IGR0O1xyXG4gIH1cclxuXHJcbiAgLyoqIFx1MjAxQ0hIOk1NXHUyMDFEIFx1MjE5MiBEYXRlKHRvZGF5KSB8IG51bGwgIChcdUM4MTVcdUI4MkNcdUM2QTkpICovXHJcbiAgcGFyc2VUaW1lSE0oc3RyOiBzdHJpbmcpOiBEYXRlIHwgbnVsbCB7XHJcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIikgcmV0dXJuIG51bGw7XHJcbiAgICBjb25zdCBtID0gc3RyLm1hdGNoKHRoaXMudGltZUhNUmVnZXgpO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICBjb25zdCBbXywgaGgsIG1tXSA9IG0ubWFwKE51bWJlcik7XHJcbiAgICBpZiAoaGggPiAyMyB8fCBtbSA+IDU5KSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICBjb25zdCBkID0gbmV3IERhdGUoKTtcclxuICAgIGQuc2V0SG91cnMoaGgsIG1tLCAwLCAwKTtcclxuICAgIHJldHVybiBkO1xyXG4gIH1cclxuXHJcbiAgLyoqIFx1QkIzOFx1Qzc5MFx1QzVGNFx1MDBCN1x1QzIyQlx1Qzc5MFx1MDBCN1x1QjBBMFx1QzlEQyBcdTIxOTIgXHVDMThDXHVEMzA1IFx1RDBBNCAqL1xyXG4gIGdldFNvcnRWYWx1ZSh2OiBhbnkpOiBzdHJpbmcgfCBudW1iZXIge1xyXG4gICAgaWYgKHYgPT0gbnVsbCkgcmV0dXJuIFwiXCI7XHJcbiAgICBjb25zdCBzID0gdHlwZW9mIHYgPT09IFwic3RyaW5nXCIgPyB2IDogU3RyaW5nKHYpO1xyXG5cclxuICAgIGNvbnN0IGQgPSB0aGlzLnBhcnNlRGF0ZVlNRChzKSB8fCB0aGlzLnBhcnNlVGltZUhNKHMpO1xyXG4gICAgaWYgKGQpIHJldHVybiBkLmdldFRpbWUoKTtcclxuXHJcbiAgICBjb25zdCBuID0gcGFyc2VGbG9hdChzKTtcclxuICAgIHJldHVybiBpc05hTihuKSA/IHMudG9Mb3dlckNhc2UoKSA6IG47XHJcbiAgfVxyXG5cclxuICAvKiogRGF0ZXxzdHJpbmd8bnVsbCBcdTIxOTIgXHUyMDFDWVlZWS1NTS1ERFx1MjAxRCAqL1xyXG4gIGZvcm1hdEFzRGF0ZSh2OiBhbnkpOiBzdHJpbmcge1xyXG4gICAgaWYgKHYgPT0gbnVsbCkgcmV0dXJuIFwiXCI7XHJcbiAgICBjb25zdCBkID0gdGhpcy5wYXJzZURhdGVZTUQoU3RyaW5nKHYpKTtcclxuICAgIGlmICghZCkgcmV0dXJuIFN0cmluZyh2KTtcclxuXHJcbiAgICBjb25zdCB5ID0gZC5nZXRGdWxsWWVhcigpO1xyXG4gICAgY29uc3QgbSA9IGQuZ2V0TW9udGgoKSArIDE7XHJcbiAgICBjb25zdCBkZCA9IGQuZ2V0RGF0ZSgpO1xyXG4gICAgcmV0dXJuIGAke3l9LSR7bSA8IDEwID8gXCIwXCIgOiBcIlwifSR7bX0tJHtkZCA8IDEwID8gXCIwXCIgOiBcIlwifSR7ZGR9YDtcclxuICB9XHJcblxyXG4gIC8qXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHJcbiAgICBDLiBcdUM4MTVcdUI4MkMgJiBcdUQ1NDRcdUQxMzAgXHUyMDEzIChJbnRlcmFjdGl2ZVRhYmxlIFx1QjNEOVx1Qzc3QyBcdUI4NUNcdUM5QzEpXHJcbiAgXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwKi9cclxuICAvKiogaW4tcGxhY2UgXHVDODE1XHVCODJDIChtdXRhdGUpICovXHJcbiAgc29ydEJ5UHJvcChhcnI6IGFueVtdLCBwcm9wOiBzdHJpbmcgfCBudWxsLCBkaXI6IFwiYXNjXCIgfCBcImRlc2NcIiA9IFwiYXNjXCIpIHtcclxuICAgIGlmICghcHJvcCB8fCBwcm9wID09PSBcInRpdGxlX2xpbmtcIiB8fCBwcm9wID09PSBcInRhZ3NcIikgcmV0dXJuIGFycjtcclxuXHJcbiAgICByZXR1cm4gYXJyLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgY29uc3QgQSA9IHRoaXMuZ2V0U29ydFZhbHVlKHRoaXMuZ2V0VmFsKGEsIHByb3ApKTtcclxuICAgICAgY29uc3QgQiA9IHRoaXMuZ2V0U29ydFZhbHVlKHRoaXMuZ2V0VmFsKGIsIHByb3ApKTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgQSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgQiA9PT0gXCJudW1iZXJcIilcclxuICAgICAgICByZXR1cm4gZGlyID09PSBcImFzY1wiID8gQSAtIEIgOiBCIC0gQTtcclxuXHJcbiAgICAgIHJldHVybiBkaXIgPT09IFwiYXNjXCJcclxuICAgICAgICA/IFN0cmluZyhBKS5sb2NhbGVDb21wYXJlKFN0cmluZyhCKSlcclxuICAgICAgICA6IFN0cmluZyhCKS5sb2NhbGVDb21wYXJlKFN0cmluZyhBKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHJcbiAgICBELiBcdUM4MUNcdUIxMDhcdUI3RjQgXHVENUVDXHVEMzdDXHJcbiAgXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwXHUyNTUwKi9cclxuICAvKipcclxuICAgKiBcdUM2MzVcdUMxNTggXHVCOUFDXHVDMkE0XHVEMkI4IFx1MjE5MiBTdWdnZXN0TW9kYWxcclxuICAgKiAgXHUyMDIzIEludGVyYWN0aXZlVGFibGUgXHVCQzBGIFVJIFx1QkFBOFx1QjRDOFx1QzVEMFx1QzExQyBcdUM5QzFcdUM4MTEgXHVENjM4XHVDRDlDXHJcbiAgICovXHJcbiAgYXN5bmMgc3VnZ2VzdGVyKHZhbHVlczogc3RyaW5nW10pOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuICAgIGNvbnN0IHsgU3VnZ2VzdE1vZGFsIH0gPSAoZ2xvYmFsVGhpcyBhcyBhbnkpLmNvdmVyVGFibGUub2JzaWRpYW47XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgY2xhc3MgU3VnZyBleHRlbmRzIFN1Z2dlc3RNb2RhbDxzdHJpbmc+IHtcclxuICAgICAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCkge1xyXG4gICAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldFN1Z2dlc3Rpb25zKHE6IHN0cmluZykge1xyXG4gICAgICAgICAgY29uc3QgcWwgPSBxLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICByZXR1cm4gdmFsdWVzLmZpbHRlcigodikgPT4gdi50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHFsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbmRlclN1Z2dlc3Rpb24odjogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICAgIGVsLmNyZWF0ZUVsKFwiZGl2XCIsIHsgdGV4dDogdiB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb25DaG9vc2VTdWdnZXN0aW9uKHY6IHN0cmluZykge1xyXG4gICAgICAgICAgcmVzb2x2ZSh2KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgbmV3IFN1Z2codGhpcy5hcHApLm9wZW4oKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCAiLyogXHJcbiAgXHUyNTBDXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTEwXHJcbiAgXHUyNTAyICBQYXRoICAgICA6IHNyYy9jb3JlL3N0YXRlL1N0YXRlQ2VudGVyLnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFxyXG4gIFx1MjUxNFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUxOFxyXG4qL1xyXG5cclxuLyogXHJcbiAgXHUyNTBDXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTEwXHJcbiAgXHUyNTAyIFB1cnBvc2UgICA6IEltcG9ydCBcdUFENkNcdUJCMzggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTI1MDIgXHJcbiAgXHUyNTE0XHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTE4XHJcbiAgfCAtIE9ic2lkaWFuIFx1Q0Y1NFx1QzVCNFx1QUMwMCBcdUI5QzhcdUQwNkNcdUIyRTRcdUM2QjQgXHVCMEI0XHVCRDgwIFx1Q0Y1NFx1QjREQ1x1RDM5Q1x1QzJBNFx1Qjk3QyBcdUI4MENcdUIzNTRcdUI5QzFcdUQ1NjAgXHVCNTRDIFx1QjExOFx1QUNBOFx1QzhGQ1x1QjI5NCBcIlx1Q0VFOFx1RDE0RFx1QzJBNFx1RDJCOCBcdUFDMURcdUNDQjRcIiBcdUQwQzBcdUM3ODVcdUM3NDQgXHVENjM4XHVDRDlDXHJcbiAgfCAtIGB0eXBlYCBcdUQwQTRcdUM2Q0NcdUI0RENcdUI5N0MgXHVCRDk5XHVDNUVDIFwiXHVEMEMwXHVDNzg1IFx1QzEyMFx1QzVCOFwiXHVCOUNDIFx1QUMwMFx1QzgzOFx1QzYyNFx1QkJDMFx1Qjg1QyBcdUJDODhcdUI0RTQgXHVBQ0IwXHVBQ0ZDIFx1RDMwQ1x1Qzc3Q1x1QzVEMFx1QjI5NCBcdUQzRUNcdUQ1NjhcdUI0MThcdUM5QzAgXHVDNTRBXHVDNzRDXHJcbiAqL1xyXG5pbXBvcnQgdHlwZSB7IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgTG9nIH0gZnJvbSBcIi4uLy4uL2ZlYXR1cmVzL2ludGVyYWN0aXZlLXRhYmxlL3V0aWxzL2xvZ1wiO1xyXG5cclxuLyogXHJcbiAgXHUyNTBDXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTEwXHJcbiAgXHUyNTAyIFB1cnBvc2UgICA6IFx1QzgwNFx1QzVFRCBcdUMwQzFcdUMyMTggXHVDODE1XHVDNzU4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MjUwMiBcclxuICBcdTI1MTRcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MThcclxuICovXHJcblxyXG4vKipcclxuICogKiAyKSBHbG9iYWwgVGFiIFx1QzJERFx1QkNDNFx1Qzc5MCBgVEFCX0lEYFxyXG4gKiAtIFx1QUMxOVx1Qzc0MCBcdUIxNzhcdUQyQjgoVVJMKVx1Qzc3NFx1Qjc3Q1x1QjNDNCBcdUQwRUQoTGVhZilcdUI5QzhcdUIyRTQgXHVBQ0UwXHVDNzIwIFx1QkIzOFx1Qzc5MFx1QzVGNFx1Qzc0NCBcdUMwRERcdUMxMzFcclxuICogLSBCcm9hZGNhc3RDaGFubmVsXHVDNzQ0IFx1RDFCNVx1RDU3NCBcdUMxMUNcdUI4NUMgXHVCQTU0XHVDMkRDXHVDOUMwXHVCOTdDIFx1QzhGQ1x1QUNFMCBcdUJDMUJcdUM3NDQgXHVCNTRDIFx1MjAxQ1x1QjBCNFx1QUMwMCBcdUJDRjRcdUIwQjggXHVCQTU0XHVDMkRDXHVDOUMwXHUyMDFEXHVDNzc4XHVDOUMwIFx1MjAxQ1x1QjJFNFx1Qjk3OCBcdUQwRURcdUM3NzQgXHVCQ0Y0XHVCMEI4IFx1QkE1NFx1QzJEQ1x1QzlDMFx1MjAxRFx1Qzc3OFx1QzlDMCBcdUFENkNcdUJDQzRcdUQ1NzRcdUM1N0MgXHVDNUQwXHVDRjU0KFx1QkIzNFx1RDU1QyBcdUI4RThcdUQ1MDQpXHVCOTdDIFx1QkMyOVx1QzlDMCBcdUFDMDBcdUIyQTVcclxuICovXHJcbmNvbnN0IFRBQl9JRDogc3RyaW5nID0gKGNyeXB0byBhcyBhbnkpPy5yYW5kb21VVUlEXHJcbiAgPyBjcnlwdG8ucmFuZG9tVVVJRCgpXHJcbiAgOiBgdGFiLSR7RGF0ZS5ub3coKS50b1N0cmluZygzNil9LSR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiwgMTApfWA7XHJcblxyXG4vKiBcclxuICBcdTI1MENcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MTBcclxuICBcdTI1MDIgUHVycG9zZSAgIDogXHVDODA0XHVDNUVEIFx1RDU2OFx1QzIxOCBcdUM4MTVcdUM3NTggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MjUwMiBcclxuICBcdTI1MTRcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MThcclxuICovXHJcbi8qKlxyXG4gKiAqIDEpIFZpZXdJbnN0XHJcbiAqIC0gXHVENTVDIFx1QUMxQ1x1Qzc1OCBcdTIwMThcdUI4MENcdUIzNTQgXHVCREYwKFx1Q0Y1NFx1QjREQ1x1RDM5Q1x1QzJBNClcdTIwMTlcdUI5N0MgXHVENjU0XHVCQTc0XHVDNUQwIFx1QURGOFx1QjlCNCBcdUI1NENcdUI5QzhcdUIyRTQgXHVDNzc0IFx1QUQ2Q1x1Qzg3MFx1Q0NCNFx1QUMwMCBcdUQ1NThcdUIwOThcdUM1MjkgXHVDMEREXHVDMTMxXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdJbnN0IHtcclxuICB2aWV3SWQgICAgICA6IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKiBcdUIzRDlcdUM3N0MgXHVCMTc4XHVEMkI4IFx1QzU0OCBcdUM1RUNcdUI3RUMgXHVDRjU0XHVCNERDXHVEMzlDXHVDMkE0XHVBQzAwIFx1Qzc4OFx1Qzc0NCBcdUI1NEMgXHVBQzAxXHVBRTMwIFx1QjJFNFx1Qjk3OCBcdUMyRERcdUJDQzRcdUM3OTBcclxuICBub3RlUGF0aCAgICA6IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKiBcdUIxNzhcdUQyQjgoXHVCOUM4XHVEMDZDXHVCMkU0XHVDNkI0IFx1RDMwQ1x1Qzc3QykgXHVBQ0JEXHVCODVDXHJcbiAgZHYgICAgICAgICAgOiBhbnk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICogRGF0YXZpZXcgQVBJIChcdUQwQzBcdUM3ODUgXHVCQkY4XHVDODE1KVxyXG4gIHNldHRpbmdzICAgIDogYW55OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAqIFx1RDUwNFx1Qjg2MFx1RDJCOFx1QjlFNFx1RDEzMCArIFx1QzBBQ1x1QzZBOVx1Qzc5MCBcdUMxMjRcdUM4MTVcclxuICBjdHggICAgICAgICA6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQ7ICAgICAgICAgLy8gKiBPYnNpZGlhblx1Qzc3NCBcdUM4MUNcdUFDRjVcdUQ1NThcdUIyOTQgXHVCODBDXHVCMzU0XHVCOUMxIFx1Q0VFOFx1RDE0RFx1QzJBNFx1RDJCOFxyXG4gIGNvbnRhaW5lciAgIDogSFRNTEVsZW1lbnQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAqIFx1QzJFNFx1QzgxQyBcdUQ0NUNcdUFDMDAgXHVBREY4XHVCODI0XHVDOUM4IERPTSBcdUNFRThcdUQxNENcdUM3NzRcdUIxMDhcclxuICBsZWFmRWwgICAgICA6IEhUTUxFbGVtZW50OyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKiBcdUQwRUQgKExlYWYpXHVDNzU4IFx1Q0Q1Q1x1QzBDMVx1QzcwNCBET00uIFx1RDBFRFx1Qzc3NCBcdUIyRUJcdUQ3OTAgXHVCNTRDIFx1QUMxMFx1QzlDMFx1QzZBOVxyXG4gIHJlcmVuZGVyICAgIDogKHBhc3NpdmU/OiBib29sZWFuKSA9PiBQcm9taXNlPHZvaWQ+OyAvLyAqIFx1QzBDMVx1RDBEQyBcdUJDQzBcdUFDQkQgXHVDMkRDIFx1QzgwNFx1Q0NCNCBcdUI5QUNcdUI4MENcdUIzNTQgXHVENTY4XHVDMjE4XHJcbiAgcmVmcmVzaFZpZXcgOiAocGFzc2l2ZT86IGJvb2xlYW4pID0+IFByb21pc2U8dm9pZD47IC8vICogXHVDNjc4XHVCRDgwIFx1Qzc3NFx1QkNBNFx1RDJCOFx1Qjg1QyBcdUJEODBcdUJEODQgXHVDMEM4XHVCODVDXHVBQ0UwXHVDRTY4IFx1RDU2OFx1QzIxOFxyXG59XHJcbi8qKlxyXG4gKiAqIDIpIExpc3RlbmVyXHJcbiAqIC0gXHVDMEFDXHVDNkE5XHVDNzkwIFx1Qzc3OFx1RDEzMFx1RDM5OFx1Qzc3NFx1QzJBNFx1Qzc1OCBcdUMwQzFcdUQwRENcdUFDMDAgXHVCQzE0XHVCMDE0XHVCNTRDLCBcdUMwQzFcdUQwRENcdUM1RDAgXHVCQzE4XHVDNzUxXHVENTc0XHVDMTFDIFx1QzJFNFx1RDU4OVx1QjQxOFx1QjI5NCBcdUQ1NjhcdUMyMTggKFx1QzBDMVx1RDBEQ1x1QkNDMFx1RDY1NCBcdUNGNUNcdUJDMzEpXHJcbiAqIC0gXHVCQzE4XHVENjU4XHVCNDE4XHVCMjk0IFx1QUMxMlx1Qzc3NCBcdUM1QzZcdUIzQzRcdUI4NUQgXHVDMTI0XHVDODE1XHJcbiAqL1xyXG50eXBlIExpc3RlbmVyID0gKG5leHQ6IFJlY29yZDxzdHJpbmcsIGFueT4pID0+IHZvaWQ7XHJcblxyXG4vKiBcclxuICBcdTI1MENcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MTBcclxuICBcdTI1MDIgUHVycG9zZSAgIDogQ2xhc3MgXHVDMTIwXHVDNUI4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MjUwMiBcclxuICBcdTI1MTRcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MThcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdGF0ZUNlbnRlciB7XHJcbiAgLyoqXHJcbiAgICogKiAxKSBcdUIwQjRcdUJEODAgXHVDODAwXHVDN0E1XHVDMThDIFx1QUQ2Q1x1Qzg3MFxyXG4gICAqL1xyXG4gIC8qKlxyXG4gICAqICogMS4xKSB2aWV3SWRcdUJDQzQgXHVENjU0XHVCQTc0KFBhbmUpIFx1QkFBOVx1Qjg1RCBcdUM4MDBcdUM3QTVcdUMxOEMgXHJcbiAgICogLSBcdUM4MDRcdUM1RURcdUQ1NjhcdUMyMTggXHVENjM4XHVDRDlDXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBwYW5lTWFwID0gbmV3IE1hcDxzdHJpbmcsIFZpZXdJbnN0W10+KCk7XHJcbiAgLyoqXHJcbiAgICogKiAxLjIpIHZpZXdJZFx1QkNDNCBCcm9hZGNhc3RDaGFubmVsIFx1QzgwMFx1QzdBNVx1QzE4Q1xyXG4gICAqIC0gXHVCMEI0XHVCRDgwXHVENTY4XHVDMjE4IFx1RDYzOFx1Q0Q5Q1xyXG4gICAqL1xyXG4gIHByaXZhdGUgYmNNYXAgICA9IG5ldyBNYXA8c3RyaW5nLCBCcm9hZGNhc3RDaGFubmVsPigpO1xyXG4gIC8qKlxyXG4gICAqICogMS4zKSB2aWV3SWRcdUJDQzQgTGlzdGVuZXIgXHVENTY4XHVDMjE4IFx1QkFBOVx1Qjg1RFxyXG4gICAqIC0gXHVDODA0XHVDNUVEXHVENTY4XHVDMjE4IFx1RDYzOFx1Q0Q5Q1xyXG4gICAqL1xyXG4gIHByaXZhdGUgc3VicyAgICA9IG5ldyBNYXA8c3RyaW5nLCBTZXQ8TGlzdGVuZXI+PigpO1xyXG4gIC8qKlxyXG4gICAqICogMS40KSBbXHVDNzIwXHVEMkY4IFx1RDU2OFx1QzIxOF0gXHVENjU0XHVCQTc0KFBhbmUpXHVDNzc0IERPTVx1QzVEMFx1QzExQyBcdUMwQUNcdUI3N0NcdUM4NENcdUIyOTRcdUM5QzAgXHVBQzgwXHVDMEFDIFx1RDZDNCBcdUM4MUNcdUFDNzBcclxuICAgKi9cclxuICBwcml2YXRlIHN3ZWVwKHZpZXdJZDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBhbGl2ZSA9ICh0aGlzLnBhbmVNYXAuZ2V0KHZpZXdJZCkgPz8gW10pLmZpbHRlcihwID0+IGRvY3VtZW50LmJvZHkuY29udGFpbnMocC5sZWFmRWwpKTtcclxuICAgIHRoaXMucGFuZU1hcC5zZXQodmlld0lkLCBhbGl2ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiAqIDIpIENvbnN0cnVjdG9yIChcdUMwRERcdUMxMzFcdUM3OTApXHJcbiAgICogLSBcdUJFMENcdUI3N0NcdUM2QjBcdUM4MDBcdUM3NTggbG9jYWxTdG9yYWdlIFx1QkMwRiBcdUQzMURcdUM1QzUgXHVCQTU0XHVDMkRDXHVDOUMwXHVCOTdDIFx1QzIxOFx1QzJFMFx1RDU1OFx1QzVFQyBcdUMwQzFcdUQwRENcdUI5N0MgXHVCM0Q5XHVBRTMwXHVENjU0XHVENTU4XHVCMjk0IFx1QzVFRFx1RDU2MFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiAqIDIuMSkgbG9jYWxTdG9yYWdlIFx1QkNDMFx1QUNCRCBcdUFDMTBcdUM5QzA6IFx1QjJFNFx1Qjk3OCBcdUQwRURcdUM1RDBcdUMxMUMgXHVDMEMxXHVEMERDIFx1QkNDMFx1QUNCRCBcdUMyRENcclxuICAgICAqL1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzdG9yYWdlXCIsIGUgPT4ge1xyXG4gICAgICBpZiAoIWUua2V5Py5zdGFydHNXaXRoKFwiY292ZXJUYWJsZTo6XCIpIHx8IGUubmV3VmFsdWUgPT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgICBjb25zdCBbLCBub3RlUGF0aCwgdmlld0lkXSA9IGUua2V5LnNwbGl0KFwiOjpcIik7XHJcbiAgICAgIHRyeSB7IHRoaXMuYXBwbHlSZW1vdGUodmlld0lkLCBKU09OLnBhcnNlKGUubmV3VmFsdWUpKTsgfSBjYXRjaCB7fVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqICogMi4yKSBFbGVjdHJvbiBcdUQzMURcdUM1QzUgXHVCQTU0XHVDMkRDXHVDOUMwIFx1QzIxOFx1QzJFMDogXHVEMzFEXHVDNTQ0XHVDNkMzXHVCNDFDIFx1Q0MzRFx1QUNGQyBcdUIzRDlcdUFFMzBcdUQ2NTRcclxuICAgICAqL1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGV2ID0+IHtcclxuICAgICAgaWYgKCFldi5kYXRhPy5fX2NvdmVyVGFibGUpIHJldHVybjtcclxuICAgICAgY29uc3QgeyB2aWV3SWQsIHBheWxvYWQgfSA9IGV2LmRhdGE7XHJcbiAgICAgIGlmIChwYXlsb2FkLnNlbmRlciA9PT0gVEFCX0lEKSByZXR1cm47XHJcbiAgICAgIHRoaXMuYXBwbHlSZW1vdGUodmlld0lkLCBwYXlsb2FkLnN0YXRlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogKiAzKSBcdUM4MDRcdUM1RUQgXHVENTY4XHVDMjE4IFx1QkFBOVx1Qjg1RFxyXG4gICAqL1xyXG4gIC8qKlxyXG4gICAqICogMy4xKSBhZGRQYW5lXHJcbiAgICogLSBcdUJBQTlcdUM4MDEgOiBcdUMwQzhcdUI4NUNcdUM2QjQgSW5zdFx1Qjk3QyBcdUQ2NTRcdUJBNzRcdUM1RDAgXHVCNEYxXHVCODVEXHVENTU4XHVBQ0UwLCBcdUMwQzFcdUQwREMgXHVCQ0MwXHVENjU0XHVCOTdDIFx1QUMxMFx1QzlDMFx1RDU3NFx1QzExQyBcdUM3OTBcdUIzRDlcdUM3M0NcdUI4NUMgXHVBQzMxXHVDMkUwXHJcbiAgICogLSBcdUM3ODVcdUI4MjUgOiBpbnN0XHJcbiAgICogLSBcdUNEOUNcdUI4MjUgOiB4XHJcbiAgICovXHJcbiAgYWRkUGFuZShpbnN0OiBWaWV3SW5zdCkge1xyXG4gICAgY29uc3QgbGlzdCA9IHRoaXMucGFuZU1hcC5nZXQoaW5zdC52aWV3SWQpID8/IFtdO1xyXG4gICAgaWYgKGxpc3Quc29tZShwID0+IHAuY29udGFpbmVyID09PSBpbnN0LmNvbnRhaW5lcikpIHsgcmV0dXJuOyB9XHJcbiAgICBsaXN0LnB1c2goaW5zdCk7XHJcbiAgICB0aGlzLnBhbmVNYXAuc2V0KGluc3Qudmlld0lkLCBsaXN0KTtcclxuICAgIExvZy5kKFwiYWRkUGFuZSBcdTI1QjZcIiwgaW5zdC52aWV3SWQsIFwiXHVENjA0XHVDN0FDIFBhbmUgXHVDMjE4OlwiLCBsaXN0Lmxlbmd0aCk7XHJcbiAgICB0aGlzLnN3ZWVwKGluc3Qudmlld0lkKTtcclxuICAgIGNvbnN0IGZuOiBMaXN0ZW5lciA9IGFzeW5jICgpID0+IHtcclxuICAgICAgTG9nLmQoXCJsaXN0ZW5lciBcdUQ2MzhcdUNEOUMgXHUyNUI2XCIsIGluc3Qudmlld0lkKTtcclxuICAgICAgYXdhaXQgaW5zdC5yZWZyZXNoVmlldyh0cnVlKTtcclxuICAgICAgY29uc3QgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KFwiX19jb3Zlcl9yZWZyZXNoXCIsIHsgZGV0YWlsOiBpbnN0LnZpZXdJZCB9KTtcclxuICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZ0KTtcclxuICAgIH07XHJcbiAgICB0aGlzLnN1YnNjcmliZShpbnN0LnZpZXdJZCwgZm4pO1xyXG4gICAgaWYgKGluc3QubGVhZkVsKSB7XHJcbiAgICAgIGNvbnN0IG9iID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xyXG4gICAgICAgIGlmIChpbnN0LmxlYWZFbCAmJiAhZG9jdW1lbnQuYm9keS5jb250YWlucyhpbnN0LmxlYWZFbCkpIHtcclxuICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoaW5zdC52aWV3SWQsIGZuKTtcclxuICAgICAgICAgIGNvbnN0IHJlbWFpbiA9ICh0aGlzLnBhbmVNYXAuZ2V0KGluc3Qudmlld0lkKSA/PyBbXSkuZmlsdGVyKHAgPT4gcCAhPT0gaW5zdCk7XHJcbiAgICAgICAgICB0aGlzLnBhbmVNYXAuc2V0KGluc3Qudmlld0lkLCByZW1haW4pO1xyXG4gICAgICAgICAgTG9nLmQoXCJQYW5lIFx1QzgxQ1x1QUM3MCBcdTI1QjZcIiwgaW5zdC52aWV3SWQsIFwiXHVCMEE4XHVDNzQwIFBhbmU6XCIsIHJlbWFpbi5sZW5ndGgpO1xyXG4gICAgICAgICAgb2IuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIG9iLm9ic2VydmUoZG9jdW1lbnQuYm9keSwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmVuc3VyZUNoYW5uZWwoaW5zdC52aWV3SWQpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiAqIDMuMikgcmVtb3ZlUGFuZVxyXG4gICAqIC0gXHVCQUE5XHVDODAxIDogXHVCNEYxXHVCODVEXHVCNDFDIEluc3RcdUI5N0MgXHVDODFDXHVBQzcwXHVENTU4XHVBQ0UwIFx1Qzc5MFx1QzZEMCBcdUM4MTVcdUI5QUNcclxuICAgKiAtIFx1Qzc4NVx1QjgyNSA6IG5vdGVQYXRoLCB2aWV3SWRcclxuICAgKiAtIFx1Q0Q5Q1x1QjgyNSA6IHhcclxuICAgKi9cclxuICByZW1vdmVQYW5lKG5vdGVQYXRoOiBzdHJpbmcsIHZpZXdJZDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnN3ZWVwKHZpZXdJZCk7XHJcbiAgICBjb25zdCByZW1haW4gPSAodGhpcy5wYW5lTWFwLmdldCh2aWV3SWQpID8/IFtdKS5maWx0ZXIocCA9PiBwLm5vdGVQYXRoICE9PSBub3RlUGF0aCk7XHJcbiAgICB0aGlzLnBhbmVNYXAuc2V0KHZpZXdJZCwgcmVtYWluKTtcclxuICAgIExvZy5kKFwicmVtb3ZlUGFuZSBcdTI1QjZcIiwgdmlld0lkLCBcIlx1QjBBOFx1Qzc0MCBQYW5lOlwiLCByZW1haW4ubGVuZ3RoKTtcclxuICAgIGlmIChyZW1haW4ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMuc3Vicy5nZXQodmlld0lkKT8uY2xlYXIoKTtcclxuICAgICAgdGhpcy5zdWJzLmRlbGV0ZSh2aWV3SWQpO1xyXG4gICAgICB0aGlzLmJjTWFwLmdldCh2aWV3SWQpPy5jbG9zZSgpO1xyXG4gICAgICB0aGlzLmJjTWFwLmRlbGV0ZSh2aWV3SWQpO1xyXG4gICAgICB0cnkgeyBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLm1ha2VLZXkobm90ZVBhdGgsIHZpZXdJZCkpO30gY2F0Y2gge31cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqICogNCkgXHVCMEI0XHVCRDgwIFx1RDU2OFx1QzIxOCBcdUJBQTlcdUI4NURcclxuICAgKi9cclxuICAvKipcclxuICAgKiAqIDQuMSkgZ2V0XHJcbiAgICogLSBcdUJBQTlcdUM4MDEgOiBcdUM4MDBcdUM3QTVcdUI0MUMgXHVDMEMxXHVEMERDXHVBQzEyIFx1QUMwMFx1QzgzOFx1QzYyNFx1QUUzMCAobG9jYWxTdG9yYWdlKVxyXG4gICAqIC0gXHVDNzg1XHVCODI1IDogbm90ZVBhdGgsIHZpZXdJZFxyXG4gICAqIC0gXHVDRDlDXHVCODI1IDogUmVjb3JkXHJcbiAgICovXHJcbiAgZ2V0KG5vdGVQYXRoOiBzdHJpbmcsIHZpZXdJZDogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgYW55PiB7XHJcbiAgICBjb25zdCByYXcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLm1ha2VLZXkobm90ZVBhdGgsIHZpZXdJZCkpO1xyXG4gICAgdHJ5IHsgcmV0dXJuIHJhdyA/IEpTT04ucGFyc2UocmF3KSA6IHt9OyB9XHJcbiAgICBjYXRjaCB7IHJldHVybiB7fTsgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiAqIDQuMikgc2V0XHJcbiAgICogLSBcdUJBQTlcdUM4MDEgOiBcdUMwQzFcdUQwRENcdUI5N0MgXHVDODAwXHVDN0E1XHVENTU4XHVBQ0UwLCBcdUIyRTRcdUI5NzggXHVEMEVEXHVDNUQwXHVBQzhDXHVCM0M0IFx1QzgwNFx1QjJFQ1x1RDU1OFx1QUNFMCwgXHVCOUFDXHVDMkE0XHVCMTA4IFx1QzJFNFx1RDU4OVxyXG4gICAqIC0gXHVDNzg1XHVCODI1IDogaW5zdCwgcGF0Y2gsIHdpcGUsIHNpbGVudFxyXG4gICAqIC0gXHVDRDlDXHVCODI1IDogeFxyXG4gICAqL1xyXG4gIHNldChpbnN0OiBWaWV3SW5zdCwgcGF0Y2g6IFJlY29yZDxzdHJpbmcsIGFueT4sIHdpcGUgPSBmYWxzZSwgc2lsZW50ID0gZmFsc2UpIHtcclxuICAgIExvZy5kKFwic2V0IFx1MjVCNlwiLCBpbnN0LnZpZXdJZCwgeyBwYXRjaCwgd2lwZSwgc2lsZW50IH0pO1xyXG4gICAgaWYgKCh3aW5kb3cgYXMgYW55KS5fX0NPVkVSX1RBQkxFX0RJU0FCTEVfQkMpIHNpbGVudCA9IHRydWU7XHJcbiAgICBjb25zdCBrZXkgICAgPSB0aGlzLm1ha2VLZXkoaW5zdC5ub3RlUGF0aCwgaW5zdC52aWV3SWQpO1xyXG4gICAgY29uc3QgYmVmb3JlID0gdGhpcy5nZXQoaW5zdC5ub3RlUGF0aCwgaW5zdC52aWV3SWQpO1xyXG4gICAgY29uc3QgbmV4dCAgID0gd2lwZSA/IHBhdGNoIDogeyAuLi5iZWZvcmUsIC4uLnBhdGNoIH07XHJcbiAgICB0cnkge1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KG5leHQpKTtcclxuICAgIH0gY2F0Y2ggKGU6IGFueSkge1xyXG4gICAgICBpZiAoZT8ubmFtZSA9PT0gXCJRdW90YUV4Y2VlZGVkRXJyb3JcIikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcIltDb3Zlci1UYWJsZV0gbG9jYWxTdG9yYWdlIHF1b3RhIGV4Y2VlZGVkIFx1MjE5MiB1c2luZyBtZW1vcnkgb25seVwiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBlOyBcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFzaWxlbnQpIHtcclxuICAgICAgY29uc3QgcGF5bG9hZCA9IHsgc2VuZGVyOiBUQUJfSUQsIHN0YXRlOiBuZXh0IH07XHJcbiAgICAgIHRoaXMuYmNNYXAuZ2V0KGluc3Qudmlld0lkKT8ucG9zdE1lc3NhZ2UocGF5bG9hZCk7XHJcbiAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSh7IF9fY292ZXJUYWJsZTogdHJ1ZSwgdmlld0lkOiBpbnN0LnZpZXdJZCwgcGF5bG9hZCB9LCBcIipcIik7XHJcbiAgICB9XHJcbiAgICB0aGlzLmVtaXQoaW5zdC52aWV3SWQsIG5leHQpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiAqIDQuMykgc3Vic2NyaWJlXHJcbiAgICogLSBcdUJBQTlcdUM4MDEgOiBcdUQyQjlcdUM4MTUgdmlld0lkIFx1QzBDMVx1RDBEQ1x1QUMwMCBcdUJDMTRcdUIwMTQgXHVCNTRDIFx1QzJFNFx1RDU4OVx1QjQyMCBcdUQ1NjhcdUMyMTggXHVCNEYxXHVCODVEXHJcbiAgICogLSBcdUM3ODVcdUI4MjUgOiB2aWV3SWQsIGZuXHJcbiAgICogLSBcdUNEOUNcdUI4MjUgOiB4XHJcbiAgICovXHJcbiAgc3Vic2NyaWJlKHZpZXdJZDogc3RyaW5nLCBmbjogTGlzdGVuZXIpIHtcclxuICAgIGNvbnN0IHNldCA9IHRoaXMuc3Vicy5nZXQodmlld0lkKSA/PyBuZXcgU2V0PExpc3RlbmVyPigpO1xyXG4gICAgc2V0LmFkZChmbik7XHJcbiAgICB0aGlzLnN1YnMuc2V0KHZpZXdJZCwgc2V0KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogKiA0LjQpIHVuc3Vic2NyaWJlXHJcbiAgICogLSBcdUJBQTlcdUM4MDEgOiBcdUI0RjFcdUI4NURcdUI0MUMgXHVCOUFDXHVDMkE0XHVCMTA4IFx1QzgxQ1x1QUM3MFxyXG4gICAqIC0gXHVDNzg1XHVCODI1IDogdmlld0lkLCBmblxyXG4gICAqIC0gXHVDRDlDXHVCODI1IDogeFxyXG4gICAqL1xyXG4gIHVuc3Vic2NyaWJlKHZpZXdJZDogc3RyaW5nLCBmbjogTGlzdGVuZXIpIHtcclxuICAgIHRoaXMuc3Vicy5nZXQodmlld0lkKT8uZGVsZXRlKGZuKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogKiA0LjUpIGVtaXRcclxuICAgKiAtIFx1QkFBOVx1QzgwMSA6IFx1QjRGMVx1Qjg1RFx1QjQxQyBcdUI5QUNcdUMyQTRcdUIxMDhcdUI0RTQgXHVDMkU0XHVENTg5IChcdUMwQzFcdUQwREMgXHVCQzE4XHVDNjAxKVxyXG4gICAqIC0gXHVDNzg1XHVCODI1IDogdmlld0lkLCBzdGF0ZVxyXG4gICAqIC0gXHVDRDlDXHVCODI1IDogeFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZW1pdCh2aWV3SWQ6IHN0cmluZywgc3RhdGU6IFJlY29yZDxzdHJpbmcsIGFueT4pIHtcclxuICAgIHRoaXMuc3Vicy5nZXQodmlld0lkKT8uZm9yRWFjaChjYiA9PiB7XHJcbiAgICAgIHRyeSB7IGNiKHN0YXRlKTsgfSBjYXRjaCAoZSkgeyBjb25zb2xlLmVycm9yKGUpOyB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogKiA0LjYpIGVuc3VyZUNoYW5uZWxcclxuICAgKiAtIFx1QkFBOVx1QzgwMSA6IFx1RDBFRCBcdUFDMDQgXHVEMUI1XHVDMkUwIFx1Q0M0NFx1QjExMCBcdUMwRERcdUMxMzEgXHVCQzBGIFx1QkE1NFx1QzJEQ1x1QzlDMCBcdUMyMThcdUMyRTAgXHVDMTI0XHVDODE1XHJcbiAgICogLSBcdUM3ODVcdUI4MjUgOiB2aWV3SWRcclxuICAgKiAtIFx1Q0Q5Q1x1QjgyNSA6IHhcclxuICAgKi9cclxuICBwcml2YXRlIGVuc3VyZUNoYW5uZWwoIHZpZXdJZDogc3RyaW5nICkge1xyXG4gICAgaWYgKCB0aGlzLmJjTWFwLmhhcyggdmlld0lkICkgKSByZXR1cm47XHJcbiAgICBjb25zdCBiYyA9IG5ldyBCcm9hZGNhc3RDaGFubmVsKGBjb3ZlclRhYmxlLSR7dmlld0lkfWApO1xyXG4gICAgYmMub25tZXNzYWdlID0gZXYgPT4ge1xyXG4gICAgICBjb25zdCB7IHNlbmRlciwgc3RhdGUgfSA9IGV2LmRhdGEgfHwge307XHJcbiAgICAgIGlmICggc2VuZGVyID09PSBUQUJfSUQgKSByZXR1cm47XHJcbiAgICAgIHRoaXMuYXBwbHlSZW1vdGUoIHZpZXdJZCwgc3RhdGUgKTtcclxuICAgIH07XHJcbiAgICB0aGlzLmJjTWFwLnNldCh2aWV3SWQsIGJjKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogKiA0LjcpIGFwcGx5UmVtb3RlXHJcbiAgICogLSBcdUJBQTlcdUM4MDEgOiBcdUIyRTRcdUI5NzggXHVEMEVEXHVDNUQwXHVDMTFDIFx1QkMxQlx1Qzc0MCBcdUMwQzFcdUQwRENcdUI5N0MgXHVDODAxXHVDNkE5XHVENTU4XHVBQ0UwIFx1QkMxOFx1QzYwMVxyXG4gICAqIC0gXHVDNzg1XHVCODI1IDogdmlld0lkLCBuZXdTdGF0ZVxyXG4gICAqIC0gXHVDRDlDXHVCODI1IDogeFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYXBwbHlSZW1vdGUodmlld0lkOiBzdHJpbmcsIG5ld1N0YXRlOiBhbnkpIHtcclxuICAgIGNvbnN0IHBhbmVzID0gdGhpcy5wYW5lTWFwLmdldCh2aWV3SWQpID8/IFtdO1xyXG4gICAgaWYgKHBhbmVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuOyAgICAgICAgICAgICAgIFxyXG5cclxuICAgIGNvbnN0IG5vdGVQYXRoID0gcGFuZXNbMF0ubm90ZVBhdGg7XHJcbiAgICBjb25zdCBrZXkgICAgICA9IHRoaXMubWFrZUtleShub3RlUGF0aCwgdmlld0lkKTtcclxuICAgIGNvbnN0IGN1ciAgICAgID0gdGhpcy5nZXQobm90ZVBhdGgsIHZpZXdJZCk7XHJcbiAgICBpZiAoSlNPTi5zdHJpbmdpZnkoY3VyKSA9PT0gSlNPTi5zdHJpbmdpZnkobmV3U3RhdGUpKSByZXR1cm47XHJcblxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShuZXdTdGF0ZSkpO1xyXG4gICAgdGhpcy5lbWl0KHZpZXdJZCwgbmV3U3RhdGUpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiAqIDQuOCkgbWFrZUtleVxyXG4gICAqIC0gXHVCQUE5XHVDODAxIDogXHVDMEMxXHVEMERDIFx1QzgwMFx1QzdBNSBcdUQwQTQgXHVCQjM4XHVDNzkwXHVDNUY0IFx1QzBERFx1QzEzMVxyXG4gICAqIC0gXHVDNzg1XHVCODI1IDogbm90ZVBhdGgsIHZpZXdJZFxyXG4gICAqIC0gXHVDRDlDXHVCODI1IDogYGNvdmVyVGFibGU6OiR7bm90ZVBhdGh9Ojoke3ZpZXdJZH1gIChzdHJpbmcpXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBtYWtlS2V5KG5vdGVQYXRoOiBzdHJpbmcsIHZpZXdJZDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gYGNvdmVyVGFibGU6OiR7bm90ZVBhdGh9Ojoke3ZpZXdJZH1gO1xyXG4gIH1cclxuICAvKipcclxuICAgKiAqIDQuOSkgaGFzTGl2ZVBhbmVcclxuICAgKiAtIFx1QkFBOVx1QzgwMSA6IFx1RDU3NFx1QjJGOSB2aWV3SWRcdUFDMDAgXHVENjA0XHVDN0FDIERPTVx1QzVEMCBcdUM4NzRcdUM3QUNcdUQ1NThcdUIyOTRcdUM5QzAgXHVENjU1XHVDNzc4XHJcbiAgICogLSBcdUM3ODVcdUI4MjUgOiB2aWRcclxuICAgKiAtIFx1Q0Q5Q1x1QjgyNSA6IGJvb2xlYW5cclxuICAgKi9cclxuICBwdWJsaWMgaGFzTGl2ZVBhbmUodmlkOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGFyciA9IHRoaXMucGFuZU1hcC5nZXQodmlkKT8/W107XHJcbiAgICByZXR1cm4gYXJyLnNvbWUocCA9PiBwLmxlYWZFbCAmJiBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHAubGVhZkVsKSk7XHJcbiAgfVxyXG59XHJcblxyXG4vKiBcclxuICBcdTI1MENcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MTBcclxuICBcdTI1MDIgUHVycG9zZSAgIDogU2luZ2xldG9uIFx1Qzc3OFx1QzJBNFx1RDEzNFx1QzJBNCBcdUMwRERcdUMxMzEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUyNTAyIFxyXG4gIFx1MjUxNFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUxOFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHRhYmxlU3RhdGUgPSBuZXcgU3RhdGVDZW50ZXIoKTtcclxuXHJcbiIsICIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogc3JjL2ZlYXR1cmVzL2ludGVyYWN0aXZlLXRhYmxlL0ludGVyYWN0aXZlVGFibGVNb2RlbC50c1xyXG4gKiAgIFx1MjAxMyBhdXRvLWdlbmVyYXRlZCBmcm9tIGxlZ2FjeSBDb3Zlci1UYWJsZSB2MjAyNS0wNVxyXG4gKiAgIFx1MjAyMiBcdUM4MDRcdUNDQjQgXHVDNzc0XHVBRDAwIFx1Q0Y1NFx1QjREQyBcdTIwMTMgXHVDMjE4XHVDODE1IFx1QUUwOFx1QzlDMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogIEludGVyYWN0aXZlVGFibGVNb2RlbFxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIFx1MDBCNyBcdTIwMUNcdUIzNzBcdUM3NzRcdUQxMzAvXHVDMEMxXHVEMERDIFx1QUNDNFx1Q0UzNVx1MjAxRFx1QjlDQyBcdUM4MDRcdUIyRjRcdUQ1NThcdUIyOTQgXHVDMjFDXHVDMjE4IE1vZGVsXHJcbiAqICBcdTAwQjcgVUkgXHVCMjk0IFVJTWFuYWdlciBcdUI4NUMgXHVCRDg0XHVCOUFDXHVCNDE4XHVDNUI0IFx1Qzc4OFx1QzczQ1x1QkE3MCwgTW9kZWwgXHVDNzQwXHJcbiAqICAgIFx1MjQ2MCBEYXRhdmlldyBcdUQzOThcdUM3NzRcdUM5QzAgXHVDMjE4XHVDOUQxXHJcbiAqICAgIFx1MjQ2MSBcdUQ1NDRcdUQxMzBcdTAwQjdcdUFDODBcdUMwQzlcdTAwQjdcdUM4MTVcdUI4MkNcdTAwQjdcdUQzOThcdUM3NzRcdUM5QzBcdUIxMjRcdUM3NzRcdUMxNThcclxuICogICAgXHUyNDYyIHBhbmUtc3RhdGUobG9jYWxTdG9yYWdlICsgQnJvYWRjYXN0Q2hhbm5lbCkgXHVCM0Q5XHVBRTMwXHVENjU0XHJcbiAqICAgIFx1MjQ2MyBcdUM3MjBcdUQyRjgoXHVCMEEwXHVDOURDIFx1RDMwQ1x1QzJGMSwgXHVDODE1XHVCODJDIFx1QUMxMiBcdUFDQzRcdUMwQjAgXHVCNEYxKVxyXG4gKiAgXHUwMEI3IE9ic2lkaWFuIEFQSSBcdUM3NThcdUM4NzRcdUM3NDQgXHVDRDVDXHVDMThDXHVENjU0KEFwcCBcdUNDMzhcdUM4NzAgTy9YIFx1QkFBOFx1QjQ1MCBcdUQ1QzhcdUM2QTkpXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuaW1wb3J0IHR5cGUgeyBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB0eXBlIHsgQ29sdW1uRGVmIH0gICAgICAgICAgICAgICAgICAgIGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7IHRhYmxlU3RhdGUgfSAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gXCIuLi8uLi9jb3JlL3N0YXRlL1N0YXRlQ2VudGVyXCI7XHJcbmltcG9ydCB7IG5vcm1hbGl6ZVRhZ3MgfSBmcm9tIFwiLi91dGlscy90YWdcIjtcclxuaW1wb3J0IHsgTG9nIH0gZnJvbSBcIi4vdXRpbHMvbG9nXCI7XHJcblxyXG5cclxuLyogXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIFx1RDBDMFx1Qzc4NSBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuZXhwb3J0IGludGVyZmFjZSBUYWJsZU1vZGVsU2V0dGluZ3Mge1xyXG4gIC8qKiAxIFx1RDM5OFx1Qzc3NFx1QzlDMFx1QjJGOSBcdUQ1ODkgXHVDMjE4KDAgXHVCNjEwXHVCMjk0IFx1Qzc0Q1x1QzIxOCBcdTIxRDIgcGFnaW5nIE9GRikgKi9cclxuICBwZXJQYWdlPzogbnVtYmVyO1xyXG4gIC8qKiBEYXRhdmlldyBcdUNGRkNcdUI5QUMgcGF0aCBvdmVycmlkZSAqL1xyXG4gIHBhdGg/ICAgOiBzdHJpbmc7XHJcbiAgLyoqIFx1RDBEQ1x1QURGOCBcdUQ1NDRcdUQxMzAgXHVCQzg0XHVEMkJDIFx1QjE3OFx1Q0Q5QyBcdUM1RUNcdUJEODAgKi9cclxuICBzaG93VGFnRmlsdGVyQnV0dG9uPzogYm9vbGVhbjtcclxuICAvKiogZnJvbnQtbWF0dGVyIFx1RDU0NFx1RDEzMCBcdUJDODRcdUQyQkMgXHVCMTc4XHVDRDlDIFx1QzVFQ1x1QkQ4MCAqL1xyXG4gIHNob3dGcm9udG1hdHRlckZpbHRlckJ1dHRvbj86IGJvb2xlYW47XHJcbiAgYWx3YXlzUG9wb3V0PzogYm9vbGVhbjsgICAgIC8vIFx1MjYwNSBcdUQ1ODkgXHVCMkU4XHVDNzdDIFx1RDA3NFx1QjlBRCBcdUMyREMgcG9wLW91dCBcdUFDMTVcdUM4MUMgXHVDNUVDXHVCRDgwXHJcbiAgLyoqIFx1Q0QwOFx1QUUzMCB3aXBlIChHYW50dCBcdTIxOTQgSVQgXHVDODA0XHVENjU4IFx1QjRGMSkgKi9cclxuICBfX3dpcGVTdGF0ZT86IGJvb2xlYW47XHJcbiAgLyoqIFx1RDBFRC1cdUI4NUNcdUNFRUMgdmlld0lkIChcdUM3OTBcdUIzRDkgXHVDOEZDXHVDNzg1KSAqL1xyXG4gIF9fdmlld0lkPzogc3RyaW5nO1xyXG4gIC8qKiBcdUQ2MDRcdUM3QUMgXHVCMTc4XHVEMkI4IFx1QUNCRFx1Qjg1QyhcdUM3OTBcdUIzRDkgXHVDOEZDXHVDNzg1KSAqL1xyXG4gIF9ub3RlUGF0aD86IHN0cmluZztcclxuICAvKiogXHVBRTMwXHVEMEMwIFx1QzBBQ1x1QzZBOVx1Qzc5MCBcdUM4MTVcdUM3NTggXHVEMEE0ICovXHJcbiAgW2s6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuLyogXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIFx1QzBDMVx1QzIxOCAmIFx1RDVFQ1x1RDM3QyBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuXHJcbi8qKiBcdUI3OUNcdUIzNjQgVVVJRChwb2x5ZmlsbCkgKi9cclxuZnVuY3Rpb24gdXVpZCgpIHtcclxuICByZXR1cm4gKGNyeXB0byBhcyBhbnkpPy5yYW5kb21VVUlEXHJcbiAgICA/IGNyeXB0by5yYW5kb21VVUlEKClcclxuICAgIDogYHZpZC0ke0RhdGUubm93KCkudG9TdHJpbmcoMzYpfS0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIsIDgpfWA7XHJcbn1cclxuXHJcbi8qKiB0YWJsZVN0YXRlIFx1Qjc5OFx1RDM3QyBcdTIwMTMgZ2V0ICovXHJcbmZ1bmN0aW9uIGdzKG5vdGU6IHN0cmluZywgdmlkOiBzdHJpbmcsIGs6IHN0cmluZykge1xyXG4gIHJldHVybiB0YWJsZVN0YXRlLmdldChub3RlLCB2aWQpPy5ba10gPz8gbnVsbDtcclxufVxyXG5cclxuLyoqIHRhYmxlU3RhdGUgXHVCNzk4XHVEMzdDIFx1MjAxMyBzZXQgKHBhbmUgXHVDODc0XHVDN0FDIFx1QzVFQ1x1QkQ4MFx1QzVEMCBcdUI1MzBcdUI3N0MgZWNobyBcdUNDMjhcdUIyRTgpICovXHJcbmZ1bmN0aW9uIHNzKG5vdGU6IHN0cmluZywgdmlkOiBzdHJpbmcsIGs6IHN0cmluZywgdjogYW55KSB7XHJcbiAgY29uc3QgYXJyICA9ICh0YWJsZVN0YXRlIGFzIGFueSkucGFuZU1hcC5nZXQodmlkKSBhcyBhbnlbXSB8IHVuZGVmaW5lZDtcclxuICBjb25zdCBpbnN0ID0gYXJyPy5bMF07XHJcblxyXG4gIC8qIFx1MjQ2MCBQYW5lIFx1Qzg3NFx1QzdBQyBcdTIxOTIgXHVDODE1XHVDMEMxIFx1Qjg1Q1x1QzlDMSAqL1xyXG4gIGlmIChpbnN0KSB7XHJcbiAgICBjb25zdCBzaWxlbnQgPSAhIShpbnN0IGFzIGFueSkuc2tpcFN0YXRlV3JpdGU7XHJcbiAgICB0YWJsZVN0YXRlLnNldChpbnN0LCB7IFtrXTogdiB9LCBmYWxzZSwgc2lsZW50KTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qIFx1MjQ2MSBQYW5lIFx1QjJFQlx1RDc5OCBcdTIxOTIgc3RvcmFnZSBcdUM5QzFcdUM4MTEgXHVDNEYwXHVBRTMwICovXHJcbiAgY29uc3Qga2V5ID0gYGNvdmVyVGFibGU6OiR7bm90ZX06OiR7dmlkfWA7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkgfHwgXCJ7fVwiKTtcclxuICAgIGRhdGFba10gPSB2O1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcbiAgfSBjYXRjaCB7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHsgW2tdOiB2IH0pKTtcclxuICB9XHJcbn1cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiAgMS4gSW50ZXJhY3RpdmVUYWJsZU1vZGVsXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5leHBvcnQgY2xhc3MgSW50ZXJhY3RpdmVUYWJsZU1vZGVsIHtcclxuICAvKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCBcdUQ1NDRcdUI0REMgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuICBwdWJsaWMgcmVhZG9ubHkgaG9zdDogSFRNTEVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBub3RlUGF0aCA6IHN0cmluZztcclxuICBwcml2YXRlIHJlYWRvbmx5IHZpZXdJZCAgIDogc3RyaW5nO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgZHYgICAgICAgOiBhbnk7XHJcbiAgcHJpdmF0ZSAgICAgICAgICBwYWdlcyAgICA6IGFueVtdO1xyXG4gIHByaXZhdGUgICAgICAgICAgY29sdW1ucyAgOiBDb2x1bW5EZWZbXTtcclxuICBwcml2YXRlIHJlYWRvbmx5IGN0eCAgICAgIDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dDtcclxuICBwcml2YXRlIHJlYWRvbmx5IHNldHRpbmdzIDogVGFibGVNb2RlbFNldHRpbmdzO1xyXG4gIHB1YmxpYyBmaWx0ZXJlZFJvd3M6IGFueVtdID0gW107XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCBjdG9yIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbmNvbnN0cnVjdG9yKFxyXG4gIGR2OiBhbnksXHJcbiAgcGFnZXM6IGFueVtdLFxyXG4gIGNvbHVtbnM6IENvbHVtbkRlZltdLFxyXG4gIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCxcclxuICBzZXR0aW5nczogVGFibGVNb2RlbFNldHRpbmdzLFxyXG4gIGhvc3Q6IEhUTUxFbGVtZW50LFxyXG4pIHtcclxuICBpZiAoIWN0eD8uc291cmNlUGF0aCkgdGhyb3cgbmV3IEVycm9yKFwiY3R4LnNvdXJjZVBhdGggbWlzc2luZ1wiKTtcclxuXHJcbiAgLyogXHUyNTAwXHUyNTAwIDAuIFx1RDU0NFx1QjREQyBcdUM4MDBcdUM3QTUgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwICovXHJcbiAgdGhpcy5kdiAgICAgICAgPSBkdjtcclxuICB0aGlzLnBhZ2VzICAgICA9IHBhZ2VzO1xyXG4gIHRoaXMuY29sdW1ucyAgID0gY29sdW1ucztcclxuICB0aGlzLmN0eCAgICAgICA9IGN0eDtcclxuICB0aGlzLnNldHRpbmdzICA9IHNldHRpbmdzO1xyXG4gIHRoaXMubm90ZVBhdGggID0gY3R4LnNvdXJjZVBhdGg7XHJcbiAgdGhpcy5ob3N0ICAgICAgPSBob3N0O1xyXG5cclxuICAvKiBcdTI1MDBcdTI1MDAgMS4gdmlld0lkIFx1QkEzQ1x1QzgwMCBcdUQ2NTVcdUJDRjQgKFx1MjZBMFx1RkUwRiBcdUMyMUNcdUMxMUMgXHVDOTExXHVDNjk0KSBcdTI1MDAgKi9cclxuICB0aGlzLnZpZXdJZCA9IHNldHRpbmdzLl9fdmlld0lkID8/IChzZXR0aW5ncy5fX3ZpZXdJZCA9IHV1aWQoKSk7XHJcblxyXG4gIC8qIFx1MjUwMFx1MjUwMCAyLiBsZWFmRWwgXHVEMEQwXHVDMEM5IFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCAqL1xyXG4gIGNvbnN0IGxlYWZFbCA9IGhvc3QuY2xvc2VzdChcIi53b3Jrc3BhY2UtbGVhZlwiKSBhcyBIVE1MRWxlbWVudCB8IG51bGw7XHJcblxyXG4gIC8qIFx1MjUwMFx1MjUwMCAzLiBwYW5lIFx1QjRGMVx1Qjg1RCAobGVhZiBcdUFDMDAgXHVDNzg4XHVDNzQ0IFx1QjU0Q1x1QjlDQykgXHUyNTAwICovXHJcbiAgaWYgKGxlYWZFbCkge1xyXG4gICAgdGFibGVTdGF0ZS5hZGRQYW5lKHtcclxuICAgICAgdmlld0lkICAgOiB0aGlzLnZpZXdJZCxcclxuICAgICAgbm90ZVBhdGggOiB0aGlzLm5vdGVQYXRoLFxyXG4gICAgICBkdixcclxuICAgICAgc2V0dGluZ3MsXHJcbiAgICAgIGN0eCxcclxuICAgICAgY29udGFpbmVyOiBob3N0LFxyXG4gICAgICBsZWFmRWwsXHJcbiAgICAgIHJlcmVuZGVyICAgIDogYXN5bmMgcCA9PiBhd2FpdCB0aGlzLmNvbXB1dGUocCksXHJcbiAgICAgIHJlZnJlc2hWaWV3IDogYXN5bmMgcCA9PiBhd2FpdCBzZXR0aW5ncy5fX19yZWZyZXNoSG9vaz8uKHApLFxyXG4gICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIExvZy53KFwiW0NvdmVyLVRhYmxlXSB3b3Jrc3BhY2UtbGVhZiBub3QgZm91bmQgXHUyMDEzIHNraXAgcGFuZSByZWdpc3RyYXRpb25cIik7XHJcbiAgfVxyXG59XHJcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgKiAyLiBcdUM2NzhcdUJEODAgXHVCMTc4XHVDRDlDIEFQSVxyXG4gICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gIC8qKiBcdUQ2MDRcdUM3QUMgXHVCREYwXHVDNUQwIFx1RDQ1Q1x1QzJEQ1x1RDU2MCBcdTIwMUNcdUQzOThcdUM3NzRcdUM5QzBcdUIxMjRcdUM3NzRcdUMxNTggXHVDODAxXHVDNkE5IFx1RDZDNFx1MjAxRCBcdUJDMzBcdUM1RjQgKi9cclxuICBwdWJsaWMgZGlzcGxheVJvd3M6IGFueVtdID0gW107XHJcbiAgLyoqIFx1RDU0NFx1RDEzMC9cdUFDODBcdUMwQzkvXHVDODE1XHVCODJDIFx1QzgwMVx1QzZBOSBcdUM4MDQgXHVDODA0XHVDQ0I0IFx1RDU4OSBcdUMyMTggKi9cclxuICBwdWJsaWMgdG90YWxSb3dzICA9IDA7XHJcblxyXG4gIC8qKiBNb2RlbCBcdUIwQjRcdUJEODAgXHVDMEMxXHVEMERDXHVCOTdDIFx1QzdBQ1x1QUNDNFx1QzBCMFx1RDU1OFx1QUNFMCBcdUFDQjBcdUFDRkNcdUI5N0MgXHVBQzMxXHVDMkUwXHVENTVDXHVCMkU0LiAqL1xyXG4gIGFzeW5jIGNvbXB1dGUocGFzc2l2ZSA9IGZhbHNlKSB7XHJcbiAgICAvKiBcdTI0NjAgY29weSAmIFx1QzgxNVx1QUREQ1x1RDY1NCAqL1xyXG4gICAgY29uc3QgY2xvbmVkID0gdGhpcy5wYWdlcy5tYXAoKHBnLGlkeCkgPT4ge1xyXG5cclxuICBjb25zdCBjcDphbnkgPSB7IC4uLnBnLCBfX2lkeDppZHggfTtcclxuXHJcbiAgLyogdGFncyBcdUJDMzBcdUM1RjQgXHVBQzE1XHVDODFDICovXHJcbiAgY3AudGFncyA9IEFycmF5LmlzQXJyYXkocGcudGFncykgPyBwZy50YWdzXHJcbiAgICAgICAgICA6IEFycmF5LmlzQXJyYXkocGcuZmlsZT8udGFncykgPyBwZy5maWxlLnRhZ3NcclxuICAgICAgICAgIDogcGcudGFncyA/IFtwZy50YWdzXSA6IFtdO1xyXG5cclxuICAvKiBcdTIwMTQgVGl0bGUgXHVBQ0IwXHVDODE1IFx1MjAxNCAqL1xyXG4gIGNvbnN0IGR2UGcgPSAoKCkgPT4ge1xyXG4gICAgdHJ5IHsgcmV0dXJuIHRoaXMuZHYucGFnZShwZy5maWxlLnBhdGgpOyB9XHJcbiAgICBjYXRjaCB7IHJldHVybiBudWxsOyB9XHJcbiAgfSkoKTtcclxuXHJcbiAgLyogXHVEMzBDXHVDNzdDXHVCQTg1IFx1QzU0OFx1QzgwNCBcdUNEOTRcdUNEOUMgKi9cclxuIC8qIGZpbGUuYmFzZW5hbWUgXHVDNzQwIENvbnRyb2xsZXIgXHVDNUQwXHVDMTFDIFx1RDU2RFx1QzBDMSBcdUM4RkNcdUM3ODVcdUI0MjggKi9cclxuICBjb25zdCBiYXNlTmFtZSA9IHBnLmZpbGU/LmJhc2VuYW1lID8/IFwiXCI7XHJcblxyXG4gIGNvbnN0IGZpbGVUaXRsZSA9XHJcbiAgICAgIGJhc2VOYW1lLmVuZHNXaXRoKFwiLmV4Y2FsaWRyYXdcIilcclxuICAgICAgICA/IGJhc2VOYW1lLnNsaWNlKDAsIC1cIi5leGNhbGlkcmF3XCIubGVuZ3RoKVxyXG4gICAgICAgIDogYmFzZU5hbWUgfHwgXCItXCI7XHJcblxyXG4gIGNwLl9fZm1UaXRsZSA9XHJcbiAgICAgIGR2UGc/LmZyb250bWF0dGVyPy50aXRsZVxyXG4gICA/PyBkdlBnPy50aXRsZVxyXG4gICA/PyBwZy5mcm9udG1hdHRlcj8udGl0bGVcclxuICAgPz8gZmlsZVRpdGxlO1xyXG5cclxuICAgICAgcmV0dXJuIGNwO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyogXHUyNDYxIFx1RDU0NFx1RDEzMFx1MDBCN1x1QUM4MFx1QzBDOSAqL1xyXG4gICAgbGV0IGZpbmUgPSBhd2FpdCB0aGlzLmFwcGx5QWxsRmlsdGVycyhjbG9uZWQpO1xyXG5cclxuICAgIC8qIFx1MjQ2MiBcdUM4MTVcdUI4MkMgKi9cclxuICAgIGZpbmUgPSB0aGlzLmFwcGx5U29ydChmaW5lKTtcclxuXHJcbiAgICB0aGlzLmZpbHRlcmVkUm93cyA9IGZpbmU7XHJcblxyXG4gICAgdGhpcy50b3RhbFJvd3MgPSBmaW5lLmxlbmd0aDtcclxuXHJcbiAgICAvKiBcdTI0NjMgcGFnaW5hdGlvbiAqL1xyXG4gICAgY29uc3QgcGVyID0gdGhpcy5zZXR0aW5ncy5wZXJQYWdlID8/IDEwO1xyXG4gICAgdGhpcy5kaXNwbGF5Um93cyA9IHBlciA+IDAgPyB0aGlzLnBhZ2luYXRlKGZpbmUsIHBlciwgcGFzc2l2ZSkgOiBmaW5lO1xyXG4gIH1cclxuXHJcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgKiAzLiBcdUQ1NDRcdUQxMzAgLyBcdUFDODBcdUMwQzlcclxuICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAvKiogXHVDODA0XHVDQ0I0IFx1RDU0NFx1RDEzMCAoXHVENTA0XHVCODYwXHVEMkI4XHVCOUU0XHVEMTMwICsgXHVEMERDXHVBREY4ICsgXHVBQzgwXHVDMEM5KSAqL1xyXG4gIHByaXZhdGUgYXN5bmMgYXBwbHlBbGxGaWx0ZXJzKHBhZ2VzOiBhbnlbXSk6IFByb21pc2U8YW55W10+IHtcclxuICAgIC8qIGZyb250LW1hdHRlciBcdUQ1MDRcdUI4NUNcdUQzN0NcdUQyRjBcdUJDQzQgXHVENTQ0XHVEMTMwICovXHJcbiAgICBmb3IgKGNvbnN0IGNvbCBvZiB0aGlzLmNvbHVtbnMuZmlsdGVyKGMgPT4gYy5maWx0ZXIpKSB7XHJcbiAgICAgIHBhZ2VzID0gYXdhaXQgdGhpcy5maWx0ZXJCeVByb3AoY29sLCBwYWdlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogXHVEMERDXHVBREY4IFx1RDU0NFx1RDEzMCAqL1xyXG4gICAgcGFnZXMgPSBhd2FpdCB0aGlzLmFwcGx5VGFnRmlsdGVyKHBhZ2VzKTtcclxuXHJcbiAgICAvKiBcdUQxNERcdUMyQTRcdUQyQjggXHVBQzgwXHVDMEM5ICovXHJcbiAgICBwYWdlcyA9IHRoaXMuYXBwbHlTZWFyY2gocGFnZXMpO1xyXG5cclxuICAgIHJldHVybiBwYWdlcztcclxuICB9XHJcblxyXG4gIC8qKiBcdUQ1MDRcdUI4NjBcdUQyQjhcdUI5RTRcdUQxMzAgXHVENTA0XHVCODVDXHVEMzdDXHVEMkYwIFx1QjJFOFx1Qzc3QyBcdUQ1NDRcdUQxMzAgKi9cclxuICBwcml2YXRlIGFzeW5jIGZpbHRlckJ5UHJvcChjOiBDb2x1bW5EZWYsIHBhZ2VzOiBhbnlbXSk6IFByb21pc2U8YW55W10+IHtcclxuICAgIGNvbnN0IGtleSA9IGBmaWx0ZXJfJHt0aGlzLnZpZXdJZH1fJHtjLnByb3B9YDtcclxuICAgIGNvbnN0IHZhbCA9IGdzKHRoaXMubm90ZVBhdGgsIHRoaXMudmlld0lkLCBrZXkpO1xyXG4gICAgaWYgKCF2YWwgfHwgdmFsID09PSBcIkFMTFwiKSByZXR1cm4gcGFnZXM7XHJcblxyXG4gICAgLyogXHVENkM0XHVCQ0Y0LVx1QjlBQ1x1QzJBNFx1RDJCOFx1QzVEMFx1QzExQyBcdUMwQUNcdUM2QTlcdUQ1NUMgXHVBQzgzXHVBQ0ZDIFx1QjNEOVx1Qzc3Q1x1RDU1QyBcdUFERENcdUNFNTlcdUM3M0NcdUI4NUMgbm9ybWFsaXplICovXHJcbiAgICBjb25zdCBub3JtYWxpemUgPSAocmF3OiBhbnkpID0+IHtcclxuICAgICAgc3dpdGNoIChjLmZvcm1hdCkge1xyXG4gICAgICAgIGNhc2UgXCJkYXRlXCI6IHtcclxuICBjb25zdCB5bWQgPSB0aGlzLm5vcm1hbGl6ZVlNRChyYXcpO1xyXG4gIHJldHVybiB5bWQgPz8gXCItXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgXCJ5ZWFyXCI6IHtcclxuICAgICAgICAgIGNvbnN0IHkgPSB0eXBlb2YgcmF3ID09PSBcIm51bWJlclwiXHJcbiAgICAgICAgICAgID8gU3RyaW5nKHJhdylcclxuICAgICAgICAgICAgOiBTdHJpbmcocmF3KS5tYXRjaCgvXFxkezR9Lyk/LlswXTtcclxuICAgICAgICAgIHJldHVybiB5ID8/IFwiLVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgcmV0dXJuIFN0cmluZyhyYXcgPz8gXCItXCIpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBwYWdlcy5maWx0ZXIocGcgPT4gbm9ybWFsaXplKHRoaXMuZ2V0VmFsKHBnLCBjLnByb3ApKSA9PT0gdmFsKTtcclxuICB9XHJcblxyXG4gIC8qKiBcdUQwRENcdUFERjggXHVENTQ0XHVEMTMwICovXHJcbiAgcHJpdmF0ZSBhc3luYyBhcHBseVRhZ0ZpbHRlcihwYWdlczogYW55W10pIHtcclxuICAgIGNvbnN0IHRnID0gZ3ModGhpcy5ub3RlUGF0aCwgdGhpcy52aWV3SWQsIGB0YWdGaWx0ZXJfJHt0aGlzLnZpZXdJZH1gKSB8fCBcIkFMTFwiO1xyXG4gICAgaWYgKHRnID09PSBcIkFMTFwiKSByZXR1cm4gcGFnZXM7XHJcbiAgICByZXR1cm4gcGFnZXMuZmlsdGVyKHBnID0+IHtcclxuY29uc3QgYXJyID0gQXJyYXkuaXNBcnJheShwZy5maWxlPy50YWdzKSA/IHBnLmZpbGUhLnRhZ3NcclxuICAgICAgICAgIDogQXJyYXkuaXNBcnJheShwZy50YWdzKSAgICAgICA/IHBnLnRhZ3NcclxuICAgICAgICAgIDogW3BnLmZpbGU/LnRhZ3MgPz8gcGcudGFnc107XHJcbnJldHVybiBhcnIuaW5jbHVkZXModGcpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKiogXHVEMTREXHVDMkE0XHVEMkI4IFx1QUM4MFx1QzBDOSAqL1xyXG4gIHByaXZhdGUgYXBwbHlTZWFyY2gocGFnZXM6IGFueVtdKSB7XHJcbiAgICBjb25zdCByZWFkeSA9IGdzKHRoaXMubm90ZVBhdGgsIHRoaXMudmlld0lkLCBgc2VhcmNoX3JlYWR5XyR7dGhpcy52aWV3SWR9YCk7XHJcbiAgICBpZiAoIXJlYWR5KSByZXR1cm4gcGFnZXM7XHJcblxyXG4gICAgY29uc3QgcSA9IChncyh0aGlzLm5vdGVQYXRoLCB0aGlzLnZpZXdJZCwgYHNlYXJjaF8ke3RoaXMudmlld0lkfWApIHx8IFwiXCIpXHJcbiAgICAgIC50cmltKClcclxuICAgICAgLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBpZiAoIXEpIHJldHVybiBwYWdlcztcclxuXHJcbiAgICAvKiBcdUM3NzhcdUIzNzFcdUMyQTQgXHVBRDZDXHVDRDk1KFx1QzVGNCBcdUFDMTIgXHVCQUE4XHVCNDUwIGxvd2VyLWpvaW4pICovXHJcbiAgICBjb25zdCBjb2xzID0gdGhpcy5jb2x1bW5zLmZpbHRlcihjID0+IGMuY29sdW1uKTtcclxuICAgIHBhZ2VzLmZvckVhY2gocGcgPT4ge1xyXG4gICAgICBjb25zdCBidWY6IHN0cmluZ1tdID0gW107XHJcbiAgICAgIGNvbHMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICBsZXQgdHYgPVxyXG4gICAgICAgICAgYy5wcm9wID09PSBcInRpdGxlX2xpbmtcIlxyXG4gICAgICAgICAgICA/IHBnLl9fZm1UaXRsZSB8fCBcIlwiXHJcbiAgICAgICAgICAgIDogU3RyaW5nKHRoaXMuZ2V0VmFsKHBnLCBjLnByb3ApIHx8IFwiXCIpO1xyXG4gICAgICAgIGJ1Zi5wdXNoKHR2LnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICB9KTtcclxuICAgICAgcGcuX19zZWFyY2hUZXh0ID0gYnVmLmpvaW4oXCIgXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHBhZ2VzLmZpbHRlcihwZyA9PlxyXG4gICAgICBxXHJcbiAgICAgICAgLnNwbGl0KFwiIFwiKVxyXG4gICAgICAgIC5ldmVyeSgodzpzdHJpbmcpID0+IHcgJiYgKHBnLl9fc2VhcmNoVGV4dCB8fCBcIlwiKS5pbmNsdWRlcyh3LnRvTG93ZXJDYXNlKCkpKSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAqIDQuIFx1QzgxNVx1QjgyQyAvIFx1RDM5OFx1Qzc3NFx1QzlDMFx1QjEyNFx1Qzc3NFx1QzE1OFxyXG4gICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gIHByaXZhdGUgYXBwbHlTb3J0KGFycjogYW55W10pIHtcclxuICAgIGNvbnN0IHByb3AgPSBncyh0aGlzLm5vdGVQYXRoLCB0aGlzLnZpZXdJZCwgYHNvcnRfJHt0aGlzLnZpZXdJZH1gKTtcclxuICAgIGNvbnN0IGRpciAgPSBncyh0aGlzLm5vdGVQYXRoLCB0aGlzLnZpZXdJZCwgYHNvcnRfZGlyZWN0aW9uXyR7dGhpcy52aWV3SWR9YCk7XHJcblxyXG4gICAgaWYgKCFwcm9wIHx8ICFkaXIpIHJldHVybiBhcnIuc29ydCgoYSxiKT0+YS5fX2lkeCAtIGIuX19pZHgpO1xyXG5cclxuICAgIC8qIFx1MjQ2MCBcdUM4MTVcdUI4MkNcdUQwQTQgXHVDNUM2XHVDNzNDXHVCQTc0IFx1MjE5MiBcdUM2RDBcdUJDRjggXHVDMjFDXHVDMTFDKF9faWR4KSAqL1xyXG4gICAgaWYgKCFwcm9wKSByZXR1cm4gYXJyLnNvcnQoKGEsYik9PmEuX19pZHggLSBiLl9faWR4KTtcclxuXHJcbiAgICBjb25zdCBjb2wgPSB0aGlzLmNvbHVtbnMuZmluZChjID0+IGMucHJvcCA9PT0gcHJvcCk7XHJcbiAgICBjb25zdCBmbXQgPSBjb2w/LmZvcm1hdCA/PyBcInRleHRcIjtcclxuXHJcbiAgICByZXR1cm4gYXJyLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgY29uc3QgQSA9IHRoaXMuZ2V0U29ydFZhbHVlKHRoaXMuZ2V0VmFsKGEsIHByb3ApLCBmbXQpO1xyXG4gICAgICBjb25zdCBCID0gdGhpcy5nZXRTb3J0VmFsdWUodGhpcy5nZXRWYWwoYiwgcHJvcCksIGZtdCk7XHJcblxyXG4gICAgICBjb25zdCBjbXAgPSAodHlwZW9mIEEgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIEIgPT09IFwibnVtYmVyXCIpXHJcbiAgICAgID8gQSAtIEJcclxuICAgICAgOiBKU09OLnN0cmluZ2lmeShBKS5sb2NhbGVDb21wYXJlKEpTT04uc3RyaW5naWZ5KEIpLFwia29cIik7XHJcbiAgICBcclxuICAgICAgcmV0dXJuIGRpcj09PVwiYXNjXCIgPyBjbXAgOiAtY21wO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHBhZ2luYXRlKGFycjogYW55W10sIHBlcjogbnVtYmVyLCBwYXNzaXZlOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBrZXkgICA9IGBwYWdpbmF0aW9uXyR7dGhpcy52aWV3SWR9YDtcclxuICAgIGNvbnN0IHRvdGFsID0gcGVyID4gMCA/IE1hdGguY2VpbChhcnIubGVuZ3RoIC8gcGVyKSA6IDE7XHJcblxyXG4gICAgbGV0IGlkeCA9IGdzKHRoaXMubm90ZVBhdGgsIHRoaXMudmlld0lkLCBrZXkpID8/IDA7XHJcbiAgICBpZiAodG90YWwgPT09IDApIGlkeCA9IDA7XHJcbiAgICBlbHNlIHtcclxuICAgICAgaWYgKGlkeCA8IDApIGlkeCA9IDA7XHJcbiAgICAgIGlmIChpZHggPj0gdG90YWwpIGlkeCA9IHRvdGFsIC0gMTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXBhc3NpdmUgJiYgaWR4ICE9PSBncyh0aGlzLm5vdGVQYXRoLCB0aGlzLnZpZXdJZCwga2V5KSlcclxuICAgICAgc3ModGhpcy5ub3RlUGF0aCwgdGhpcy52aWV3SWQsIGtleSwgaWR4KTtcclxuXHJcbiAgICByZXR1cm4gcGVyID4gMCA/IGFyci5zbGljZShpZHggKiBwZXIsIChpZHggKyAxKSAqIHBlcikgOiBbLi4uYXJyXTtcclxuICB9XHJcblxyXG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICogNS4gXHVDNzIwXHVEMkY4IChcdUIwQTBcdUM5REMgXHVEMzBDXHVDMkYxIC8gXHVDODE1XHVCODJDIFx1QUMxMiBcdUFDQzRcdUMwQjAgXHVCNEYxKVxyXG4gICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGF0ZVlNRFJlZ2V4ID0gL14oXFxkezR9KS0oXFxkezEsMn0pLShcXGR7MSwyfSkkLztcclxuICBwcml2YXRlIHJlYWRvbmx5IGlzb0RhdGVSZWdleCA9IC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSlULztcclxuICBwcml2YXRlIHJlYWRvbmx5IHRpbWVITVJlZ2V4ICA9IC9eKFxcZHsxLDJ9KTooXFxkezEsMn0pJC87XHJcblxyXG4gIHByaXZhdGUgcGFyc2VEYXRlWU1EKHN0cjogc3RyaW5nKSB7XHJcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIikgcmV0dXJuIG51bGw7XHJcbiAgICBjb25zdCBtID0gc3RyLm1hdGNoKHRoaXMuZGF0ZVlNRFJlZ2V4KTtcclxuICAgIGlmICghbSkgcmV0dXJuIG51bGw7XHJcbiAgICBjb25zdCB5ID0gK21bMV0sXHJcbiAgICAgIG1vID0gK21bMl0sXHJcbiAgICAgIGQgPSArbVszXTtcclxuICAgIGlmICh5IDwgMTAwMCB8fCB5ID4gOTk5OSB8fCBtbyA8IDEgfHwgbW8gPiAxMiB8fCBkIDwgMSB8fCBkID4gMzEpIHJldHVybiBudWxsO1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlKHksIG1vIC0gMSwgZCk7XHJcbiAgfVxyXG5cclxuICAvKiogSVNPKHl5eXktbW0tZGRUaGhcdTIwMjYpXHUwMEI3c2hvcnQoeXl5eS1tLWQpIFx1MjE5MiBcInl5eXktbS1kXCIgKi9cclxucHVibGljIG5vcm1hbGl6ZVlNRChzdHI6IGFueSk6IHN0cmluZyB8IG51bGwge1xyXG4gIGlmICghc3RyKSByZXR1cm4gbnVsbDtcclxuICBjb25zdCBzID0gU3RyaW5nKHN0cikuc3BsaXQoXCJUXCIpWzBdOyAgICAgICAgICAgICAvLyBcInl5eXktbW0tZGRcIlxyXG4gIGNvbnN0IG0gPSBzLm1hdGNoKC9eKFxcZHs0fSktKFxcZHsxLDJ9KS0oXFxkezEsMn0pJC8pO1xyXG4gIGlmICghbSkgcmV0dXJuIG51bGw7XHJcbiAgcmV0dXJuIGAkeyttWzFdfS0keyttWzJdfS0keyttWzNdfWA7ICAgICAgICAgICAgIC8vIFx1QzIyQlx1Qzc5MCBcdTIxOTIgMCBcdUM4MUNcdUFDNzBcclxufVxyXG5cclxuXHJcbiAgcHJpdmF0ZSBwYXJzZVRpbWVITShzdHI6IHN0cmluZykge1xyXG4gICAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpIHJldHVybiBudWxsO1xyXG4gICAgY29uc3QgbSA9IHN0ci5tYXRjaCh0aGlzLnRpbWVITVJlZ2V4KTtcclxuICAgIGlmICghbSkgcmV0dXJuIG51bGw7XHJcbiAgICBjb25zdCBoaCA9ICttWzFdLFxyXG4gICAgICBtbSA9ICttWzJdO1xyXG4gICAgaWYgKGhoID4gMjMgfHwgbW0gPiA1OSkgcmV0dXJuIG51bGw7XHJcbiAgICBjb25zdCBkdCA9IG5ldyBEYXRlKCk7XHJcbiAgICBkdC5zZXRIb3VycyhoaCwgbW0sIDAsIDApO1xyXG4gICAgcmV0dXJuIGR0O1xyXG4gIH1cclxuXHJcbi8qKiB2IFx1QUMxMlx1QUNGQyBmb3JtYXQgXHVDNzQ0IFx1QkMxQlx1QzU0NCBcdUM4MTVcdUI4MkNcdUM2QTkgXHVENTA0XHVCOUFDXHVCQkY4XHVEMkYwXHVCRTBDIFx1QkMxOFx1RDY1OCAqL1xyXG4vKiogXHVDODE1XHVCODJDXHVDNkE5IEtleSBcdUMwRERcdUMxMzEgXHUyNTAwIFx1QkFBOFx1QjRFMCBmb3JtYXQgXHVBQ0Y1XHVEMUI1ICovXHJcbnByaXZhdGUgZ2V0U29ydFZhbHVlKFxyXG4gIHY6IGFueSxcclxuICBmbXQ6IFwidGV4dFwiIHwgXCJudW1cIiB8IFwiZGF0ZVwiIHwgXCJ5ZWFyXCIgfCBcInRhZ3NcIiA9IFwidGV4dFwiXHJcbik6IG51bWJlciB8IHN0cmluZyB8IFtudW1iZXIsc3RyaW5nLHN0cmluZ10geyAgICAgIC8vIFx1MjE5MCB0dXBsZSBcdUNEOTRcdUFDMDBcclxuICBpZiAodiA9PSBudWxsKSByZXR1cm4gZm10ID09PSBcIm51bVwiID8gMCA6IFs5OSxcIlwiLFwiXCJdO1xyXG5cclxuICBzd2l0Y2ggKGZtdCkge1xyXG4gICAgY2FzZSBcIm51bVwiOiB7XHJcbiAgICAgIGNvbnN0IG4gPSBOdW1iZXIodik7XHJcbiAgICAgIHJldHVybiBpc05hTihuKSA/IDAgOiBuO1xyXG4gICAgfVxyXG4gICAgY2FzZSBcImRhdGVcIjoge1xyXG5sZXQgcyA9IFN0cmluZyh2KTtcclxuaWYgKHRoaXMuaXNvRGF0ZVJlZ2V4LnRlc3QocykpIHMgPSBzLnNsaWNlKDAsMTApOyAgICAgLy8gXHUyMTkwIFlZWVktTU0tREQgXHVDRDk0XHVDRDlDXHJcbmNvbnN0IGQgPSB0aGlzLnBhcnNlRGF0ZVlNRChzKTtcclxuICAgICAgcmV0dXJuIGQgPyBkLmdldFRpbWUoKSA6IDA7XHJcbiAgICB9XHJcbiAgICBjYXNlIFwieWVhclwiOiB7XHJcbiAgICAgIGNvbnN0IHkgPSBTdHJpbmcodikubWF0Y2goL1xcZHs0fS8pPy5bMF07XHJcbiAgICAgIHJldHVybiB5ID8gTnVtYmVyKHkpIDogMDtcclxuICAgIH1cclxuICAgIGNhc2UgXCJ0YWdzXCI6IHtcclxuICAgICAgY29uc3QgZmlyc3QgPSBub3JtYWxpemVUYWdzKHYpLnNvcnQoKGEsYik9PmEubG9jYWxlQ29tcGFyZShiLFwia29cIikpWzBdO1xyXG4gICAgICByZXR1cm4gZmlyc3QgPz8gXCJcIjtcclxuICAgIH1cclxuICAgIGRlZmF1bHQ6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRleHRcclxuICAgICAgY29uc3QgcmF3ICA9IFN0cmluZyh2ID8/IFwiXCIpO1xyXG4gICAgICBjb25zdCBiYXNlID0gcmF3Lm5vcm1hbGl6ZShcIk5GS0RcIilcclxuICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZGXS9nLFwiXCIpICAvLyBcdUFDQjBcdUQ1NjlcdUFFMzBcdUQ2MzggXHVDODFDXHVBQzcwXHJcbiAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvWyMqX2B+XFxbXFxdXFwoXFwpXFx7XFx9PD5cXC1dL2csXCJcIilcclxuICAgICAgICAgICAgICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgICAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICBjb25zdCBjaCAgID0gYmFzZVswXSA/PyBcIlwiO1xyXG4gICAgICAvKiBcdUFERjhcdUI4RjkgXHVDRjU0XHVCNERDOiBcdUM2MDFcdUJCMzggMCwgXHVENTVDXHVBRTAwIDEsIFx1QzIyQlx1Qzc5MCAyLCBcdUFFMzBcdUQ2MzggMywgXHVDNzc0XHVCQUE4XHVDOUMwIDQgKi9cclxuICAgICAgY29uc3QgZ3JwID1cclxuICAgICAgICAvW2Etel0vLnRlc3QoY2gpID8gMCA6XHJcbiAgICAgICAgL1tcdUFDMDAtXHVEN0EzXS8udGVzdChjaCkgPyAxIDpcclxuICAgICAgICAvXFxkLy50ZXN0KGNoKSAgICAgID8gMiA6XHJcbiAgICAgICAgL1xccHtFeHRlbmRlZF9QaWN0b2dyYXBoaWN9L3UudGVzdChjaCkgPyA0IDogMztcclxuICAgICAgcmV0dXJuIFtncnAsIGJhc2UsIHJhd107XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcbiAgcHJpdmF0ZSBmb3JtYXRBc0RhdGUodjogYW55KSB7XHJcbiAgICBpZiAodiA9PSBudWxsKSByZXR1cm4gXCJcIjtcclxuICAgIGNvbnN0IGQgPSB0aGlzLnBhcnNlRGF0ZVlNRChTdHJpbmcodikpO1xyXG4gICAgaWYgKCFkKSByZXR1cm4gU3RyaW5nKHYpO1xyXG4gICAgY29uc3QgeSA9IGQuZ2V0RnVsbFllYXIoKSxcclxuICAgICAgbSA9IGQuZ2V0TW9udGgoKSArIDEsXHJcbiAgICAgIGRkID0gZC5nZXREYXRlKCk7XHJcbiAgICByZXR1cm4gYCR7eX0tJHttIDwgMTAgPyBcIjBcIiA6IFwiXCJ9JHttfS0ke2RkIDwgMTAgPyBcIjBcIiA6IFwiXCJ9JHtkZH1gO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRWYWwocDogYW55LCBwcm9wOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBwcm9wLnN0YXJ0c1dpdGgoXCJmaWxlLlwiKVxyXG4gICAgICA/IHByb3Auc3BsaXQoXCIuXCIpLnJlZHVjZSgodiwgaykgPT4gdj8uW2tdLCBwKVxyXG4gICAgICA6IHBbcHJvcF07XHJcbiAgfVxyXG59XHJcblxyXG4vKiBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgXHVDQzM4XHVBQ0UwIFx1QzZEMFx1QkNGOCBcdUNGNTRcdUI0REMgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAqIFx1MDBCNyBcdUQ1NDRcdUQxMzAvXHVBQzgwXHVDMEM5L1x1QzgxNVx1QjgyQyBcdUI4NUNcdUM5QzEsIFx1QjBBMFx1QzlEQyBcdUQzMENcdUMyRjEgXHVCNEYxXHVDNzQwIGxlZ2FjeSBJbnRlcmFjdGl2ZVRhYmxlLnRzXHJcbiAqICAgXHVDNUQwXHVDMTFDIDE6MSBcdUQzRUNcdUQzMDVcdUQ1NThcdUM2MDBcdUM3NEMuIDpjb250ZW50UmVmZXJlbmNlW29haWNpdGU6MF17aW5kZXg9MH1cclxuICogXHUwMEI3IHBhbmUgc3RhdGUgZWNobyBcdUNDMjhcdUIyRTggXHVDODA0XHVCN0I1XHVDNzQwIFN0YXRlQ2VudGVyLnNldCgpIFx1QUQ2Q1x1RDYwNFx1QUNGQyBcdUIzRDlcdUM3N0MuXHJcbiAqIFx1MDBCNyBVSShVSU1hbmFnZXIpIFx1QjI5NCBzcmMvdWkvaW50ZXJhY3RpdmUtdGFibGUvVUlNYW5hZ2VyLnRzIFx1Q0MzOFx1Qzg3MC5cclxuICogXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwICovXHJcbiIsICIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogIEV2ZW50QnVzIFx1MjAxMyBHbG9iYWwgZGVib3VuY2VkIHJlZnJlc2ggZGlzcGF0Y2hlciAgICAgICAgICAgICAgICpcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgeyBBcHAsIFRBYnN0cmFjdEZpbGUsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IExvZyB9IGZyb20gXCIuLi8uLi9mZWF0dXJlcy9pbnRlcmFjdGl2ZS10YWJsZS91dGlscy9sb2dcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudEJ1cyB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgX2luc3Q6IEV2ZW50QnVzIHwgbnVsbCA9IG51bGw7XHJcbiAgc3RhdGljIGdldCBpKCkgeyByZXR1cm4gRXZlbnRCdXMuX2luc3QhOyB9XHJcblxyXG5wdWJsaWMgZW1pdChmaWxlPzogVEZpbGUpIHtcclxuICB0aGlzLmJyb2FkY2FzdChmaWxlKTsgICAgICAvLyBcdUIwQjRcdUJEODAgcHJpdmF0ZSBcdUJBNTRcdUMxMUNcdUI0REMgXHVCNzk4XHVENTUxXHJcbn1cclxuXHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgYXBwOiBBcHA7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBjdHJsU2V0ID0gbmV3IFNldDwoZmlsZT86IFRGaWxlKT0+dm9pZD4oKTtcclxuXHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihhcHA6IEFwcCkge1xyXG4gICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICB0aGlzLmF0dGFjaFZhdWx0SG9va3MoKTtcclxuICAgIHRoaXMuYXR0YWNoV29ya3NwYWNlSG9va3MoKTtcclxuICB9XHJcblxyXG4gIC8qIFx1MjUwMFx1MjUwMCBcdUNEMDhcdUFFMzBcdUQ2NTQ6IFx1RDUwQ1x1QjdFQ1x1QURGOFx1Qzc3OCBvbmxvYWQoKSBcdUMyREMgXHVENjM4XHVDRDlDIFx1MjUwMFx1MjUwMCAqL1xyXG4gIHN0YXRpYyBpbml0KGFwcDogQXBwKSB7XHJcbiAgICBpZiAoIUV2ZW50QnVzLl9pbnN0KSBFdmVudEJ1cy5faW5zdCA9IG5ldyBFdmVudEJ1cyhhcHApO1xyXG4gIH1cclxuXHJcbiAgLyogXHUyNTAwXHUyNTAwIENvbnRyb2xsZXIgXHVBQzAwIFx1Qzc5MFx1QzJFMFx1Qzc1OCByZWZyZXNoIFx1Q0Y1Q1x1QkMzMVx1Qzc0NCBcdUI0RjFcdUI4NUQgLyBcdUQ1NzRcdUM4MUMgXHUyNTAwXHUyNTAwICovXHJcbiAgb24oY2I6IChmaWxlPzogVEZpbGUpPT52b2lkKSAgeyB0aGlzLmN0cmxTZXQuYWRkKGNiKTsgfVxyXG4gIG9mZihjYjooZmlsZT86IFRGaWxlKT0+dm9pZCkgIHsgdGhpcy5jdHJsU2V0LmRlbGV0ZShjYik7IH1cclxuXHJcbiAgLyogXHUyNTAwXHUyNTAwIFx1QjBCNFx1QkQ4MDogZGVib3VuY2VkIGJyb2FkY2FzdCBcdTI1MDBcdTI1MDAgKi9cclxuICBwcml2YXRlIGRlYm91bmNlID0gPEYgZXh0ZW5kcyAoLi4uYTphbnlbXSk9PnZvaWQ+KGZuOkYsIG1zPTE1MCkgPT4ge1xyXG4gICAgbGV0IHQ6IG51bWJlcnxudWxsID0gbnVsbDtcclxuICAgIHJldHVybiAoLi4uYTogUGFyYW1ldGVyczxGPikgPT4ge1xyXG4gICAgICBpZiAodCkgY2xlYXJUaW1lb3V0KHQpO1xyXG4gICAgICB0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gZm4oLi4uYSksIG1zKTtcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBicm9hZGNhc3QgPSB0aGlzLmRlYm91bmNlKChmaWxlPzogVEZpbGUpID0+IHtcclxuICAgIHRoaXMuY3RybFNldC5mb3JFYWNoKGNiID0+IGNiKGZpbGUpKTtcclxuICB9LCAxNTApO1xyXG5cclxuICAvKiBcdTI1MDBcdTI1MDAgVmF1bHQgLyBNZXRhZGF0YSAvIFdvcmtzcGFjZSBIb29rcyBcdTI1MDBcdTI1MDAgKi9cclxuICBwcml2YXRlIGF0dGFjaFZhdWx0SG9va3MoKSB7XHJcbiAgICBjb25zdCB2ID0gdGhpcy5hcHAudmF1bHQ7XHJcbiAgICBbXCJtb2RpZnlcIixcImRlbGV0ZVwiLFwicmVuYW1lXCIsXCJjcmVhdGVcIl0uZm9yRWFjaCgoZXYpID0+XHJcbiAgICAgIHYub24oZXYgYXMgYW55LCAoZjpUQWJzdHJhY3RGaWxlKT0+IHtcclxuICAgICAgICBpZiAoZiBpbnN0YW5jZW9mIFRGaWxlKSB0aGlzLmJyb2FkY2FzdChmKTtcclxuXHJcbiAgICAgICAgXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIC8qIFx1RDgzRFx1RENEMSAgRGF0YXZpZXcgaW5kZXggXHVDNjQ0XHVCOENDIFx1MjE5MiBcdUQ2NTVcdUMyRTRcdUQ3ODggXHVDMEM4IFx1RDM5OFx1Qzc3NFx1QzlDMCBcdUQzRUNcdUQ1NjggKi9cclxuICAgIHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUub24oXCJyZXNvbHZlZFwiLCAoKSA9PiB0aGlzLmJyb2FkY2FzdCgpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXR0YWNoV29ya3NwYWNlSG9va3MoKSB7XHJcbiAgICAvKiBcdTI0NjAgXHVCODA4XHVDNzc0XHVDNTQ0XHVDNkMzIFx1QzgwNFx1Q0NCNCBcdUJDQzBcdUFDQkQgKi9cclxuICAgIHRoaXMuYXBwLndvcmtzcGFjZS5vbihcImxheW91dC1jaGFuZ2VcIiwgKCkgPT4gdGhpcy5icm9hZGNhc3QoKSk7XHJcblxyXG4gICAgLyogXHUyNDYxIFx1QzBBQ1x1QzZBOVx1Qzc5MFx1QUMwMCBcdUIyRTRcdUI5NzggXHVEMEVEL1x1QjlBQ1x1RDUwNFx1Qjg1QyBcdTIwMThcdUM4MDRcdUQ2NThcdTIwMTlcdUQ1NjAgXHVCNTRDICovXHJcbiAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oXCJhY3RpdmUtbGVhZi1jaGFuZ2VcIiwgKCkgPT5cclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmJyb2FkY2FzdCgpLCAxMDApICAgLy8gXHUyMTkwIDAuMSBzIGRlbGF5XHJcbiAgICApO1xyXG4gIH1cclxuICAgIC8qKiBcdUQ4M0RcdURDNDggXHUyNzhBIFx1QzY3OFx1QkQ4MFx1QzVEMFx1QzExQyBcdUFDMTVcdUM4MUNcdUI4NUMgXHVDMEM4XHVCODVDIFx1QUNFMFx1Q0U2OFx1Qzc0NCBcdUM2OTRcdUNDQURcdUQ1NjAgXHVCNTRDIFx1QzBBQ1x1QzZBOSAqL1xyXG5mb3JjZVJlZnJlc2goZmlsZT86IFRGaWxlKSB7XHJcbiAgTG9nLmQoXCJbQ1RdIEV2ZW50QnVzLmZvcmNlUmVmcmVzaCgpXCIpO1xyXG4gIHRoaXMuYnJvYWRjYXN0KGZpbGUpO1xyXG59XHJcbn0iLCAiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIHNyYy9mZWF0dXJlcy9pbnRlcmFjdGl2ZS10YWJsZS9JbnRlcmFjdGl2ZVRhYmxlQ29udHJvbGxlci50c1xyXG4gKiAgIFx1MjAxMyBhdXRvLWdlbmVyYXRlZCBmcm9tIGxlZ2FjeSBDb3Zlci1UYWJsZSB2MjAyNS0wNVxyXG4gKiAgIFx1MjAyMiBcdUM4MDRcdUNDQjQgXHVDNzc0XHVBRDAwIFx1Q0Y1NFx1QjREQyBcdTIwMTMgXHVDMjE4XHVDODE1IFx1QUUwOFx1QzlDMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogIEludGVyYWN0aXZlVGFibGVDb250cm9sbGVyXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgXHUyMDIyIFx1MjAxQ1x1QzU2MFx1RDUwQ1x1QjlBQ1x1Q0YwMFx1Qzc3NFx1QzE1OCBcdUFDQzRcdUNFMzUoQ29udHJvbGxlcilcdTIwMUQgXHUyMDEzIFx1QjM3MFx1Qzc3NFx1RDEzMChNb2RlbCkgXHUyMTk0IFVJKFZpZXcpIFx1QzkxMVx1QzdBQ1xyXG4gKiAgXHUyMDIyIFx1QzhGQ1x1QzY5NCBcdUM1RURcdUQ1NjBcclxuICogICAgICBcdTI0NjAgRGF0YXZpZXcgcGFnZXNcdTIwMDZcdUMyMThcdUM5RDEobWQgKyBjYW52YXMpXHJcbiAqICAgICAgXHUyNDYxIEludGVyYWN0aXZlVGFibGVNb2RlbCBcdUMwRERcdUMxMzEgXHVCQzBGIFx1QzdBQ1x1QUNDNFx1QzBCMCBcdUM2OTRcdUNDQURcclxuICogICAgICBcdTI0NjIgVUlNYW5hZ2VyIFx1QzVEMCBcdUFDQzRcdUMwQjAgXHVBQ0IwXHVBQ0ZDIFx1QzgwNFx1QjJFQyBcdTIxOTIgXHVDMkU0XHVDODFDIERPTSBcdUI4MENcdUIzNTRcclxuICogICAgICBcdTI0NjMgXHVDMEMxXHVEMERDKHRhYmxlU3RhdGUpIFx1QkNDMFx1QUNCRFx1MDBCN1x1QjNEOVx1QUUzMFx1RDY1NChQYWdpbmF0aW9uIC8gXHVENTQ0XHVEMTMwIFx1QjRGMSlcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBcdTI3MjggXHVENzUwXHVCOTg0IFx1QzY5NFx1QzU3RFxyXG4gKiAgICAgIHJlbmRlckF1dG9WaWV3KClcclxuICogICAgICAgIFx1MjUxQ1x1MjUwMCBnYXRoZXJQYWdlcygpICAgXHUyMTkwIERhdGF2aWV3ICsgdmF1bHQgXHVDMkE0XHVDRTk0XHJcbiAqICAgICAgICBcdTI1MUNcdTI1MDAgYnVpbGRDb2x1bW5zKCkgIFx1MjE5MCBzZXR0aW5ncy5wcm9wcyBcdTIxOTIgQ29sdW1uRGVmW11cclxuICogICAgICAgIFx1MjUxQ1x1MjUwMCBuZXcgSW50ZXJhY3RpdmVUYWJsZU1vZGVsKFx1MjAyNilcclxuICogICAgICAgIFx1MjUxNFx1MjUwMCB1aS5idWlsZFZpZXcoXHUyMDI2bW9kZWwuZGlzcGxheVJvd3MsXHUyMDI2KVxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgQXBwLFxyXG4gIFRGaWxlLFxyXG4gIE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsXHJcbiAgVEFic3RyYWN0RmlsZVxyXG59IGZyb20gXCJvYnNpZGlhblwiO1xyXG5cclxuaW1wb3J0IHsgVUlNYW5hZ2VyLCBVSVRhYmxlQ2FsbGJhY2tzIH0gZnJvbSBcIi4uLy4uL3VpL2ludGVyYWN0aXZlLXRhYmxlL1VJTWFuYWdlclwiO1xyXG5pbXBvcnQgVGFibGVDb250cm9sbGVyIGZyb20gXCIuL3NlcnZpY2VzL1RhYmxlQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBJbnRlcmFjdGl2ZVRhYmxlTW9kZWwsXHJcbiAgICAgICAgIFRhYmxlTW9kZWxTZXR0aW5ncyAgICAgICB9ICAgICBmcm9tIFwiLi9JbnRlcmFjdGl2ZVRhYmxlTW9kZWxcIjtcclxuaW1wb3J0IHR5cGUgeyBDb2x1bW5EZWYgfSAgICAgICAgICAgICAgICAgICAgZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgdGFibGVTdGF0ZSwgVmlld0luc3QgYXMgU3RhdGVJbnN0IH0gICBmcm9tIFwiLi4vLi4vY29yZS9zdGF0ZS9TdGF0ZUNlbnRlclwiO1xyXG5pbXBvcnQgeyBFdmVudEJ1cyB9IGZyb20gXCIuLi8uLi9jb3JlL2V2ZW50cy9FdmVudEJ1c1wiO1xyXG5pbXBvcnQgeyBMb2cgfSBmcm9tIFwiLi91dGlscy9sb2dcIjtcclxuXHJcblxyXG5cclxuLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAwLiB0YWJsZVN0YXRlIFx1MjE5MiBcdUFDMDRcdUM3NzQgSGVscGVyIChncyAvIHNzKVxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5mdW5jdGlvbiBncyhub3RlOiBzdHJpbmcsIHZpZDogc3RyaW5nLCBrOiBzdHJpbmcpIHtcclxuICByZXR1cm4gdGFibGVTdGF0ZS5nZXQobm90ZSwgdmlkKT8uW2tdID8/IG51bGw7XHJcbn1cclxuZnVuY3Rpb24gc3Mobm90ZTogc3RyaW5nLCB2aWQ6IHN0cmluZywgazogc3RyaW5nLCB2OiBhbnkpIHtcclxuICAvKiBQYW5lKFx1QkRGMCkgXHVBQzAwIFx1QzBCNFx1QzU0NCBcdUM3ODhcdUM3M0NcdUJBNzQgdGFibGVTdGF0ZS5zZXQgXHVDNzc0XHVDNkE5LFxyXG4gICAgIFx1QzU0NFx1QjJDOFx1QkE3NCBsb2NhbFN0b3JhZ2UgXHVDOUMxXHVDODExIFx1QUMzMVx1QzJFMChcdTIxOTQgUGFuZSBjbG9zZWQpICovXHJcbiAgY29uc3QgbGlzdCA9ICh0YWJsZVN0YXRlIGFzIGFueSkucGFuZU1hcC5nZXQodmlkKSBhcyBhbnlbXSB8IHVuZGVmaW5lZDtcclxuICBjb25zdCBpbnN0ID0gbGlzdD8uWzBdO1xyXG4gIGlmIChpbnN0KSB7XHJcbiAgICBjb25zdCBzaWxlbnQgPSAhIShpbnN0IGFzIGFueSkuc2tpcFN0YXRlV3JpdGU7XHJcbiAgICB0YWJsZVN0YXRlLnNldChpbnN0LCB7IFtrXTogdiB9LCBmYWxzZSwgc2lsZW50KTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgY29uc3Qga2V5ID0gYGNvdmVyVGFibGU6OiR7bm90ZX06OiR7dmlkfWA7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkgfHwgXCJ7fVwiKTtcclxuICAgIGRhdGFba10gPSB2O1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcbiAgfSBjYXRjaCB7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHsgW2tdOiB2IH0pKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZGF5WU1EKCk6IHN0cmluZyB7XHJcbiAgY29uc3QgZCA9IG5ldyBEYXRlKCk7ICAgICAgICAgICAgLy8gXHVDMkRDXHVDMkE0XHVEMTVDIFx1QjBBMFx1QzlEQyAoQXNpYS9TZW91bClcclxuICBjb25zdCB5ID0gZC5nZXRGdWxsWWVhcigpO1xyXG4gIGNvbnN0IG0gPSBkLmdldE1vbnRoKCkgKyAxO1xyXG4gIGNvbnN0IGRkID0gZC5nZXREYXRlKCk7XHJcbiAgcmV0dXJuIGAke3l9LSR7bSA8IDEwID8gXCIwXCIgOiBcIlwifSR7bX0tJHtkZCA8IDEwID8gXCIwXCIgOiBcIlwifSR7ZGR9YDtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5qZWN0Q3JlYXRlZChwYWdlOiBhbnkpOiBhbnkge1xyXG4vLyBjcmVhdGVkIFx1QUMxMlx1Qzc3NCBcdUM1QzZcdUM3M0NcdUJBNzQgXHUyMDFDXHVEMzBDXHVDNzdDIFx1QzBERFx1QzEzMVx1Qzc3QyhjdGltZSlcdTIwMURcdUI4NUMgXHVBQ0UwXHVDODE1XHJcbmlmICghcGFnZS5jcmVhdGVkIHx8IHBhZ2UuY3JlYXRlZCA9PT0gXCItXCIpIHtcclxuICBjb25zdCBib3JuID1cclxuICAgIC8qIERhdGF2aWV3IDAuNVx1MjE5MTogTHV4b24gRGF0ZVRpbWUgXHVBQzFEXHVDQ0I0ICovXHJcbiAgICBwYWdlLmZpbGU/LmNkYXk/LnRvSVNPRGF0ZT8uKCkgPz9cclxuICAgIHBhZ2UuZmlsZT8uY3RpbWU/LnRvSVNPRGF0ZT8uKCkgPz9cclxuICAgIC8qIERhdGF2aWV3IDAuNFx1MjE5MzogZXBvY2ggXHVDMjJCXHVDNzkwICovXHJcbiAgICAodHlwZW9mIHBhZ2UuZmlsZT8uY3RpbWUgPT09IFwibnVtYmVyXCJcclxuICAgICAgPyBlcG9jaFRvWU1EKHBhZ2UuZmlsZS5jdGltZSlcclxuICAgICAgOiB0b2RheVlNRCgpKTsgICAgICAgICAgICAvLyBcdTIxOTkgXHVDRDVDXHVENkM0IGZhbGxiYWNrXHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5wYWdlLFxyXG4gICAgY3JlYXRlZDogYm9ybixcclxuICAgIGZyb250bWF0dGVyOiB7IC4uLnBhZ2UuZnJvbnRtYXR0ZXIsIGNyZWF0ZWQ6IGJvcm4gfVxyXG4gIH07XHJcbn1cclxucmV0dXJuIHBhZ2U7XHJcblxyXG59XHJcblxyXG4vKiogZXBvY2ggbWlsbGlzIFx1MjE5MiBZWVlZLU1NLUREIChBc2lhL1Nlb3VsKSAqL1xyXG5mdW5jdGlvbiBlcG9jaFRvWU1EKG1zOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gIGNvbnN0IGQgPSBuZXcgRGF0ZShtcyk7XHJcbiAgY29uc3QgeSA9IGQuZ2V0RnVsbFllYXIoKTtcclxuICBjb25zdCBtID0gZC5nZXRNb250aCgpICsgMTtcclxuICBjb25zdCBkZCA9IGQuZ2V0RGF0ZSgpO1xyXG4gIHJldHVybiBgJHt5fS0ke208MTA/XCIwXCI6XCJcIn0ke219LSR7ZGQ8MTA/XCIwXCI6XCJcIn0ke2RkfWA7XHJcbn1cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgMS4gQ29udHJvbGxlclxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgY2xhc3MgSW50ZXJhY3RpdmVUYWJsZUNvbnRyb2xsZXIge1xyXG4gIC8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIFx1RDU0NFx1QjREQyBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgY2IgICA6IFVJVGFibGVDYWxsYmFja3M7XHJcbiAgcHJpdmF0ZSByZWFkb25seSB1aSAgIDogVUlNYW5hZ2VyO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgc3ZjICA6IFRhYmxlQ29udHJvbGxlcjtcclxuICBwcml2YXRlIG1vZGVscyAgICAgICAgOiBNYXA8c3RyaW5nLCBJbnRlcmFjdGl2ZVRhYmxlTW9kZWw+ID0gbmV3IE1hcCgpO1xyXG4gIHByaXZhdGUgX3JlbmRlcmluZyAgICA9IGZhbHNlO1xyXG4gIHByaXZhdGUgcmVmcmVzaFRpbWVyIDogbnVtYmVyIHwgbnVsbCA9IG51bGw7ICAvLyBkZWJvdW5jZWQgcmVmcmVzaFxyXG4gIHByaXZhdGUgc2tpcFN0YXRlV3JpdGU9IGZhbHNlOyAgICAgLy8gcmVyZW5kZXIocGFzc2l2ZSkgXHUyMTkyIFx1QzBDMVx1RDBEQyBcdUM3QUNcdUM4MDBcdUM3QTUgXHVDQzI4XHVCMkU4XHJcblxyXG4gIC8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIGN0b3IgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGFwcDogQXBwKSB7XHJcbiAgICAvKiBcdTI1QzcgXHVDMTFDXHVCRTQ0XHVDMkE0ICYgVUkgXHVDRDA4XHVBRTMwXHVENjU0IFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCAqL1xyXG4gICAgdGhpcy5zdmMgPSBuZXcgVGFibGVDb250cm9sbGVyKGFwcCk7ICAgICAgICAgICAgLyogXHVEODNEXHVEQ0ExIFx1QzBERFx1QzEzMSAqL1xyXG5cclxuXHJcbiAgICAvKiBcdTI1QzcgIFx1QzgwNFx1QzVFRCBSZWZyZXNoQnVzIFx1QUQ2Q1x1QjNDNSAgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwICovXHJcbiAgICBjb25zdCBidXNDYiA9IChmaWxlPzogVEZpbGUpID0+IHRoaXMucmVmcmVzaEJ5QnVzKGZpbGUpO1xyXG4gICAgRXZlbnRCdXMuaS5vbihidXNDYik7XHJcbiAgICAvKiBcdUM1QjhcdUI4NUNcdUI0REMgXHVCMzAwXHVCRTQ0ICovXHJcbiAgICAodGhpcyBhcyBhbnkpLl9fY292ZXJfdW5sb2FkX18gPSAoKSA9PiBFdmVudEJ1cy5pLm9mZihidXNDYik7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAvKiBcdTI1QzcgVUkgXHVDRjVDXHVCQzMxIFx1QzgxNVx1Qzc1OCBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuICAgIHRoaXMuY2IgPSB7XHJcbiAgICAgIC8qIFx1QzBDMVx1RDBEQyAqL1xyXG4gIGdldFN0YXRlICAgICA6IGdzLFxyXG4gIHNldFN0YXRlICAgICA6IHNzLFxyXG4gIGdldExvY2FsU3RhdGU6IChuLCB2KSA9PiB0YWJsZVN0YXRlLmdldChuLCB2KSAsXHJcblxyXG4gICAgICAvKiBcdUM3MjBcdUQyRjggKi9cclxuICAgICAgZ2V0VmFsICAgICAgIDogKHBnLCBwcm9wKSA9PiB0aGlzLnN2Yy5nZXRWYWwocGcsIHByb3ApLFxyXG4gICAgICBwYXJzZURhdGVZTUQgOiAocykgPT4gdGhpcy5zdmMucGFyc2VEYXRlWU1EKHMpLFxyXG4gICAgICBmb3JtYXRBc0RhdGUgOiAodikgPT4gdGhpcy5zdmMuZm9ybWF0QXNEYXRlKHYpLFxyXG4gICAgICBnZXRTb3J0VmFsdWUgOiAodikgPT4gdGhpcy5zdmMuZ2V0U29ydFZhbHVlKHYpLFxyXG4gICAgICBzdWdnZXN0ZXIgICAgOiAodmFscykgPT4gdGhpcy5zdmMuc3VnZ2VzdGVyKHZhbHMpLFxyXG5cclxuICAgICAgLyogXHVCODBDXHVCMzU0ICovXHJcbiAgcmVyZW5kZXIgOiBhc3luYyAoKSA9PiB7IGF3YWl0IHRoaXMucmVyZW5kZXIodHJ1ZSk7IH0sXHJcbiAgICBzeW5jOiBhc3luYyAobm90ZSwgdmlkLCBrZXksIHZhbCkgPT4ge1xyXG4gICAgc3Mobm90ZSwgdmlkLCBrZXksIHZhbCk7XHJcbiAgICBhd2FpdCB0aGlzLnJlcmVuZGVyKHRydWUsIHZpZCk7XHJcbiAgfSxcclxuXHJcbiAgICAgIC8qIFx1QzgwNFx1Q0NCNCBcdUMwQzFcdUQwREMgXHVDRDA4XHVBRTMwXHVENjU0ICovXHJcbiAgcmVzZXRTdGF0ZTogYXN5bmMgKCkgPT4ge31cclxuICAgIH07XHJcblxyXG4gICAgLyogXHUyNUM3IFVJTWFuYWdlciBcdTIwMTMgXHVDMkU0XHVDODFDIFZpZXcgXHVBRDZDXHVDRDk1IFx1QjJGNFx1QjJGOSAqL1xyXG4gICAgdGhpcy51aSA9IG5ldyBVSU1hbmFnZXIoYXBwLCB0aGlzLmNiKTtcclxuXHJcblxyXG5cclxuXHJcbi8qIFx1MjVDNiBcdUQwRUQgXHVENUU0XHVCMzU0IFx1RDA3NFx1QjlBRCBcdTIxOTIgY292ZXItdmlldyByZWZyZXNoICovXHJcbi8qIFx1MjUwMFx1MjUwMCBcdUQwRUQgXHVENUU0XHVCMzU0IFx1RDA3NFx1QjlBRCBcdTIxOTIgY292ZXItdmlldyByZWZyZXNoIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCAqL1xyXG50aGlzLmFwcC53b3Jrc3BhY2UuY29udGFpbmVyRWwuYWRkRXZlbnRMaXN0ZW5lcihcclxuICBcImNsaWNrXCIsXHJcbiAgKGV2dCkgPT4ge1xyXG4gICAgaWYgKCEoZXZ0LnRhcmdldCBhcyBIVE1MRWxlbWVudClcclxuICAgICAgICAgIC5jbG9zZXN0KFwiLndvcmtzcGFjZS10YWItaGVhZGVyLnRhcHBhYmxlXCIpKSByZXR1cm47XHJcblxyXG4gICAgLyogXHUyNjA1IFx1MjQ2MCBcdUJDMTRcdUI4NUMgXHVDMkU0XHVENTg5XHVENTU4XHVDOUMwIFx1QjlEMFx1QUNFMCwgbGVhZiBcdUFDMDAgXHVDNjQ0XHVDODA0XHVENzg4IFx1QUQ1MFx1Q0NCNFx1QjQxQyBcdUM3NzRcdUQ2QzRcdUI4NUMgXHVCQkY4XHVCOEVDXHVCMkU0ICovXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAvLyBcdTIxOTAgMC4xLTAuMiBzIFx1QzgxNVx1QjNDNFx1QkE3NCBcdUNEQTlcdUJEODRcclxuICAgICAgY29uc3QgaG9zdCA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmPy52aWV3XHJcbiAgICAgICAgPy5jb250YWluZXJFbD8ucXVlcnlTZWxlY3Rvcj8uKFwiW2RhdGEtY292ZXItdmlld11cIikgYXMgSFRNTEVsZW1lbnR8bnVsbDtcclxuICAgICAgaWYgKCFob3N0KSByZXR1cm47ICAgICAgICAgICAgICAgICAgIC8vIFx1QzVFQ1x1QzgwNFx1RDc4OCBcdUM1QzZcdUM3M0NcdUJBNzQgXHVDNTQ0XHVCQjM0IFx1Qzc3Q1x1QjNDNCBcdUM1NDggXHVENTY4XHJcblxyXG4gICAgICBjb25zdCB2aWQgID0gaG9zdC5kYXRhc2V0LmNvdmVyVmlldyE7XHJcbiAgICAgIGNvbnN0IG5vdGUgPSAodGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY/LnZpZXcgYXMgYW55KT8uZmlsZT8ucGF0aCA/PyBcIlwiO1xyXG5cclxuICAgICAgLyogXHUyNDYxIEFMTCBcdUJDODRcdUQyQkNcdUFDRkMgXHUyMDE4XHVDNjQ0XHVDODA0XHVENzg4IFx1QjNEOVx1Qzc3Q1x1RDU1Q1x1MjAxOSBcdUQyQjhcdUI5QUNcdUFDNzAgXHVENjM4XHVDRDlDICovXHJcbiAgICAgIHRoaXMuY2Iuc3luYyhcclxuICAgICAgICBub3RlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdGVQYXRoXHJcbiAgICAgICAgdmlkLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2aWV3SWRcclxuICAgICAgICAvLyBcdUM1NDRcdUJCMzQgZmlsdGVyIGtleSBcdUIwOTggXHVENTU4XHVCMDk4IFx1QUNFOFx1Qjc3QyBcdTIwMUNBTExcdTIwMUQgXHVCODVDIFx1QjM1OFx1QzlDMFx1QkE3NCBcdUFFMzBcdUM4NzQgXHVCODVDXHVDOUMxXHVDNzc0IHJlcmVuZGVyXHJcbiAgICAgICAgYHRhZ0ZpbHRlcl8ke3ZpZH1gLCAgICAgICAgICAgICAgICAvLyBcdTIxOTAgXHVDODc0XHVDN0FDXHVENTU4XHVCMjk0IFx1RDBBNFxyXG4gICAgICAgIFwiQUxMXCJcclxuICAgICAgKTtcclxuICAgIH0sIDE4MCk7ICAgLy8gXHUyMTkwIGRlbGF5OyAxNTAtMjAwIG1zIFx1QzBBQ1x1Qzc3NCBcdUM1NDRcdUJCMzQgXHVBQzEyIE9LXHJcbiAgfSxcclxuICB0cnVlICAgLy8gY2FwdHVyZVxyXG4pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICB9XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIFx1RDBFRCBcdUQ1RTRcdUIzNTQoY2xpY2spIFx1MjE5MiBcdUJBQThcdUI0RTAgY292ZXItdmlldyBcdUFDMTVcdUM4MUMgcmVyZW5kZXJcclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxucHJpdmF0ZSBoYW5kbGVXb3Jrc3BhY2VUYWJDbGljayA9IChlOiBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XHJcbiAgLyogXHUyNDYwIFx1QzJFNFx1QzgxQyBcdUQwRUQgXHVENUU0XHVCMzU0IFx1QzYwMVx1QzVFRFx1Qzc3OFx1QzlDMCBcdUQzMTBcdUJDQzQgKi9cclxuICBjb25zdCBoZWFkZXIgPSAoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpXHJcbiAgICAuY2xvc2VzdChcIi53b3Jrc3BhY2UtdGFiLWhlYWRlci50YXBwYWJsZVwiKTtcclxuICBpZiAoIWhlYWRlcikgcmV0dXJuO1xyXG5cclxuICAvKiBcdTI0NjEgXHVENjU0XHVCQTc0XHVDNUQwIFx1Qzg3NFx1QzdBQ1x1RDU1OFx1QjI5NCBcdUJBQThcdUI0RTAgY292ZXItdmlldyBcdUMyMUNcdUQ2OEMgKi9cclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50PihcIltkYXRhLWNvdmVyLXZpZXddXCIpLmZvckVhY2goZWwgPT4ge1xyXG4gICAgY29uc3QgdmlkID0gZWwuZGF0YXNldC5jb3ZlclZpZXchO1xyXG4gICAgLyogbW9kZWxzIFx1QzVEMCBcdUM3NzRcdUJCRjggXHVCNEYxXHVCODVEXHVCM0ZDIFx1Qzc4OFx1QzczQ1x1QkE3NCBcdUJDMTRcdUI4NUMgcmVyZW5kZXIgICovXHJcbiAgICBpZiAodGhpcy5tb2RlbHMuaGFzKHZpZCkpIHtcclxuICAgICAgdGhpcy5yZXJlbmRlcih0cnVlLCB2aWQpOyAgICAgICAgICAvLyBcdTIxOTAgRmlsdGVyIFx1MjAxOEFMTFx1MjAxOSBcdUFDRkMgXHVBQzE5XHVDNzQwIFx1QUNCRFx1Qjg1Q1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLyogKFx1QjREQ1x1QkIzQ1x1QUM4QykgXHVEMEVEXHVDNzc0IFx1QzBDOFx1Qjg1QyBcdUM1RjRcdUI4MzhcdUIyOTRcdUIzNzAgbW9kZWxzIFx1QzVEMCBcdUM1NDRcdUM5QzEgXHVDNUM2XHVCMkU0XHVCQTc0OlxyXG4gICAgICAgXHUyMDEzIHZpZXdJZCBcdUI5N0MgXHVDNzc0XHVDNkE5XHVENTc0IFx1Q0Q1Q1x1Q0QwOCByZW5kZXIgXHVENkM0IFx1QjJFNFx1QzJEQyByZXJlbmRlciAqL1xyXG4gICAgY29uc3QgbWRsID0gWy4uLnRoaXMubW9kZWxzLnZhbHVlcygpXS5maW5kKG0gPT4gIW1bXCJob3N0XCJdLmlzQ29ubmVjdGVkKTtcclxuICAgIGlmIChtZGwpIHRoaXMucmVyZW5kZXIodHJ1ZSwgbWRsW1widmlld0lkXCJdKTtcclxuICB9KTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICBcclxuXHJcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgKiAgcmVuZGVyQXV0b1ZpZXcoKVxyXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICogIFx1MjAyMiBEYXRhdmlldyBBUEkoZHYpIFx1QzY0MCBzZXR0aW5ncyBcdUI5N0MgXHVCQzFCXHVDNTQ0IFx1Qzc5MFx1QjNEOVx1QzczQ1x1Qjg1QyBcdUQzRjRcdUIzNTQgXHVDNzkwXHVCOENDXHJcbiAgICogICAgKG1kICsgY2FudmFzKSBcdUI5N0MgXHVDMjE4XHVDOUQxXHVENTU4XHVBQ0UwIFx1RDE0Q1x1Qzc3NFx1QkUxNFx1Qzc0NCBcdUI4MENcdUIzNTRcclxuICAgKiAgXHUyMDIyIHBhc3NpdmUgPSB0cnVlIFx1MjE5MiBcdUMwQzFcdUQwREMobG9jYWxTdG9yYWdlKSBcdUM3QUNcdUM4MDBcdUM3QTUgXHVDQzI4XHVCMkU4XHJcbiAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuICBwdWJsaWMgYXN5bmMgcmVuZGVyQXV0b1ZpZXcoXHJcbiAgICBkdiAgICAgICAgOiBhbnksXHJcbiAgICBfc2V0dGluZ3MgIDogVGFibGVNb2RlbFNldHRpbmdzID0ge30sXHJcbiAgICBjdHg/ICAgICAgOiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxyXG4gICAgaG9zdFByZT8gIDogSFRNTEVsZW1lbnQsXHJcbiAgICBwYXNzaXZlICAgPSBmYWxzZVxyXG4gICkge1xyXG4gICAgY29uc3Qgc2V0dGluZ3M6IFRhYmxlTW9kZWxTZXR0aW5ncyA9IHsgLi4uX3NldHRpbmdzIH07XHJcblxyXG4gICAgICAvKiBcdTI1QjggXHUyNDYxIFx1RDYzOFx1RDY1OFx1QzEzMSBcdUQzMjhcdUNFNTggXHUyMTkzXHUyMTkzXHUyMTkzIChcdUM3NzQgXHVCRTE0XHVCODVEIFx1Q0Q5NFx1QUMwMCkgKi9cclxuICBpZiAoc2V0dGluZ3MucGVyUGFnZSA9PSBudWxsKSB7XHJcbiAgICBjb25zdCBsZWdhY3lQZXIgPVxyXG4gICAgICAoX3NldHRpbmdzIGFzIGFueSlbXCJlbnRyaWVzIG9uIHBhZ2VcIl0gPz9cclxuICAgICAgKF9zZXR0aW5ncyBhcyBhbnkpLmVudHJpZXNfb25fcGFnZSA/P1xyXG4gICAgICAoX3NldHRpbmdzIGFzIGFueSkuZW50cmllc09uUGFnZTtcclxuICAgIGlmIChsZWdhY3lQZXIgIT0gbnVsbCkgc2V0dGluZ3MucGVyUGFnZSA9IE51bWJlcihsZWdhY3lQZXIpIHx8IDA7XHJcbiAgfVxyXG4gICAgY29uc3QgYyA9IGN0eDtcclxuICAgIGNvbnN0IG5vdGVQYXRoID0gY3R4Py5zb3VyY2VQYXRoIHx8IFwiXCI7XHJcblxyXG4gICAgaWYgKHRoaXMuX3JlbmRlcmluZykgcmV0dXJuO1xyXG4gICAgdGhpcy5fcmVuZGVyaW5nICAgPSB0cnVlO1xyXG4gICAgaWYgKHBhc3NpdmUpIHRoaXMuc2tpcFN0YXRlV3JpdGUgPSB0cnVlO1xyXG5cclxuICAgIGxldCBtb2RlbDogSW50ZXJhY3RpdmVUYWJsZU1vZGVsIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcblxyXG4gICAgICBpZiAoIWN0eD8uc291cmNlUGF0aCB8fCAhaG9zdFByZSkgcmV0dXJuO1xyXG5cclxuLyogdmlld0lkIFx1QUNCMFx1QzgxNSAqL1xyXG5pZiAoIWhvc3RQcmUuZGF0YXNldC5jb3ZlclZpZCkge1xyXG4gIGhvc3RQcmUuZGF0YXNldC5jb3ZlclZpZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7ICAgLy8gXHVDQzNELVx1QUNFMFx1QzcyMCBJRFxyXG4gIHNldHRpbmdzLl9fd2lwZVN0YXRlID0gdHJ1ZTsgICAgICAgICAgICAgICAgICAgICAgLy8gXHVDMEM4IFx1Q0MzRCBcdTIxOTIgXHVDMEMxXHVEMERDIFx1Q0QwOFx1QUUzMFx1RDY1NFxyXG59IGVsc2Uge1xyXG4gIHNldHRpbmdzLl9fd2lwZVN0YXRlID0gZmFsc2U7ICAgICAgICAgICAgICAgICAgICAgLy8gXHVDN0FDXHVCODBDXHVCMzU0IFx1QzJEQ1x1QzVENCBmYWxzZVxyXG59XHJcbnNldHRpbmdzLl9fdmlld0lkICA9IGhvc3RQcmUuZGF0YXNldC5jb3ZlclZpZDtcclxuc2V0dGluZ3MuX25vdGVQYXRoID0gY3R4LnNvdXJjZVBhdGg7XHJcbmhvc3RQcmUuZGF0YXNldC5jb3ZlclNldHRpbmdzID0gSlNPTi5zdHJpbmdpZnkoc2V0dGluZ3MpO1xyXG5cclxuLyogcHVsbCBzYXZlZCBwYWdlLXNpemUgZnJvbSB0YWJsZVN0YXRlICovXHJcbmNvbnN0IHNhdmVkUGVyUGFnZSA9IGdzKG5vdGVQYXRoLCBzZXR0aW5ncy5fX3ZpZXdJZCEsIFwicGVyUGFnZVwiKTtcclxuaWYgKHR5cGVvZiBzYXZlZFBlclBhZ2UgPT09IFwibnVtYmVyXCIgJiYgc2F2ZWRQZXJQYWdlID4gMCkge1xyXG4gIHNldHRpbmdzLnBlclBhZ2UgPSBzYXZlZFBlclBhZ2U7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiAvKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCBcdTI0NjAgXHVEMzk4XHVDNzc0XHVDOUMwIFx1QzIxOFx1QzlEMSBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4gY29uc3QgZm9sZGVyID0gc2V0dGluZ3MucGF0aCA/P1xyXG4gICAgICAgICAgICAgICAgY3R4LnNvdXJjZVBhdGguc3Vic3RyaW5nKDAsIGN0eC5zb3VyY2VQYXRoLmxhc3RJbmRleE9mKFwiL1wiKSk7XHJcblxyXG4gLyogMSkgXHVDNzdDXHVCQzE4IC5tZCAgXHUyNTAwIFx1RDNGNFx1QjM1NFx1QjE3OFx1RDJCOCBcdUM4MUNcdUM2NzggKi9cclxuIGNvbnN0IG1kUGFnZXMgPSBkdi5wYWdlcygpXHJcbiAgIC53aGVyZSgocDphbnkpPT5wLmZpbGUuZm9sZGVyPT09Zm9sZGVyKVxyXG4gICAud2hlcmUoKHA6YW55KT0+IXRoaXMuaXNGb2xkZXJOb3RlKHApKVxyXG4gIC5tYXAoKHA6YW55KT0+IGluamVjdENyZWF0ZWQoeyAgICAgICAgLy8gXHUyMTkwIFx1QzVFQ1x1QUUzMFxyXG4gICAgLi4ucCxcclxuICAgIGZpbGU6eyAuLi5wLmZpbGUsIGJhc2VuYW1lOiBwLmZpbGUuYmFzZW5hbWUgPz8gcC5maWxlLm5hbWUgfVxyXG4gIH0pKVxyXG4gICAuYXJyYXkoKTtcclxuXHJcbiAvKiAyKSAuY2FudmFzICBcdTI1MDAgT2JzaWRpYW4gQ2FudmFzIFx1RDMwQ1x1Qzc3QyAqL1xyXG5jb25zdCBjYW52YXNQYWdlcyA9IHRoaXMuYXBwLnZhdWx0LmdldEZpbGVzKClcclxuICAuZmlsdGVyKGYgPT4gZi5leHRlbnNpb24gPT09IFwiY2FudmFzXCIgJiYgZi5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyICsgXCIvXCIpKVxyXG4gIC5tYXAoZiA9PiB7XHJcbiAgICBjb25zdCBjdGltZSA9IGVwb2NoVG9ZTUQoZi5zdGF0LmN0aW1lKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGZpbGUgICAgICAgOiB7IHBhdGg6Zi5wYXRoLCBsaW5rOmR2LmZpbGVMaW5rKGYucGF0aCksIGZvbGRlciwgYmFzZW5hbWU6Zi5iYXNlbmFtZSB9LFxyXG4gICAgICBmcm9udG1hdHRlcjogeyB0aXRsZTogZi5iYXNlbmFtZSB9LFxyXG4gICAgICBjcmVhdGVkICAgIDogY3RpbWUsICAgICAgICAgIC8vIFx1MjE5MCBcdUNENUNcdUNEMDggXHVDMEREXHVDMTMxXHVDNzdDXHJcbiAgICAgIHRhZ3MgICAgICAgOiBcIiNjYXRlZ29yeS9jYW52YXNcIlxyXG4gICAgfTtcclxuICB9KTtcclxuXHJcbi8qIDMpIEV4Y2FsaWRyYXcubWQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5jb25zdCBleGNhbGlQYWdlcyA9IHRoaXMuYXBwLnZhdWx0LmdldEZpbGVzKClcclxuICAuZmlsdGVyKGYgPT4gZi5leHRlbnNpb24gPT09IFwibWRcIlxyXG4gICAgICAgICAgICAmJiBmLmJhc2VuYW1lLmVuZHNXaXRoKFwiLmV4Y2FsaWRyYXdcIilcclxuICAgICAgICAgICAgJiYgZi5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyICsgXCIvXCIpKVxyXG4gIC5tYXAoZiA9PiB7XHJcbiAgICBjb25zdCBjdGltZSA9IGVwb2NoVG9ZTUQoZi5zdGF0LmN0aW1lKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGZpbGUgICAgICAgOiB7IHBhdGg6Zi5wYXRoLCBsaW5rOmR2LmZpbGVMaW5rKGYucGF0aCksIGZvbGRlciwgYmFzZW5hbWU6Zi5iYXNlbmFtZSB9LFxyXG4gICAgICBmcm9udG1hdHRlcjogeyB0aXRsZTogZi5iYXNlbmFtZS5yZXBsYWNlKC9cXC5leGNhbGlkcmF3JC8sIFwiXCIpIH0sXHJcbiAgICAgIGNyZWF0ZWQgICAgOiBjdGltZSwgICAgICAgICAgLy8gXHUyMTkwIFx1Q0Q1Q1x1Q0QwOCBcdUMwRERcdUMxMzFcdUM3N0NcclxuICAgICAgdGFncyAgICAgICA6IFwiI2V4Y2FsaWRyYXdcIlxyXG4gICAgfTtcclxuICB9KTtcclxuXHJcbiAvKiA0KSBcdUQ1NjlcdUNFNThcdUFFMzAgKi9cclxuIGNvbnN0IGFsbFBhZ2VzID0gWy4uLmNhbnZhc1BhZ2VzLCAuLi5tZFBhZ2VzLCAuLi5leGNhbGlQYWdlc107XHJcblxyXG5cclxuICAgICAgLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgXHUyNDYxIFx1Q0VFQ1x1QjdGQyBcdUM4MTVcdUM3NTggXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuICAgICAgY29uc3QgbXVzdFRpdGxlOiBDb2x1bW5EZWYgPSB7IHByb3A6XCJfX2ZtVGl0bGVcIiwgICAgICBuYW1lOlwiVGl0bGVcIiwgIGZpbHRlcjpmYWxzZSwgY29sdW1uOnRydWUsIGZvcm1hdDpcInRleHRcIiB9O1xyXG4gICAgICBjb25zdCBtdXN0VGFncyA6IENvbHVtbkRlZiA9IHsgcHJvcDpcInRhZ3NcIiwgICAgICAgbmFtZTpcIlRhZ3NcIiwgICBmaWx0ZXI6ZmFsc2UsIGNvbHVtbjp0cnVlLCBmb3JtYXQ6XCJ0YWdzXCIgfTtcclxuXHJcbiAgICAgIGNvbnN0IGN1c3RvbSAgID0gQXJyYXkuaXNBcnJheShzZXR0aW5ncy5wcm9wcykgPyBzZXR0aW5ncy5wcm9wcyA6IFtdO1xyXG4gICAgICBjb25zdCBjb2x1bW5zOiBDb2x1bW5EZWZbXSA9IFtcclxuICAgICAgICBtdXN0VGl0bGUsXHJcbiAgICAgICAgLi4uY3VzdG9tXHJcbiAgICAgICAgICAuZmlsdGVyKChwOiBDb2x1bW5EZWYpID0+ICFbXCJ0aXRsZV9saW5rXCIsXCJ0YWdzXCJdLmluY2x1ZGVzKHAucHJvcCkpXHJcbiAgICAgICAgICAubWFwKHAgPT4gKHsgLi4ucCxcclxuICAgICAgICAgICAgZmlsdGVyIDogcC5maWx0ZXIgID8/IHRydWUsXHJcbiAgICAgICAgICAgIGNvbHVtbiA6IHAuY29sdW1uID8/IHRydWUsXHJcbiAgICAgICAgICAgIGZvcm1hdCA6IChwIGFzIGFueSkuZm9ybWF0ID8/IFwidGV4dFwiIFxyXG4gICAgICAgICAgfSkpLFxyXG4gICAgICAgIG11c3RUYWdzXHJcbiAgICAgIF07XHJcblxyXG4gICAgICAvKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCBcdTI0NjIgTW9kZWwgXHVDMEREXHVDMTMxIC8gXHVDN0FDXHVBQ0M0XHVDMEIwIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbnNldHRpbmdzLl9fX3JlZnJlc2hIb29rID0gYXN5bmMgKHAgPSBmYWxzZSkgPT4ge1xyXG4gIGF3YWl0IHRoaXMucmVuZGVyQXV0b1ZpZXcoZHYsIHNldHRpbmdzLCBjdHgsIGhvc3RQcmUsIHApO1xyXG59O1xyXG4gICAgICBtb2RlbCA9IG5ldyBJbnRlcmFjdGl2ZVRhYmxlTW9kZWwoXHJcbiAgICAgICAgZHYsXHJcbiAgICAgICAgYWxsUGFnZXMsXHJcbiAgICAgICAgY29sdW1ucyxcclxuICAgICAgICBjdHgsXHJcbiAgICAgICAgc2V0dGluZ3MsXHJcbiAgICAgICAgaG9zdFByZVxyXG4gICAgICApO1xyXG5cclxuICAgICAgXHJcbmhvc3RQcmUuc2V0QXR0cmlidXRlKFwiZGF0YS1jb3Zlci12aWV3XCIsIG1vZGVsW1widmlld0lkXCJdKTsgICAvLyBcdTI1QjZcdTI2MDVcdTI2MDUgXHVDRDk0XHVBQzAwXHJcbnRoaXMubW9kZWxzLnNldChtb2RlbFtcInZpZXdJZFwiXSwgbW9kZWwpOyAgIC8vIFx1MjE5MCBcdUJDMThcdUI0RENcdUMyREMgXHVCMTIzXHVDNUI0IFx1QzhGQ1x1QzEzOFx1QzY5NCFcclxuXHJcbiAgICAgIGF3YWl0IG1vZGVsLmNvbXB1dGUocGFzc2l2ZSk7IFxyXG5cclxuICAgICAgLyogXHUyNUJDXHUyNUJDXHUyNUJDICBcdUM3NzQgXHVCRTE0XHVCODVEXHVDNzQ0IFx1QkMxNFx1Qjg1QyBcdUM1NDRcdUI3OThcdUM1RDAgXHVDMEJEXHVDNzg1IFx1MjVCQ1x1MjVCQ1x1MjVCQyAqL1xyXG4gICAgICBjb25zdCBmbUNhbmRpZGF0ZXMgPSBjb2x1bW5zXHJcbiAgICAgICAgLmZpbHRlcihjID0+IGMuZmlsdGVyKVxyXG4gICAgICAgIC5tYXAoYyA9PiB7XHJcbiAgICAgICAgICBjb25zdCB2YWxzID0gWy4uLm5ldyBTZXQoXHJcbiAgICAgICAgICAgIG1vZGVsIS5maWx0ZXJlZFJvd3MubWFwKHIgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHJhdyA9IHRoaXMuc3ZjLmdldFZhbChyLCBjLnByb3ApO1xyXG4gICAgICAgICAgICAgIHN3aXRjaCAoYy5mb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJkYXRlXCI6IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgeW1kID0gbW9kZWwhLm5vcm1hbGl6ZVlNRChyYXcpO1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4geW1kID8/IFwiLVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBcInllYXJcIjoge1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCB5ID0gdHlwZW9mIHJhdyA9PT0gXCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgID8gU3RyaW5nKHJhdylcclxuICAgICAgICAgICAgICAgICAgICA6IFN0cmluZyhyYXcpLm1hdGNoKC9cXGR7NH0vKT8uWzBdO1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4geSA/PyBcIi1cIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcocmF3ID8/IFwiLVwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICApXS5zb3J0KChhLGIpPT5TdHJpbmcoYSkubG9jYWxlQ29tcGFyZShTdHJpbmcoYikpKTtcclxuICAgICAgICAgIHJldHVybiB7IHByb3A6IGMucHJvcCwgbmFtZTogYy5uYW1lLCB2YWx1ZXM6W1wiQUxMXCIsIC4uLnZhbHNdIH07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCB0YWdDYW5kaWRhdGVzID0gKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAvLyBcdUQwRENcdUFERjggXHVENkM0XHVCQ0Y0XHJcbiAgICAgICAgY29uc3Qgc2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XHJcbiAgICAgICAgbW9kZWwuZmlsdGVyZWRSb3dzLmZvckVhY2gociA9PlxyXG4gIChBcnJheS5pc0FycmF5KHIuZmlsZT8udGFncykgPyByLmZpbGUhLnRhZ3NcclxuICAgOiBBcnJheS5pc0FycmF5KHIudGFncykgICAgICA/IHIudGFnc1xyXG4gICA6IFtyLmZpbGU/LnRhZ3MgPz8gci50YWdzXSAgIC8vIFx1QkIzOFx1Qzc5MFx1QzVGNCBcdTIxOTIgXHVCQzMwXHVDNUY0XHJcbiAgKS5mb3JFYWNoKCh0OnN0cmluZyk9PnNldC5hZGQodCkpXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gc2V0LnNpemUgPyBbXCJBTExcIiwgLi4uWy4uLnNldF0uc29ydCgpXSA6IG51bGw7XHJcbiAgICAgIH0pKCk7XHJcblxyXG4gICAgICAvKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCBcdTI0NjItQi4gIGZyb250LW1hdHRlciAmIFx1RDBEQ1x1QURGOCBcdUQ2QzRcdUJDRjQgXHVCQUE5XHVCODVEIFx1QjlDQ1x1QjRFNFx1QUUzMCBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4gICAgICBjb25zdCBmbUZpbHRlcnMgPSBjb2x1bW5zXHJcbiAgICAgICAgLmZpbHRlcihjID0+IGMuZmlsdGVyKVxyXG4gICAgICAgIC5tYXAoYyA9PiB7XHJcbiAgICAgICAgICBjb25zdCB2YWxzID0gWy4uLm5ldyBTZXQoXHJcbiAgICAgICAgICAgIG1vZGVsIS5maWx0ZXJlZFJvd3MubWFwKHBnID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCByYXcgPSB0aGlzLnN2Yy5nZXRWYWwocGcsIGMucHJvcCk7XHJcbiAgICAgICAgICAgICAgc3dpdGNoIChjLmZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImRhdGVcIjoge1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCB5bWQgPSBtb2RlbCEubm9ybWFsaXplWU1EKHJhdyk7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiB5bWQgPz8gXCItXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwieWVhclwiOiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB0eXBlb2YgcmF3ID09PSBcIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgPyBTdHJpbmcocmF3KVxyXG4gICAgICAgICAgICAgICAgICAgIDogU3RyaW5nKHJhdykubWF0Y2goL1xcZHs0fS8pPy5bMF07XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiB5ID8/IFwiLVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhyYXcgPz8gXCItXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICldLnNvcnQoKGEsYik9PlN0cmluZyhhKS5sb2NhbGVDb21wYXJlKFN0cmluZyhiKSkpO1xyXG4gICAgICAgICAgIHJldHVybiB7IHByb3A6IGMucHJvcCwgbmFtZTogYy5uYW1lLCB2YWx1ZXM6W1wiQUxMXCIsIC4uLnZhbHNdIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICAvKiogXHUyNDYxIFx1RDBEQ1x1QURGOCBcdUQ2QzRcdUJDRjQgXHVCQUE5XHVCODVEICovXHJcbiAgICAgIGNvbnN0IHRhZ1NldCA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG4gICAgICBtb2RlbC5maWx0ZXJlZFJvd3MuZm9yRWFjaChwZyA9PiB7XHJcbiAgICAgICAgKHBnLmZpbGU/LnRhZ3MgPz8gcGcudGFncyA/PyBbXSkuZm9yRWFjaCgodDogc3RyaW5nKSA9PiB0YWdTZXQuYWRkKHQpKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IHRhZ0ZpbHRlciA9IHRhZ1NldC5zaXplID8gW1wiQUxMXCIsIC4uLlsuLi50YWdTZXRdLnNvcnQoKV0gOiBudWxsO1xyXG5cclxuICAgICAgLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgXHUyNDYzIFVJIFx1QjgwQ1x1QjM1NCBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4gICAgICAvKiBcdTI1QjhcdTI1QjggdmlldyBcdUM4MDRcdUM2QTkgXHVDRjVDXHVCQzMxIFx1QjlDQ1x1QjRFNFx1QUUzMCBcdTI1QjhcdTI1QjggKi9cclxuICAgICAgY29uc3Qgc2NvcGVkQ2IgPSB0aGlzLm1ha2VTY29wZWRDYihzZXR0aW5ncy5fbm90ZVBhdGghLCBtb2RlbFtcInZpZXdJZFwiXSk7XHJcbiAgICAgIGF3YWl0IHRoaXMudWkuYnVpbGRWaWV3KFxyXG4gICAgICAgIGhvc3RQcmUsXHJcbiAgICAgICAgc2V0dGluZ3MuX25vdGVQYXRoISxcclxuICAgICAgICBtb2RlbFtcInZpZXdJZFwiXSxcclxuICAgICAgICBtb2RlbC5kaXNwbGF5Um93cyxcclxuICAgICAgICBjb2x1bW5zLFxyXG4gICAgICAgIHNldHRpbmdzLnBlclBhZ2UgPz8gMTAsXHJcbiAgICAgICAgbW9kZWwudG90YWxSb3dzLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHNob3dPcGVuRm9sZGVyQnV0dG9uICAgICAgICA6IHNldHRpbmdzLnNob3dPcGVuRm9sZGVyQnV0dG9uICAgICAgICA/PyB0cnVlLFxyXG4gICAgICAgICAgc2hvd05ld05vdGVCdXR0b24gICAgICAgICAgIDogc2V0dGluZ3Muc2hvd05ld05vdGVCdXR0b24gICAgICAgICAgID8/IHRydWUsXHJcbiAgICAgICAgICBzaG93TmV3Q2FudmFzQnV0dG9uICAgICAgICAgOiBzZXR0aW5ncy5zaG93TmV3Q2FudmFzQnV0dG9uICA/PyB0cnVlLCAgLy8gXHUyNjA1XHJcbiAgICAgICAgICBzaG93VGFnRmlsdGVyQnV0dG9uICAgICAgICAgOiBzZXR0aW5ncy5zaG93VGFnRmlsdGVyQnV0dG9uICAgICAgICAgPz8gdHJ1ZSxcclxuICAgICAgICAgIHNob3dGcm9udG1hdHRlckZpbHRlckJ1dHRvbiA6IHNldHRpbmdzLnNob3dGcm9udG1hdHRlckZpbHRlckJ1dHRvbiA/PyB0cnVlLFxyXG4gICAgICAgICAgc2hvd1NlYXJjaEJveCAgICAgICAgICAgICAgIDogc2V0dGluZ3Muc2hvd1NlYXJjaEJveCAgICAgICAgICAgICAgID8/IHRydWUsXHJcbiAgICAgICAgICBzaG93UmVmcmVzaEJ1dHRvbiAgICAgICAgICAgOiBzZXR0aW5ncy5zaG93UmVmcmVzaEJ1dHRvbiAgICAgICAgICAgPz8gZmFsc2UsXHJcbiAgICAgICAgICBmb2xkZXJQYXRoICAgICAgICAgICAgICAgICAgOiBzZXR0aW5ncy5wYXRoID8/IG51bGxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZtQ2FuZGlkYXRlcywgICAvLyBcdTIxOTAgXHUyNDYyLUIgXHVDNUQwXHVDMTFDIFx1QjlDQ1x1QjRFMCBmcm9udC1tYXR0ZXIgXHVENkM0XHVCQ0Y0XHJcbiAgICAgICAgdGFnQ2FuZGlkYXRlcywgICAgLy8gXHUyMTkwIFx1RDBEQ1x1QURGOCBcdUQ2QzRcdUJDRjQgKFx1QzVDNlx1QzczQ1x1QkE3NCBudWxsKVxyXG4gICAgICAgIHNjb3BlZENiICAgICAgICAgLy8gXHUyNjA1IFx1QjlDOFx1QzlDMFx1QjlDOSBcdUM3NzhcdUMyMThcdUI4NUMgXHVDRjVDXHVCQzMxIFx1QzgwNFx1QjJFQ1xyXG4gICAgICApO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgdGhpcy5za2lwU3RhdGVXcml0ZSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLl9yZW5kZXJpbmcgICAgID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAqICByZXJlbmRlcihwYXNzaXZlKSBcdTIwMTMgXHVENjA0XHVDN0FDIE1vZGVsIFx1QzdBQ1x1QUNDNFx1QzBCMCAmIFVJXHVCOUNDIFx1QUMzMVx1QzJFMFxyXG4gICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbiAgcHJpdmF0ZSBhc3luYyByZXJlbmRlcihwYXNzaXZlID0gZmFsc2UsIHZpZD86IHN0cmluZykge1xyXG4gICAgTG9nLmQoYFtDVF0gcmVyZW5kZXIoJHt2aWQgPz8gXCJhdXRvXCJ9KSBcdTI1QjYgcGFzc2l2ZT0ke3Bhc3NpdmV9YCk7XHJcbiAgICB3aGlsZSAodGhpcy5fcmVuZGVyaW5nKSB7XHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCAxNSkpO1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG5cclxuICAgIFxyXG5sZXQgbW9kZWw6IEludGVyYWN0aXZlVGFibGVNb2RlbCB8IHVuZGVmaW5lZCA9IHZpZFxyXG4gICAgPyB0aGlzLm1vZGVscy5nZXQodmlkKVxyXG4gICAgOiAoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGhvc3QgPSAoZXZlbnQ/LnRhcmdldCBhcyBIVE1MRWxlbWVudCk/LmNsb3Nlc3Q/LihcIltkYXRhLWNvdmVyLXZpZXddXCIpO1xyXG4gICAgICAgIGNvbnN0IGh2aWQgPSBob3N0ID8gKGhvc3QgYXMgSFRNTEVsZW1lbnQpLmRhdGFzZXQuY292ZXJWaWV3IDogbnVsbDtcclxuICAgICAgICByZXR1cm4gaHZpZCA/IHRoaXMubW9kZWxzLmdldChodmlkKSAgICAgICAgICAgICAgICAvLyBcdTI0NjEgRE9NIFx1Qzc3NFx1QkNBNFx1RDJCOCBcdUJDMUNcdUMwREQgUGFuZVxyXG4gICAgICAgICAgICAgICAgICAgIDogWy4uLnRoaXMubW9kZWxzLnZhbHVlcygpXS5wb3AoKTsgICAgIC8vIFx1MjQ2MiBmYWxsYmFja1xyXG4gICAgICB9KSgpO1xyXG5cclxuLyogXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIFx1MjYwNVx1MjYwNVx1MjYwNSBzZWxmLWhlYWwgXHVDMkRDXHVDNzkxIFx1MjYwNVx1MjYwNVx1MjYwNSBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuaWYgKCFtb2RlbCAmJiB2aWQpIHtcclxuICBjb25zdCBob3N0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oXHJcbiAgICAgICAgICAgICAgICBgW2RhdGEtY292ZXItdmlldz1cIiR7dmlkfVwiXWApO1xyXG4gIGlmIChob3N0KSB7XHJcbiAgICAvLyAxLiBEYXRhdmlldyBBUEkgXHVDNUJCXHVBRTMwXHJcbiAgICBjb25zdCBkdkFwaSA9ICh0aGlzLmFwcCBhcyBhbnkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnBsdWdpbnM/LnBsdWdpbnM/LmRhdGF2aWV3Py5hcGk7XHJcbiAgICBpZiAoZHZBcGkpIHtcclxuICAgICAgLy8gMi4gRGF0YXZpZXcgXHVDNzc4XHVCMzcxXHVDMkE0IFx1QzY0NFx1QjhDQ1x1Qjk3QyBcdUJDRjRcdUM3QTVcclxuICAgICAgY29uc3QgbWM6IGFueSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGU7XHJcbiAgICAgIGlmICghbWMucmVzb2x2ZWQpIHtcclxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPihyZXMgPT4gbWMub25jZT8uKFwicmVzb2x2ZWRcIiwgcmVzKSk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gMy4gXHVDQ0FCIFx1QkM4OFx1QzlGOCByZW5kZXJBdXRvVmlldyBcdUMyRTRcdUQ1ODkgXHUyMTkyIG1vZGVsIFx1QjRGMVx1Qjg1RFxyXG4gICAgICBhd2FpdCB0aGlzLnJlbmRlckF1dG9WaWV3KFxyXG4gICAgICAgIGR2QXBpLCAgICAgICAgICAgICAgICAgLy8gXHUyMTkwIERhdGF2aWV3XHJcbiAgICAgICAgaG9zdC5kYXRhc2V0LmNvdmVyU2V0dGluZ3NcclxuICAgICAgICAgID8gSlNPTi5wYXJzZShob3N0LmRhdGFzZXQuY292ZXJTZXR0aW5ncylcclxuICAgICAgICAgIDoge30sICAgICAgICAgICAgICAgIC8vIFx1QzgwMFx1QzdBNVx1QjQxQyBcdUMxMjRcdUM4MTUgXHVCQ0Y1XHVDNkQwXHJcbiAgICAgICAgeyBzb3VyY2VQYXRoOlxyXG4gICAgICAgICAgICAoaG9zdC5jbG9zZXN0KFwiLm1hcmtkb3duLXByZXZpZXctdmlld1wiKSBhcyBhbnkpPy5maWxlPy5wYXRoID8/IFwiXCJcclxuICAgICAgICB9IGFzIGFueSwgICAgICAgICAgICAgIC8vIFx1Q0Q1Q1x1QzE4QyBjdHhcclxuICAgICAgICBob3N0LCAgICAgICAgICAgICAgICAgIC8vIGhvc3RQcmVcclxuICAgICAgICB0cnVlICAgICAgICAgICAgICAgICAgIC8vIHBhc3NpdmU9dHJ1ZSAoXHVDMEMxXHVEMERDIFx1QkNGNFx1Qzg3NClcclxuICAgICAgKTtcclxuICAgICAgbW9kZWwgPSB0aGlzLm1vZGVscy5nZXQodmlkKTsgICAvLyBcdUJDMjlcdUFFMDggXHVDMEREXHVBRTM0IG1vZGVsIFx1RDY4Q1x1QzIxOFxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4vKiBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgXHUyNjA1XHUyNjA1XHUyNjA1IHNlbGYtaGVhbCBcdUIwNUQgXHUyNjA1XHUyNjA1XHUyNjA1IFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCAqL1xyXG5cclxuXHJcblxyXG5cclxuICAvKiBwZXJQYWdlIFx1QkNGNVx1QzZEMCAqL1xyXG4gIGlmIChtb2RlbCkge1xyXG4gICAgY29uc3QgcHAgPSBncyhtb2RlbFtcInNldHRpbmdzXCJdLl9ub3RlUGF0aCEsIG1vZGVsW1widmlld0lkXCJdLCBcInBlclBhZ2VcIik7XHJcbiAgICBpZiAodHlwZW9mIHBwID09PSBcIm51bWJlclwiICYmIHBwID4gMCkgbW9kZWxbXCJzZXR0aW5nc1wiXS5wZXJQYWdlID0gcHA7XHJcbiAgfVxyXG5cclxuICAvKiBcdTI0NjEgaG9zdCBcdUFDMDAgXHVDMEI0XHVDNTQ0IFx1Qzc4OFx1QjI5NFx1QzlDMCBcdUQ2NTVcdUM3NzggKi9cclxuICBpZiAobW9kZWwgJiYgIWRvY3VtZW50LmJvZHkuY29udGFpbnMobW9kZWxbXCJob3N0XCJdKSkge1xyXG4gICAgLyogXHVCM0Q5XHVDNzdDIHZpZXdJZCBcdUI5N0MgXHVBQzAwXHVDOUM0IFx1QzBDOCBob3N0IFx1RDBEMFx1QzBDOSAqL1xyXG4gICAgY29uc3QgZnJlc2ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgW2RhdGEtY292ZXItdmlldz1cIiR7bW9kZWxbXCJ2aWV3SWRcIl19XCJdYCxcclxuICAgICkgYXMgSFRNTEVsZW1lbnQgfCBudWxsO1xyXG5cclxuICAgIGlmIChmcmVzaCkge1xyXG4gICAgICAobW9kZWwgYXMgYW55KVtcImhvc3RcIl0gPSBmcmVzaDsgICAgICAgICAgLy8gaG9zdCBcdUFENTBcdUNDQjRcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMubW9kZWxzLmRlbGV0ZShtb2RlbFtcInZpZXdJZFwiXSk7IC8vIFx1QzcyMFx1QjgzOSBcdUM4MUNcdUFDNzBcclxuICAgICAgbW9kZWwgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmICghbW9kZWwpIHtcclxuICAgIExvZy5kKFwiW0NUXSByZXJlbmRlciBcdTIwMTMgbW9kZWwgbm90IGZvdW5kIC0+IGFib3J0XCIpO1xyXG4gICAgcmV0dXJuOyBcclxuICB9ICAgICAgICAgICAgICAgIC8vIFx1QjMwMFx1QzBDMSBcdUM1QzZcdUM3NEMgXHUyMTkyIFx1Qzg4NVx1QjhDQ1xyXG5cclxuICAgIExvZy50aW1lKGBbQ1RdIGNvbXB1dGUrcmVuZGVyICR7dmlkfWApO1xyXG4gICAgYXdhaXQgbW9kZWwuY29tcHV0ZShwYXNzaXZlKTtcclxuICAgIGF3YWl0IHRoaXMucmVuZGVyQXV0b1ZpZXcoXHJcbiAgICAgIG1vZGVsW1wiZHZcIl0sXHJcbiAgICAgIG1vZGVsW1wic2V0dGluZ3NcIl0sXHJcbiAgICAgIG1vZGVsW1wiY3R4XCJdLFxyXG4gICAgICBtb2RlbFtcImhvc3RcIl0sXHJcbiAgICAgIHBhc3NpdmVcclxuICAgICk7XHJcbiAgICBMb2cudGltZUVuZChgW0NUXSBjb21wdXRlK3JlbmRlciAke3ZpZH1gKTtcclxuICAgIC8qIG1vZGVscyBcdUI5RjVcdUM1RDBcdUMxMUMgXHVENjU0XHVCQTc0XHVDNUQwIFx1QjM1NCBcdUM4NzRcdUM3QUNcdUQ1NThcdUM5QzAgXHVDNTRBXHVCMjk0IFBhbmUgXHVDODFDXHVBQzcwICovXHJcbi8qIFx1MjQ2MCBcdUM5QzBcdUFFMDggXHVBQzMxXHVDMkUwIFx1QzkxMVx1Qzc3OCBcdUJERjBcdUIyOTQgXHVDODA4XHVCMzAwIFx1QzlDMFx1QzZCMFx1QzlDMCBcdUM1NEFcdUIyOTRcdUIyRTQgKi9cclxuY29uc3Qga2VlcGluZyA9IG1vZGVsW1widmlld0lkXCJdO1xyXG5cclxuLyogXHUyNDYxIDMwMCBtcyBcdUI0QTRcdUM1RDAgXHVENTVDIFx1QkM4OCBcdUIzNTQgXHVENjU1XHVDNzc4IFx1RDZDNCBcdUMwQURcdUM4MUNcclxuICAgICAgKFx1RDBFRCBcdUM4MDRcdUQ2NThcdUM3M0NcdUI4NUMgXHVDN0EwXHVDMkRDIFx1QjVBOFx1QzVCNFx1Qzg0Q1x1QjJFNCBcdUIyRTRcdUMyREMgXHVCRDk5XHVCMjk0IFx1QzBDMVx1RDY2OSBcdUJDMjlcdUM5QzApICovXHJcbnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gIHRoaXMubW9kZWxzLmZvckVhY2goKG0sIGlkKSA9PiB7XHJcbiAgICBpZiAoaWQgPT09IGtlZXBpbmcpIHJldHVybjsgICAgICAgICAgICAgICAgICAgIC8vIFx1RDYwNFx1QzdBQyBcdUJBQThcdUIzNzggXHVCQ0Y0XHVDODc0XHJcbiAgICBpZiAoIWRvY3VtZW50LmJvZHkuY29udGFpbnMobS5ob3N0KSkgdGhpcy5tb2RlbHMuZGVsZXRlKGlkKTtcclxuICB9KTtcclxufSwgMzAwKTtcclxuXHJcbiAgIFxyXG4gIH1cclxuXHJcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgKiAgXHVEODNEXHVEQ0U2ICBVdGlsIChcdUIwQTBcdUM5REMgXHVEMzBDXHVDMkYxIC8gXHVDODE1XHVCODJDIFx1QUMxMiBcdUI0RjEpXHJcbiAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgLyoqIERhdGF2aWV3IFBhZ2UgXHUyMTkyIFx1Qzc4NFx1Qzc1OCBcdUFDMTIgKFx1QjIwNFx1Qjc3RCBcdUI1NENcdUJCMzhcdUM1RDAgXHVDMEREXHVBRTM0IFR5cGVFcnJvciBcdUMyMThcdUM4MTUpICovXHJcbnB1YmxpYyBnZXRWYWwocGFnZTogYW55LCBwcm9wOiBzdHJpbmcpOiBhbnkge1xyXG4gIC8qIFx1MjQ2MCBUaXRsZSBcdUM4MDRcdUM2QTkgXHVDRUU0XHVDMkE0XHVEMTQwIFx1Q0M5OFx1QjlBQyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbiAgaWYgKHByb3AgPT09IFwiX19mbVRpdGxlXCIpIHtcclxuICAgIC8vIDEpIGZyb250LW1hdHRlclxyXG4gICAgY29uc3QgZm1UaXRsZSA9IHBhZ2U/LmZyb250bWF0dGVyPy50aXRsZSA/PyBwYWdlPy50aXRsZTtcclxuICAgIGlmIChmbVRpdGxlICYmIFN0cmluZyhmbVRpdGxlKS50cmltKCkgIT09IFwiXCIpIHJldHVybiBmbVRpdGxlO1xyXG5cclxuICAgIC8vIDIpIFx1RDMwQ1x1Qzc3Q1x1QkE4NSAoRXhjYWxpZHJhdyBcdUQ2NTVcdUM3QTVcdUM3OTAgXHVDODFDXHVBQzcwKVxyXG4gICAgY29uc3QgYmFzZSA9IHBhZ2U/LmZpbGU/LmJhc2VuYW1lID8/IFwiXCI7XHJcbiAgICByZXR1cm4gYmFzZS5yZXBsYWNlKC9cXC5leGNhbGlkcmF3JC8sIFwiXCIpO1xyXG4gIH1cclxuXHJcbiAgLyogXHUyNDYxIFx1QUUzMFx1Qzg3NCBcdUNGNTRcdUI0REMgKFx1QURGOFx1QjMwMFx1Qjg1QyBcdUM3MjBcdUM5QzApIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4gIHJldHVybiBwcm9wLnN0YXJ0c1dpdGgoXCJmaWxlLlwiKVxyXG4gICAgPyBwcm9wLnNwbGl0KFwiLlwiKS5yZWR1Y2UoKHYsIGspID0+IHY/LltrXSwgcGFnZSlcclxuICAgIDogcGFnZVtwcm9wXTtcclxufVxyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGRhdGVZTURSZWdleCA9IC9eKFxcZHs0fSktKFxcZHsxLDJ9KS0oXFxkezEsMn0pJC87XHJcbiAgcHJpdmF0ZSByZWFkb25seSB0aW1lSE1SZWdleCAgPSAvXihcXGR7MSwyfSk6KFxcZHsxLDJ9KSQvO1xyXG5cclxuICBwcml2YXRlIHBhcnNlRGF0ZVlNRChzdHI6IHN0cmluZykge1xyXG4gICAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpIHJldHVybiBudWxsO1xyXG4gICAgY29uc3QgbSA9IHN0ci5tYXRjaCh0aGlzLmRhdGVZTURSZWdleCk7XHJcbiAgICBpZiAoIW0pIHJldHVybiBudWxsO1xyXG4gICAgY29uc3QgeSA9ICttWzFdLCBtbyA9ICttWzJdLCBkID0gK21bM107XHJcbiAgICBpZiAoeTwxMDAwfHx5Pjk5OTl8fG1vPDF8fG1vPjEyfHxkPDF8fGQ+MzEpIHJldHVybiBudWxsO1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlKHksIG1vLTEsIGQpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwYXJzZVRpbWVITShzdHI6IHN0cmluZykge1xyXG4gICAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpIHJldHVybiBudWxsO1xyXG4gICAgY29uc3QgbSA9IHN0ci5tYXRjaCh0aGlzLnRpbWVITVJlZ2V4KTtcclxuICAgIGlmICghbSkgcmV0dXJuIG51bGw7XHJcbiAgICBjb25zdCBoaD0rbVsxXSwgbW09K21bMl07XHJcbiAgICBpZiAoaGg+MjN8fG1tPjU5KSByZXR1cm4gbnVsbDtcclxuICAgIGNvbnN0IGR0PW5ldyBEYXRlKCk7IGR0LnNldEhvdXJzKGhoLG1tLDAsMCk7IHJldHVybiBkdDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZm9ybWF0QXNEYXRlKHY6IGFueSkge1xyXG4gICAgaWYgKHYgPT0gbnVsbCkgcmV0dXJuIFwiXCI7XHJcbiAgICBjb25zdCBkID0gdGhpcy5wYXJzZURhdGVZTUQoU3RyaW5nKHYpKTtcclxuICAgIGlmICghZCkgcmV0dXJuIFN0cmluZyh2KTtcclxuICAgIGNvbnN0IHk9ZC5nZXRGdWxsWWVhcigpLCBtPWQuZ2V0TW9udGgoKSsxLCBkZD1kLmdldERhdGUoKTtcclxuICAgIHJldHVybiBgJHt5fS0ke208MTA/XCIwXCI6XCJcIn0ke219LSR7ZGQ8MTA/XCIwXCI6XCJcIn0ke2RkfWA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFNvcnRWYWx1ZSh2OiBhbnkpIHtcclxuICAgIGlmICh2PT1udWxsKSByZXR1cm4gXCJcIjtcclxuICAgIGNvbnN0IHMgPSB0eXBlb2Ygdj09PVwic3RyaW5nXCI/djpTdHJpbmcodik7XHJcbiAgICBjb25zdCBkID0gdGhpcy5wYXJzZURhdGVZTUQocykgfHwgdGhpcy5wYXJzZVRpbWVITShzKTtcclxuICAgIGlmIChkKSByZXR1cm4gZC5nZXRUaW1lKCk7XHJcbiAgICBjb25zdCBuID0gcGFyc2VGbG9hdChzKTtcclxuICAgIHJldHVybiBpc05hTihuKSA/IHMudG9Mb3dlckNhc2UoKSA6IG47XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIHN1Z2dlc3Rlcih2YWx1ZXM6IHN0cmluZ1tdKTogUHJvbWlzZTxzdHJpbmd8bnVsbD4ge1xyXG4gICAgLyogT2JzaWRpYW4gXHVBRTMwXHVCQ0Y4IFN1Z2dlc3RlciBcdUMwQUNcdUM2QTkgXHUyMDEzIFx1QzBBQ1x1QzZBOVx1Qzc5MCBcdUQzQjhcdUM3NTggKi9cclxuICAgIHJldHVybiB0aGlzLnN2Yy5zdWdnZXN0ZXIodmFsdWVzKTtcclxuICB9XHJcblxyXG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICogIFx1RDgzRFx1REQwRCBIZWxwZXIgXHUyMDEzIFx1MjAxQ2ZvbGRlciBOb3RlXHUyMDFEIFx1QzVFQ1x1QkQ4MFxyXG4gICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbnByaXZhdGUgaXNGb2xkZXJOb3RlKHA6IGFueSkge1xyXG4gIGNvbnN0IGYgPSBwPy5maWxlO1xyXG4gIGlmICghZj8ucGF0aCB8fCBmLmZvbGRlciA9PSBudWxsKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gIC8vIDEpIFx1RDMwQ1x1Qzc3QyBcdUJDQTBcdUM3NzRcdUMyQTRcdUIxMjRcdUM3ODQ6IERhdGF2aWV3XHVBQzAwIFx1Qzc3NFx1QkJGOCBcdUM4MUNcdUFDRjVcclxuICBjb25zdCBiYXNlID0gZi5iYXNlbmFtZSA/PyBmLnBhdGguc3Vic3RyaW5nKFxyXG4gICAgZi5wYXRoLmxhc3RJbmRleE9mKFwiL1wiKSArIDEsXHJcbiAgICBmLnBhdGgubGFzdEluZGV4T2YoXCIuXCIpXHJcbiAgKTtcclxuXHJcbiAgLy8gMikgXHVEM0Y0XHVCMzU0XHVDNzU4IFwiXHVCOUM4XHVDOUMwXHVCOUM5IFx1QzEzOFx1QURGOFx1QkEzQ1x1RDJCOFwiXHVCOUNDIFx1Q0Q5NFx1Q0Q5Q1xyXG4gIGNvbnN0IGZvbGRlck5hbWUgPSBmLmZvbGRlci5zcGxpdChcIi9cIikucG9wKCkgPz8gXCJcIjtcclxuXHJcbiAgcmV0dXJuIGJhc2UgPT09IGZvbGRlck5hbWU7XHJcbn1cclxuXHJcblxyXG4gIC8qKiBcdUQ2MDRcdUM3QUMgbm90ZSArIHZpZXcgXHVDNUQwIFx1QkMxNFx1Qzc3OFx1QjUyOVx1QjQxQyBcdUNGNUNcdUJDMzEgXHVDMEREXHVDMTMxICovXHJcbnByaXZhdGUgbWFrZVNjb3BlZENiKG5vdGU6IHN0cmluZywgdmlkOiBzdHJpbmcpOiBVSVRhYmxlQ2FsbGJhY2tzIHtcclxuICByZXR1cm4ge1xyXG4gICAgLi4udGhpcy5jYiwgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdUFFMzBcdUM4NzQgXHVBRTMwXHVCMkE1IFx1QzdBQ1x1QzBBQ1x1QzZBOVxyXG5yZXJlbmRlciA6IGFzeW5jIChfbiA9IG5vdGUsIF92ID0gdmlkKSA9PiB7XHJcbiAgYXdhaXQgdGhpcy5yZXJlbmRlcih0cnVlLCBfdik7XHJcbn0sXHJcbiAgICBzeW5jICAgICA6IGFzeW5jIChfLCBfXywga2V5LCB2YWwpID0+IHtcclxuICAgICAgc3Mobm90ZSwgdmlkLCBrZXksIHZhbCk7ICAgICAgICAgICAgLy8gbm90ZS92aWQgXHVBQ0UwXHVDODE1XHJcbiAgICAgIGF3YWl0IHRoaXMucmVyZW5kZXIodHJ1ZSwgdmlkKTtcclxuICAgIH0sXHJcbiAgICBnZXRTdGF0ZSA6IChuLCB2LCBrKSA9PiBncyhuID8/IG5vdGUsIHYgPz8gdmlkLCBrKSxcclxuICAgIHNldFN0YXRlIDogKG4sIHYsIGssIHZhbCkgPT4gc3MobiA/PyBub3RlLCB2ID8/IHZpZCwgaywgdmFsKSxcclxuICB9O1xyXG59XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiAgR2xvYmFsIEV2ZW50QnVzIFx1MjE5MiBwYXNzaXZlIHJlcmVuZGVyIChGSU5BTCAmIFNUQUJMRSlcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbnByaXZhdGUgcmVmcmVzaEJ5QnVzKGZpbGU/OiBURmlsZSkge1xyXG4gIC8qIFx1MjUwMFx1MjUwMCAwLiBEZWJvdW5jZWQgcmVuZGVyIFx1MjAxMyBcdUM5MTFcdUJDRjUgXHVENjM4XHVDRDlDIFx1QkMyOVx1QzlDMCBcdTI1MDBcdTI1MDAgKi9cclxuICBjb25zdCByZW5kZXJEZWJvdW5jZWQgPSAoKSA9PiB7XHJcbiAgICBpZiAodGhpcy5yZWZyZXNoVGltZXIpIGNsZWFyVGltZW91dCh0aGlzLnJlZnJlc2hUaW1lcik7XHJcbiAgICB0aGlzLnJlZnJlc2hUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgdGhpcy5tb2RlbHMuZm9yRWFjaCgoXywgdmlkKSA9PiB0aGlzLnJlcmVuZGVyKHRydWUsIHZpZCkpO1xyXG4gICAgICB0aGlzLnJlZnJlc2hUaW1lciA9IG51bGw7XHJcbiAgICB9LCA4MCk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qIFx1MjUwMFx1MjUwMCAxLiBcdUQzRjRcdUIzNTQgXHVENTQ0XHVEMTMwIFx1QUM4MFx1QzBBQyBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuICBpZiAoZmlsZSAmJiB0aGlzLm1vZGVscy5zaXplKSB7XHJcbiAgICBjb25zdCBmaXJzdCA9IHRoaXMubW9kZWxzLnZhbHVlcygpLm5leHQoKS52YWx1ZSBhc1xyXG4gICAgICAgICAgICAgICAgICBJbnRlcmFjdGl2ZVRhYmxlTW9kZWwgfCB1bmRlZmluZWQ7XHJcbiAgICBpZiAoZmlyc3QpIHtcclxuICAgICAgY29uc3QgZm9sZGVyID0gZmlyc3RbXCJzZXR0aW5nc1wiXS5wYXRoID8/XHJcbiAgICAgICAgICAgICAgICAgICAgIGZpcnN0W1wiY3R4XCJdLnNvdXJjZVBhdGgucmVwbGFjZSgvXFwvW14vXSskLywgXCJcIik7XHJcbiAgICAgIGlmICghZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyICsgXCIvXCIpKSByZXR1cm47ICAgLy8gXHVCMkU0XHVCOTc4IFx1RDNGNFx1QjM1NFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyogMS1CLiBtb2RlbHMgXHVBQzAwIFx1QkU0NFx1QzVCNCBcdUM3ODhcdUIyOTRcdUIzNzAgaG9zdCBcdUFDMDAgXHVENjU0XHVCQTc0XHVDNUQwIFx1Qzg3NFx1QzdBQyBcdTIxOTIgXHVDRDVDXHVDRDA4IFBhbmUgXHVCNEYxXHVCODVEICovXHJcbiAgaWYgKCF0aGlzLm1vZGVscy5zaXplKSB7XHJcbiAgICBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWNvdmVyLXZpZXddXCIpXHJcbiAgICAgIC5mb3JFYWNoKChoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdmlkID0gKGggYXMgSFRNTEVsZW1lbnQpLmRhdGFzZXQuY292ZXJWaWV3ITtcclxuICAgICAgICBpZiAoIXRoaXMubW9kZWxzLmhhcyh2aWQpKSB7XHJcbiAgICAgICAgICAvKiBcdUNDQUIgXHVCODBDXHVCMzU0XHVCMjk0IENvbnRyb2xsZXIucmVuZGVyQXV0b1ZpZXcgXHVCMEI0XHVCRDgwXHVDNUQwXHVDMTFDIFx1Qzc5MFx1QjNEOSBcdUI0RjFcdUI4NURcdUI0MjhcclxuICAgICAgICAgICAgIFx1MjE5MiBcdUM1RUNcdUFFMzBcdUMxMUNcdUIyOTQgbW9kZWxzLnNpemU9PTAgXHVDNzdDIFx1QjU0QyBcdUI5Q0MgXHVENjM4XHVDRDlDXHVCNDE4XHVCQkMwXHVCODVDIHNraXAgKi9cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyogXHUyNTAwXHUyNTAwIDIuIERhdGF2aWV3IGNhY2hlIFx1RDY1NVx1Qzc3OCAmIFx1QjMwMFx1QUUzMCBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuICBpZiAoZmlsZSkge1xyXG4gICAgY29uc3QgbWM6IGFueSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUgYXMgYW55O1xyXG4gICAgY29uc3QgcGFyc2VkICA9IG1jLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXIgIT0gbnVsbDtcclxuXHJcbiAgICBpZiAoIXBhcnNlZCkge1xyXG4gICAgICAvKiBcdUM1NDRcdUM5QzEgXHVEMzBDXHVDMkYxIFx1QzgwNCBcdTIxOTIgcmVzb2x2ZWQgMS1zaG90ICovXHJcbiAgICAgIGNvbnN0IHJlZiA9IG1jLm9uKFwicmVzb2x2ZWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIG1jLm9mZnJlZihyZWYpO1xyXG4gICAgICAgIHJlbmRlckRlYm91bmNlZCgpO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuOyAgICAgICAgICAgICAgIC8vIFx1RDgzRFx1RENDQyBcdUIzMDBcdUFFMzBcdUI5Q0MgXHVENTU4XHVBQ0UwIFx1Qzg4NVx1QjhDQ1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyogXHUyNTAwXHUyNTAwIDMuIFx1Qzk4OVx1QzJEQyhcdUI2MTBcdUIyOTQgZGVib3VuY2UpIFx1QjgwQ1x1QjM1NCBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuICByZW5kZXJEZWJvdW5jZWQoKTtcclxufVxyXG5cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgXHVEODNEXHVEQ0NDICBcdUNDMzhcdUFDRTBcclxuICAgICAgXHUyMDIyIHJlbmRlciAvIFx1RDU0NFx1RDEzMCAvIFx1QzgxNVx1QjgyQyBcdUM4MDRcdUNDQjQgXHVCODVDXHVDOUMxXHVDNzQwIGxlZ2FjeSBJbnRlcmFjdGl2ZVRhYmxlLnRzXHJcbiAgICAgICAgKCMwfiMzIFx1QUQ2Q1x1QzVFRCkgXHVDNzQ0IFx1QURGOFx1QjMwMFx1Qjg1QyBcdUQzRUNcdUQzMDVcdUQ1NThcdUM2MDBcdUIyRTQuICA6Y29udGVudFJlZmVyZW5jZVtvYWljaXRlOjBde2luZGV4PTB9XHJcbiAgICAgIFx1MjAyMiBVSSBcdUFENkNcdUMxMzFcdUM3NDAgdWkudHMgXHUyMDEzIFVJTWFuYWdlci5idWlsZFZpZXcoKSBcdUM2NDAgMToxIFx1QzVGMFx1QjNEOVx1QjQyOC4gOmNvbnRlbnRSZWZlcmVuY2Vbb2FpY2l0ZToxXXtpbmRleD0xfTpjb250ZW50UmVmZXJlbmNlW29haWNpdGU6Ml17aW5kZXg9Mn1cclxuICAgICAgXHUyMDIyIHRhYmxlU3RhdGUgXHVCM0Q5XHVBRTMwXHVENjU0IFx1QzgwNFx1QjdCNVx1Qzc0MCBTdGF0ZUNlbnRlci5zZXQoKSBcdUFDRkMgXHVCM0Q5XHVDNzdDLiA6Y29udGVudFJlZmVyZW5jZVtvYWljaXRlOjNde2luZGV4PTN9OmNvbnRlbnRSZWZlcmVuY2Vbb2FpY2l0ZTo0XXtpbmRleD00fVxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4iLCAiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIHNyYy9mZWF0dXJlcy9nYW50dC9wYWxldHRlLnRzIFx1MjAxMyBhdXRvLWdlbmVyYXRlZCBmcm9tIGxlZ2FjeSBDb3Zlci1UYWJsZSB2MjAyNS0wNVxyXG4gKiAgIFx1MjAyMiBcdUM4MDRcdUNDQjQgXHVDNzc0XHVBRDAwIFx1Q0Y1NFx1QjREQyBcdTIwMTMgXHVDMjE4XHVDODE1IFx1QUUwOFx1QzlDMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogIEdhbnR0ICBcdTI3OUMgIFBhbGV0dGUgTW9kdWxlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgXHUwMEI3IFx1QUMwNFx1RDJCOCBcdUNDMjhcdUQyQjhcdUM1RDBcdUMxMUMgXHVDMEFDXHVDNkE5XHVENTU4XHVCMjk0ICoqXHVDMEM5XHVDMEMxIFx1RDMxNFx1QjgwOFx1RDJCOCBcdUFEMDBcdUI5QUMgXHVDODA0XHVDNkE5KiogXHVCQUE4XHVCNEM4XHVDNzg1XHVCMkM4XHVCMkU0LlxyXG4gKiAgXHUwMEI3IFx1QUUzMFx1Qzg3NCBHYW50dFRhYmxlLnRzIFx1QzVEMCBcdUJEODRcdUMwQjBcdUIzRkMgXHVDNzg4XHVCMzU4IFx1QzBDOVx1QzBDMSBcdUMwQzFcdUMyMThcdTIwMjdcdUQ1NjBcdUIyRjkgXHVCODVDXHVDOUMxXHVDNzQ0XHJcbiAqICAgIFx1QzdBQ1x1QzBBQ1x1QzZBOVx1QzEzMVx1Qzc3NCBcdUIxOTJcdUIzQzRcdUI4NUQgXHVCQ0M0XHVCM0M0IFx1RDMwQ1x1Qzc3Q1x1Qjg1QyBcdUJEODRcdUI5QUNcdUQ1ODhcdUMyQjVcdUIyQzhcdUIyRTQuXHJcbiAqXHJcbiAqICBcdUQ4M0RcdURDQ0MgXHVDOEZDXHVDNjk0IFx1QUQ2Q1x1QzEzMVxyXG4gKiAgICAxKSBcdUFFMzBcdUJDRjggXHVEMzE0XHVCODA4XHVEMkI4IFx1QzBDMVx1QzIxOCAgICAgICBcdTIwMTMgIERFRkFVTFRfREFSSyAvIERFRkFVTFRfTElHSFRcclxuICogICAgMikgcGlja1BhbGV0dGUoKSAgICAgICAgICBcdTIwMTMgIFx1RDE0Q1x1QjlDOChcdUI3N0NcdUM3NzRcdUQyQjgvXHVCMkU0XHVEMDZDKSArIFx1QzBBQ1x1QzZBOVx1Qzc5MCBcdUMxMjRcdUM4MTVcclxuICogICAgMykgR2FudHRQYWxldHRlIGNsYXNzICAgICBcdTIwMTMgIFx1QjE3OFx1RDJCOCBcdUM4MUNcdUJBQTkgXHUyMTk0IFx1QzBDOVx1QzBDMSBcdUI5RTRcdUQ1NTEgXHVENUVDXHVEMzdDXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAxLiAgXHVBRTMwXHVCQ0Y4IFx1RDMxNFx1QjgwOFx1RDJCOCBcdUMwQzFcdUMyMThcclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuLyoqIFx1QjJFNFx1RDA2QyBcdUQxNENcdUI5QzggXHVBRTMwXHVCQ0Y4IFx1RDMxNFx1QjgwOFx1RDJCOCAqL1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9EQVJLOiBzdHJpbmdbXSA9IFtcclxuICBcIiNmZjYzNjNcIiwgXCIjZmZhNjAwXCIsIFwiI2ZmY2YwMFwiLCBcIiM4YWZmODBcIiwgXCIjMmVmZmQzXCIsXHJcbiAgXCIjMDBmZmZmXCIsIFwiIzI1YzZmY1wiLCBcIiMzMzk5ZmZcIiwgXCIjOTk3NWUyXCIsIFwiI2NjNjZjY1wiLFxyXG4gIFwiI2ZmNjZmZlwiLCBcIiNmZjY2Y2NcIiwgXCIjZmY2Njk5XCIsIFwiI2ZmNjY2NlwiLCBcIiNmMDZiNjBcIixcclxuICBcIiNlZDc3MzJcIiwgXCIjZGU5ZjAwXCIsIFwiI2FmZmY2OFwiLCBcIiM1M2ZmYjRcIiwgXCIjMmY5ZWZmXCIsXHJcbl07XHJcblxyXG4vKiogXHVCNzdDXHVDNzc0XHVEMkI4IFx1RDE0Q1x1QjlDOCBcdUFFMzBcdUJDRjggXHVEMzE0XHVCODA4XHVEMkI4ICovXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0xJR0hUOiBzdHJpbmdbXSA9IFtcclxuICBcIiNmZjk5OTlcIiwgXCIjZmZjMDRkXCIsIFwiI2ZmZTY4MFwiLCBcIiNiM2ZmYjNcIiwgXCIjODBmZmYyXCIsXHJcbiAgXCIjODBmZmZmXCIsIFwiIzk5ZGFmZlwiLCBcIiM5OWMyZmZcIiwgXCIjYzJhM2U4XCIsIFwiI2RmOWVkZlwiLFxyXG4gIFwiI2ZmOTlmZlwiLCBcIiNmZjk5ZTZcIiwgXCIjZmY5OWMyXCIsIFwiI2ZmOTk5OVwiLCBcIiNmNGEzOGNcIixcclxuICBcIiNmMWIwNjZcIiwgXCIjZWVjOTAwXCIsIFwiI2M1ZmY4YVwiLCBcIiM4NGZmYzlcIiwgXCIjNzRiYWZmXCIsXHJcbl07XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIDIuICBwaWNrUGFsZXR0ZSgpXHJcbiAgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgXHUwMEI3IFx1Qjc3Q1x1Qzc3NFx1RDJCOC9cdUIyRTRcdUQwNkMgXHVCQUE4XHVCNERDICsgXHVDMEFDXHVDNkE5XHVDNzkwIFx1QzgxNVx1Qzc1OCBcdUQzMTRcdUI4MDhcdUQyQjggXHVDMTI0XHVDODE1XHVDNzQ0IFx1Qzg3MFx1RDU2OVx1RDU1OFx1QzVFQ1xyXG4gICAgXHVDRDVDXHVDODg1IFx1RDMxNFx1QjgwOFx1RDJCOChzdHJpbmdbXSlcdUI5N0MgXHVCQzE4XHVENjU4XHVENTY5XHVCMkM4XHVCMkU0LlxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFBhbGV0dGVTZXR0aW5ncyB7XHJcbiAgLyoqIFx1Qjc3Q1x1Qzc3NFx1RDJCOC9cdUIyRTRcdUQwNkMgXHVBQ0Y1XHVEMUI1IFx1RDMxNFx1QjgwOFx1RDJCOChcdUM2QjBcdUMxMjBcdUMyMUNcdUM3MDQgMikgKi9cclxuICBjb2xvclBhbGV0dGU/OiBzdHJpbmdbXTtcclxuICAvKiogXHVCMkU0XHVEMDZDIFx1QkFBOFx1QjREQyBcdUM4MDRcdUM2QTkgXHVDMEFDXHVDNkE5XHVDNzkwIFx1RDMxNFx1QjgwOFx1RDJCOChcdUM2QjBcdUMxMjBcdUMyMUNcdUM3MDQgMSkgKi9cclxuICBjb2xvclBhbGV0dGVEYXJrPzogc3RyaW5nW107XHJcbiAgLyoqIFx1Qjc3Q1x1Qzc3NFx1RDJCOCBcdUJBQThcdUI0REMgXHVDODA0XHVDNkE5IFx1QzBBQ1x1QzZBOVx1Qzc5MCBcdUQzMTRcdUI4MDhcdUQyQjgoXHVDNkIwXHVDMTIwXHVDMjFDXHVDNzA0IDEpICovXHJcbiAgY29sb3JQYWxldHRlTGlnaHQ/OiBzdHJpbmdbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSBpc0RhcmsgICBcdUQ2MDRcdUM3QUMgT2JzaWRpYW4gXHVEMTRDXHVCOUM4XHVBQzAwIFx1QjJFNFx1RDA2Q1x1Qzc3OFx1QzlDMCBcdUM1RUNcdUJEODBcclxuICogQHBhcmFtIG9wdHMgICAgIEdhbnR0U2V0dGluZ3MgXHVDNzdDXHVCRDgwKGNvbG9yUGFsZXR0ZSBcdUFEMDBcdUI4MjgpIFx1QUQ2Q1x1Qzg3MFx1Q0NCNFxyXG4gKiBAcmV0dXJucyAgICAgICAgXHVDRDVDXHVDODg1IFx1QzBDOVx1QzBDMSBcdUJDMzBcdUM1RjQoXHVCQzI5XHVDNUI0XHVDODAxIFx1QkNGNVx1QzBBQ1x1QkNGOClcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwaWNrUGFsZXR0ZShcclxuICBpc0Rhcms6IGJvb2xlYW4sXHJcbiAgb3B0czogUGFsZXR0ZVNldHRpbmdzID0ge30sXHJcbik6IHN0cmluZ1tdIHtcclxuICBjb25zdCB7IGNvbG9yUGFsZXR0ZSwgY29sb3JQYWxldHRlRGFyaywgY29sb3JQYWxldHRlTGlnaHQgfSA9IG9wdHM7XHJcblxyXG4gIC8qIFx1QjJFNFx1RDA2QyBcdUJBQThcdUI0REMgKi9cclxuICBpZiAoaXNEYXJrKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBjb2xvclBhbGV0dGVEYXJrID8/XHJcbiAgICAgIGNvbG9yUGFsZXR0ZSA/P1xyXG4gICAgICBERUZBVUxUX0RBUktcclxuICAgICkuc2xpY2UoKTtcclxuICB9XHJcblxyXG4gIC8qIFx1Qjc3Q1x1Qzc3NFx1RDJCOCBcdUJBQThcdUI0REMgKi9cclxuICByZXR1cm4gKFxyXG4gICAgY29sb3JQYWxldHRlTGlnaHQgPz9cclxuICAgIGNvbG9yUGFsZXR0ZSA/P1xyXG4gICAgREVGQVVMVF9MSUdIVFxyXG4gICkuc2xpY2UoKTtcclxufVxyXG5cclxuLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAzLiAgR2FudHRQYWxldHRlIFx1RDA3NFx1Qjc5OFx1QzJBNFxyXG4gIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIFx1MDBCNyBcdUIxNzhcdUQyQjgoXHVCNjEwXHVCMjk0IFRhc2spIFx1Qzc3NFx1Qjk4NFx1Qzc0NCBcdUQzMTRcdUI4MDhcdUQyQjggXHVDMEM5XHVDMEMxXHVDNUQwIFx1QzIxQ1x1Q0MyOFx1QzgwMVx1QzczQ1x1Qjg1QyBcdUI5RTRcdUQ1NTFcdUQ1NjlcdUIyQzhcdUIyRTQuXHJcbiAgXHUwMEI3IFx1QjNEOVx1Qzc3QyBcdUM3NzRcdUI5ODRcdUM3NDAgXHVENTZEXHVDMEMxIFx1QjNEOVx1Qzc3QyBcdUMwQzlcdUMwQzFcdUM3NzQgXHVCQzE4XHVENjU4XHVCNDE4XHVCQkMwXHVCODVDIFx1QkM5NFx1Qjg0MChsZWdlbmQpXHVDNUQwXHJcbiAgICBcdUQ2NUNcdUM2QTlcdUQ1NjAgXHVDMjE4IFx1Qzc4OFx1QzJCNVx1QjJDOFx1QjJFNC5cclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuZXhwb3J0IGNsYXNzIEdhbnR0UGFsZXR0ZSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBub3RlQ29sb3JNYXA6IFJlY29yZDxzdHJpbmcsIHsgY29sb3JJbmRleDogbnVtYmVyIHwgbnVsbCB9PiA9IHt9O1xyXG4gIHByaXZhdGUgY29sb3JQdHIgPSAwO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHBhbGV0dGU6IHN0cmluZ1tdKSB7fVxyXG5cclxuICAvKiogXHVCMTc4XHVEMkI4IFx1Qzc3NFx1Qjk4NFx1Qzc0NCBcdUQzMTRcdUI4MDhcdUQyQjhcdUM1RDAgXHVCNEYxXHVCODVEKFx1Qzc3NFx1QkJGOCBcdUI0RjFcdUI4NURcdUI0MThcdUM1QjQgXHVDNzg4XHVDNzNDXHVCQTc0IFx1QkIzNFx1QzJEQykgKi9cclxuICBhc3NpZ24obm90ZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5ub3RlQ29sb3JNYXBbbm90ZV0pIHJldHVybjtcclxuICAgIGlmICh0aGlzLnBhbGV0dGUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMubm90ZUNvbG9yTWFwW25vdGVdID0geyBjb2xvckluZGV4OiBudWxsIH07XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGlkeCA9IHRoaXMuY29sb3JQdHIgJSB0aGlzLnBhbGV0dGUubGVuZ3RoO1xyXG4gICAgdGhpcy5ub3RlQ29sb3JNYXBbbm90ZV0gPSB7IGNvbG9ySW5kZXg6IGlkeCB9O1xyXG4gICAgdGhpcy5jb2xvclB0cisrO1xyXG4gIH1cclxuXHJcbiAgLyoqIFx1QjRGMVx1Qjg1RFx1QjQxQyBcdUIxNzhcdUQyQjggXHVDNzc0XHVCOTg0XHVDNzU4IFx1QzBDOVx1QzBDMVx1Qzc0NCBcdUJDMThcdUQ2NTgoXHVDNUM2XHVDNzNDXHVCQTc0IFx1QUUzMFx1QkNGOCAjOTk5KSAqL1xyXG4gIGNvbG9yT2Yobm90ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5ub3RlQ29sb3JNYXBbbm90ZV07XHJcbiAgICBpZiAoIWVudHJ5IHx8IGVudHJ5LmNvbG9ySW5kZXggPT0gbnVsbCkgcmV0dXJuIFwiIzk5OVwiO1xyXG4gICAgcmV0dXJuIHRoaXMucGFsZXR0ZVtlbnRyeS5jb2xvckluZGV4XTtcclxuICB9XHJcblxyXG4gIC8qKiBcdUQ2MDRcdUM3QUMgXHVCOUU0XHVENTUxIFx1QzgxNVx1QkNGNFx1Qjk3QyBcdUFDMURcdUNDQjQgXHVENjE1XHVEMERDKHsgbm90ZTogaGV4IH0pXHVCODVDIFx1QkMxOFx1RDY1OCAqL1xyXG4gIGxlZ2VuZCgpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcclxuICAgIGNvbnN0IHJlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5ub3RlQ29sb3JNYXApLmZvckVhY2gobm90ZSA9PiB7XHJcbiAgICAgIHJlc1tub3RlXSA9IHRoaXMuY29sb3JPZihub3RlKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIC8qKiBcdUM4MDRcdUNDQjQgXHVCOUU0XHVENTUxXHUyMDI3XHVDMEM5XHVDMEMxIFx1RDNFQ1x1Qzc3OFx1RDEzMCBcdUNEMDhcdUFFMzBcdUQ2NTQgKi9cclxuICByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuY29sb3JQdHIgPSAwO1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5ub3RlQ29sb3JNYXApLmZvckVhY2goayA9PiBkZWxldGUgdGhpcy5ub3RlQ29sb3JNYXBba10pO1xyXG4gIH1cclxufVxyXG5cclxuLyogXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIFx1Q0MzOFx1QUNFMCBcdUM2RDBcdUJDRjggXHVDRjU0XHVCNERDIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gKiBcdTAwQjcgXHVBRTMwXHVCQ0Y4IFx1RDMxNFx1QjgwOFx1RDJCOCBcdUJDMzBcdUM1RjRcdUFDRkMgXHVDMEM5XHVDMEMxIFx1RDU2MFx1QjJGOSBcdUI4NUNcdUM5QzFcdUM3NDAgbGVnYWN5IEdhbnR0VGFibGUudHNcclxuICogICBcdUM1RDBcdUMxMUMgMToxIFx1RDNFQ1x1RDMwNVx1RDU1OFx1QzYwMFx1QzJCNVx1QjJDOFx1QjJFNC4gOmNvbnRlbnRSZWZlcmVuY2Vbb2FpY2l0ZTowXXtpbmRleD0wfTpjb250ZW50UmVmZXJlbmNlW29haWNpdGU6MV17aW5kZXg9MX1cclxuICogXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwICovXHJcbiIsICIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogc3JjL2ZlYXR1cmVzL2dhbnR0L0dhbnR0TW9kZWwudHMgXHUyMDEzIGF1dG8tZ2VuZXJhdGVkIGZyb20gbGVnYWN5IENvdmVyLVRhYmxlIHYyMDI1LTA1XHJcbiAqICAgXHUyMDIyIFx1QzgwNFx1Q0NCNCBcdUM3NzRcdUFEMDAgXHVDRjU0XHVCNERDIFx1MjAxMyBcdUMyMThcdUM4MTUgXHVBRTA4XHVDOUMwXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiAgXHVEODNEXHVEQ0U2IEdhbnR0TW9kZWwgIChcdUMyMUNcdUMyMTggTW9kZWwgXHVBQ0M0XHVDRTM1KVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIFx1MDBCNyBEYXRhdmlldyBcdUQzOThcdUM3NzRcdUM5QzBcdUI5N0MgXHVCRDg0XHVDMTFEXHVENTU4XHVDNUVDICoqXHVDNkQ0XHVBQzA0IEdhbnR0IFx1Q0MyOFx1RDJCOCoqXHVDNUQwIFx1RDU0NFx1QzY5NFx1RDU1Q1xyXG4gKiAgICBcdUJBQThcdUI0RTAgXHVCMzcwXHVDNzc0XHVEMTMwXHVCOTdDIFx1QUNDNFx1QzBCMFx1RDU2OVx1QjJDOFx1QjJFNC5cclxuICogIFx1MDBCNyBVSSBcdUNGNTRcdUI0RENcdUIyOTQgR2FudHRDb250cm9sbGVyIC8gR2FudHRVSU1hbmFnZXIgXHVCODVDIFx1QkQ4NFx1QjlBQ1x1QjQxOFx1QkE3MCxcclxuICogICAgTW9kZWwgXHVDNzQwIFx1QjJFNFx1Qzc0Q1x1QjlDQyBcdUIyRjRcdUIyRjlcdUQ1NjlcdUIyQzhcdUIyRTQuXHJcbiAqICAgICAgXHUyNDYwIFx1QjMwMFx1QzBDMSBwYWdlIFx1QzIxOFx1QzlEMSAmIFx1RDU0NFx1RDEzMFxyXG4gKiAgICAgIFx1MjQ2MSBcdUMyRENcdUM3OTEtXHVDODg1XHVCOENDXHVDNzdDIFx1QUNDNFx1QzBCMFxyXG4gKiAgICAgIFx1MjQ2MiBcdUQzMTRcdUI4MDhcdUQyQjgoY29sb3IpIFx1QUNCMFx1QzgxNSAmIFx1QkM5NFx1Qjg0MChsZWdlbmQpIFx1QjlFNFx1RDU1MVxyXG4gKiAgICAgIFx1MjQ2MyBcdUFDQjBcdUFDRkMgXHVBRDZDXHVDODcwXHVDQ0I0KERhdGFQYWNrKSBcdUJDMThcdUQ2NThcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG5pbXBvcnQgdHlwZSB7IEFwcCwgTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBwaWNrUGFsZXR0ZSwgR2FudHRQYWxldHRlLCBQYWxldHRlU2V0dGluZ3MgfSBmcm9tIFwiLi9wYWxldHRlXCI7XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIDEuIFx1RDBDMFx1Qzc4NSBcdUM4MTVcdUM3NThcclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuZXhwb3J0IGludGVyZmFjZSBHYW50dFNldHRpbmdzIGV4dGVuZHMgUGFsZXR0ZVNldHRpbmdzIHtcclxuICAvKiBEYXRhdmlldyBcdUJDOTRcdUM3MDQgKi9cclxuICBpZD86IHN0cmluZzsgICAgICAgICAgICAgIC8vIGZ1dHVyZSB1c2UgXHUyMDEzIG11bHRpcGxlIGdhbnR0IG9uIG9uZSBub3RlXHJcbiAgcGF0aD86IHN0cmluZzsgICAgICAgICAgICAvLyBcIlxcXCJQcm9qZWN0c1xcXCJcIiBcdUQ2MTVcdUQwRENcclxuICBjdXN0b21QYWdlcz86IGFueVtdOyAgICAgIC8vIFx1QzY3OFx1QkQ4MFx1QzVEMFx1QzExQyBcdUM5QzFcdUM4MTEgXHVDOEZDXHVDNzg1XHVENTVDIHBhZ2UgXHVCQzMwXHVDNUY0XHJcblxyXG4gIC8qIFx1QzBDMVx1RDBEQyBcdUQ1NDRcdUQxMzAgKi9cclxuICBzdGF0dXNGaWVsZD86IHN0cmluZzsgICAgIC8vIGRlZmF1bHQ6IFwic3RhdHVzXCJcclxuICBzdGF0dXNEb25lVmFsdWU/OiBzdHJpbmc7IC8vIGRlZmF1bHQ6IFwiZG9uZVwiXHJcbiAgZXhjbHVkZURvbmU/OiBib29sZWFuOyAgICAvLyBkZWZhdWx0OiB0cnVlXHJcblxyXG4gIC8qIFx1QjBBMFx1QzlEQyBcdUQ1NDRcdUI0REMgKi9cclxuICBzdGFydEZpZWxkPzogc3RyaW5nOyAgICAgIC8vIGRlZmF1bHQ6IFwiZGF0ZUFkZGVkXCJcclxuICBlbmRGaWVsZD86IHN0cmluZzsgICAgICAgIC8vIGRlZmF1bHQ6IFwiZGF0ZUVuZGVkXCJcclxuXHJcbiAgLyogXHVENDVDXHVDMkRDIFx1QzYzNVx1QzE1OCAoVUkgXHVDODA0XHVDNkE5LCBNb2RlbCBcdUM3NDAgXHVBREY4XHVCMzAwXHVCODVDIFx1QzgwNFx1QjJFQykgKi9cclxuICBzaG93TGVnZW5kPzogYm9vbGVhbjtcclxuICByZW5kZXJJbnRlcmFjdGl2ZUJlbG93PzogYm9vbGVhbjtcclxuICBmb3JjZUludGVyYWN0aXZlQmVsb3c/OiBib29sZWFuO1xyXG4gIGludGVyYWN0aXZlT3B0aW9ucz86IGFueTtcclxuICBwcm9wcz86IGFueVtdO1xyXG4gIGRlYnVnTGVnZW5kPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqICBNb2RlbCBcdTIxOTIgQ29udHJvbGxlciBcdUI4NUMgXHVDODA0XHVCMkVDXHVCNDE4XHVCMjk0IFx1QzY0NFx1QzEzMSBcdUIzNzBcdUM3NzRcdUQxMzAgKi9cclxuZXhwb3J0IGludGVyZmFjZSBHYW50dERhdGFQYWNrIHtcclxuICAvKiogXHVDRDVDXHVDODg1IHBhZ2UgXHVCQzMwXHVDNUY0KFx1RDU0NFx1RDEzMCBcdUM4MDFcdUM2QTkgXHVENkM0KSAqL1xyXG4gIHBhZ2VzOiBhbnlbXTtcclxuICAvKiogXHVCQzk0XHVDNzA0OiBcdUFFMzBcdUM5MDAgXHVDNUYwXHVCM0M0ICYgXHVDNkQ0KDAtYmFzZWQpICovXHJcbiAgeWVhcjogbnVtYmVyO1xyXG4gIG1vbnRoOiBudW1iZXI7XHJcbiAgLyoqIFx1Qzc3NFx1QkM4OFx1QjJFQyBcdUNEMUQgXHVDNzdDIFx1QzIxOCAqL1xyXG4gIGRheXNJbk1vbnRoOiBudW1iZXI7XHJcbiAgLyoqIFx1MjAxQ1x1QjE3OFx1RDJCOCBcdUM4MUNcdUJBQTkgXHUyMTkyIFx1RDMxNFx1QjgwOFx1RDJCOCBcdUMwQzlcdUMwQzEoaGV4KVx1MjAxRCBcdUI5RTRcdUQ1NTEgKi9cclxuICBsZWdlbmQ6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XHJcbiAgLyoqIFx1RDMxNFx1QjgwOFx1RDJCOCBcdUM4MDRcdUNDQjQgXHVCQzMwXHVDNUY0KFx1QkMyOVx1QzVCNFx1QzgwMSBcdUMwQUNcdUJDRjgpICovXHJcbiAgcGFsZXR0ZTogc3RyaW5nW107XHJcbiAgLyoqIFx1RDU0NFx1QjREQyBcdUM3NzRcdUI5ODQoXHVDMkRDXHVDNzkxL1x1Qzg4NVx1QjhDQykgXHVDRTkwXHVDMkRDICovXHJcbiAgc3RhcnRGaWVsZDogc3RyaW5nO1xyXG4gIGVuZEZpZWxkOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgMi4gR2FudHRNb2RlbFxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgY2xhc3MgR2FudHRNb2RlbCB7XHJcbiAgLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgXHVENTQ0XHVCNERDIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkdjogYW55O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgYXBwOiBBcHA7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBzZXR0aW5nczogR2FudHRTZXR0aW5ncztcclxuICBwcml2YXRlIHJlYWRvbmx5IGlzRGFyazogYm9vbGVhbjtcclxuICBwcml2YXRlIHJlYWRvbmx5IHBhbGV0dGU6IHN0cmluZ1tdO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgZ1BhbGV0dGU6IEdhbnR0UGFsZXR0ZTtcclxuXHJcbiAgLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgY3RvciBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgYXBwOiBBcHAsXHJcbiAgICBkdjogYW55LFxyXG4gICAgc2V0dGluZ3M6IEdhbnR0U2V0dGluZ3MgPSB7fSxcclxuICAgIC8qKiBjdHggXHVENTQ0XHVDNjk0IFx1QzJEQyBcdUM2NzhcdUJEODBcdUM1RDBcdUMxMUMgXHVDODA0XHVCMkVDKFx1RDM5OFx1Qzc3NFx1QzlDMCBcdUQzMTBcdUIyRThcdUM2QTkpICovXHJcbiAgICBjdHg/OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxyXG4gICkge1xyXG4gICAgLyogKDApIFx1QUUzMFx1QkNGOFx1QUMxMiBcdUJDRjRcdUM4MTUgKi9cclxuICAgIHNldHRpbmdzLnN0YXR1c0ZpZWxkICAgICA/Pz0gXCJvYnNpZGlhblVJTW9kZVwiO1xyXG4gICAgc2V0dGluZ3Muc3RhdHVzRG9uZVZhbHVlID8/PSBcInByZXZpZXdcIjtcclxuICAgIHNldHRpbmdzLmV4Y2x1ZGVEb25lICAgICA/Pz0gdHJ1ZTtcclxuICAgIHNldHRpbmdzLnN0YXJ0RmllbGQgICAgICA/Pz0gXCJkYXRlQWRkZWRcIjtcclxuICAgIHNldHRpbmdzLmVuZEZpZWxkICAgICAgICA/Pz0gXCJkYXRlRW5kZWRcIjtcclxuXHJcbiAgICB0aGlzLmFwcCAgICAgID0gYXBwO1xyXG4gICAgdGhpcy5kdiAgICAgICA9IGR2O1xyXG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG5cclxuICAgIC8qICgxKSBcdUQxNENcdUI5QzgobGlnaHQvZGFyaykgXHVBQ0IwXHVDODE1ICovXHJcbiAgICB0aGlzLmlzRGFyayA9IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGhlbWUtZGFya1wiKTtcclxuXHJcbiAgICAvKiAoMikgXHVDMEM5XHVDMEMxIFx1RDMxNFx1QjgwOFx1RDJCOCBcdUM5MDBcdUJFNDQgKi9cclxuICAgIHRoaXMucGFsZXR0ZSAgID0gcGlja1BhbGV0dGUodGhpcy5pc0RhcmssIHNldHRpbmdzKTtcclxuICAgIHRoaXMuZ1BhbGV0dGUgID0gbmV3IEdhbnR0UGFsZXR0ZSh0aGlzLnBhbGV0dGUpO1xyXG5cclxuICAgIC8qICgzKSBjdXJyZW50IHBhZ2UgXHVEM0Y0XHVCQzMxIFx1MjAxMyBjYW52YXMgXHVDOUMwXHVDNkQwIFx1QzcwNFx1RDU3NCBjdHggXHVDMEFDXHVDNkE5ICovXHJcbiAgICBpZiAoIWR2LmN1cnJlbnQ/LigpICYmIGN0eD8uc291cmNlUGF0aClcclxuICAgICAgKGR2IGFzIGFueSkuY3VycmVudCA9ICgpID0+IGR2LnBhZ2UoY3R4LnNvdXJjZVBhdGgpO1xyXG4gIH1cclxuXHJcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgKiAgY29tcHV0ZSgpIFx1MjAxMyBcdUJBQThcdUI0RTAgXHVBQ0M0XHVDMEIwIFx1QzIxOFx1RDU4OSBcdUQ2QzQgRGF0YVBhY2sgXHVCQzE4XHVENjU4XHJcbiAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuICBjb21wdXRlKCk6IEdhbnR0RGF0YVBhY2sge1xyXG4gICAgY29uc3QgeyBwYWdlcywgeWVhciwgbW9udGgsIGRheXNJbk1vbnRoIH0gPSB0aGlzLmNvbGxlY3RQYWdlcygpO1xyXG4gICAgY29uc3QgbGVnZW5kID0gdGhpcy5nUGFsZXR0ZS5sZWdlbmQoKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBwYWdlcyxcclxuICAgICAgeWVhcixcclxuICAgICAgbW9udGgsXHJcbiAgICAgIGRheXNJbk1vbnRoLFxyXG4gICAgICBsZWdlbmQsXHJcbiAgICAgIHBhbGV0dGUgICAgIDogWy4uLnRoaXMucGFsZXR0ZV0sIC8vIFx1QkMyOVx1QzVCNFx1QzgwMSBcdUJDRjVcdUMwQUNcclxuICAgICAgc3RhcnRGaWVsZCAgOiB0aGlzLnNldHRpbmdzLnN0YXJ0RmllbGQhLFxyXG4gICAgICBlbmRGaWVsZCAgICA6IHRoaXMuc2V0dGluZ3MuZW5kRmllbGQhLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgICAyLUEuIFx1RDM5OFx1Qzc3NFx1QzlDMCBcdUMyMThcdUM5RDEgKyBcdUQ1NDRcdUQxMzBcclxuICBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG4gIHByaXZhdGUgY29sbGVjdFBhZ2VzKCkge1xyXG4gICAgLyogKEEtMSkgXHVBRTMwXHVDOTAwIFx1QzVGMC9cdUM2RDQgKi9cclxuICAgIGNvbnN0IG5vdyAgICAgICAgID0gbmV3IERhdGUoKTtcclxuICAgIGNvbnN0IHllYXIgICAgICAgID0gbm93LmdldEZ1bGxZZWFyKCk7XHJcbiAgICBjb25zdCBtb250aCAgICAgICA9IG5vdy5nZXRNb250aCgpOyAgICAgICAgICAvLyAwLWJhc2VkXHJcbiAgICBjb25zdCBkYXlzSW5Nb250aCA9IG5ldyBEYXRlKHllYXIsIG1vbnRoICsgMSwgMCkuZ2V0RGF0ZSgpO1xyXG5cclxuICAgIC8qIChBLTIpIFx1QkNBMFx1Qzc3NFx1QzJBNCBwYWdlcyBcdTIwMTMgY3VzdG9tUGFnZXMgPiBwYXRoID4gc2FtZS1mb2xkZXIgKi9cclxuICAgIGNvbnN0IGN1ciAgID0gdGhpcy5kdi5jdXJyZW50Py4oKTtcclxuICAgIGNvbnN0IGJhc2U6IGFueVtdID0gQXJyYXkuaXNBcnJheSh0aGlzLnNldHRpbmdzLmN1c3RvbVBhZ2VzKVxyXG4gICAgICA/IHRoaXMuc2V0dGluZ3MuY3VzdG9tUGFnZXNcclxuICAgICAgOiB0aGlzLnNldHRpbmdzLnBhdGhcclxuICAgICAgICA/IHRoaXMuZHYucGFnZXMoYFwiJHt0aGlzLnNldHRpbmdzLnBhdGh9XCJgKS5hcnJheSgpXHJcbiAgICAgICAgOiBjdXI/LmZpbGVcclxuICAgICAgICAgID8gdGhpcy5kdi5wYWdlcygpLndoZXJlKChwOiBhbnkpID0+XHJcbiAgICAgICAgICAgICAgcC5maWxlLmZvbGRlciA9PT0gY3VyLmZpbGUuZm9sZGVyICYmIHAuZmlsZS5wYXRoICE9PSBjdXIuZmlsZS5wYXRoLFxyXG4gICAgICAgICAgICApLmFycmF5KClcclxuICAgICAgICAgIDogW107XHJcblxyXG4gICAgLyogKEEtMykgXHVDMEMxXHVEMERDL1x1QjBBMFx1QzlEQyBcdUQ1NDRcdUQxMzAgKi9cclxuICAgIGNvbnN0IHNLZXkgICA9IHRoaXMuc2V0dGluZ3Muc3RhdHVzRmllbGQhO1xyXG4gICAgY29uc3QgZG9uZVYgID0gdGhpcy5zZXR0aW5ncy5zdGF0dXNEb25lVmFsdWUhLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBjb25zdCBleGNsICAgPSB0aGlzLnNldHRpbmdzLmV4Y2x1ZGVEb25lICE9PSBmYWxzZTtcclxuICAgIGNvbnN0IHNGaWVsZCA9IHRoaXMuc2V0dGluZ3Muc3RhcnRGaWVsZCE7XHJcbiAgICBjb25zdCBlRmllbGQgPSB0aGlzLnNldHRpbmdzLmVuZEZpZWxkITtcclxuXHJcblxyXG5cclxuICAgIGNvbnN0IHBhZ2VzID0gYmFzZS5maWx0ZXIoKHA6IGFueSkgPT4ge1xyXG5cclxuICAgICAgLy8gQ2FudmFzIFx1RDM5OFx1Qzc3NFx1QzlDMCguY2FudmFzKSBcdTIxOTIgR2FudHQgXHVCMzAwXHVDMEMxIFx1QzgxQ1x1QzY3OFxyXG4gICAgICBpZiAocC5maWxlPy5leHRlbnNpb24gPT09IFwiY2FudmFzXCIpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgIC8qIFx1QzBDMVx1RDBEQ1x1QUMxMiBcdUQ1NDRcdUQxMzAgKi9cclxuICAgICAgaWYgKGV4Y2wpIHtcclxuICAgICAgICBjb25zdCBzdGF0ID0gKHBbc0tleV0gPz8gXCJcIikudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGlmIChzdGF0ID09PSBkb25lVikgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIC8qIFx1QjBBMFx1QzlEQyBcdUQ1NDRcdUI0REMgXHVDODc0XHVDN0FDIFx1QzVFQ1x1QkQ4MCAqL1xyXG4gICAgICByZXR1cm4gISFwW3NGaWVsZF0gJiYgISFwW2VGaWVsZF07XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiAoQS00KSBcdUQzMTRcdUI4MDhcdUQyQjhcdUM2QTkgXHVDODFDXHVCQUE5IFx1QjRGMVx1Qjg1RCAqL1xyXG4gICAgcGFnZXMuZm9yRWFjaChwZyA9PiB7XHJcbiAgICAgIGNvbnN0IHRpdGxlID0gcGcudGl0bGUgfHwgcGcuZmlsZT8ubmFtZSB8fCBcIlVudGl0bGVkXCI7XHJcbiAgICAgIHRoaXMuZ1BhbGV0dGUuYXNzaWduKHRpdGxlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7IHBhZ2VzLCB5ZWFyLCBtb250aCwgZGF5c0luTW9udGggfTtcclxuICB9XHJcblxyXG4gIC8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgICAyLUIuIFx1QzE0MCBcdUMwQzlcdUMwQzEgXHVEMzEwXHVCMkU4IFx1RDVFQ1x1RDM3Q1xyXG4gICAgQ29udHJvbGxlciBcdTIxOTIgVUkgXHVCMkU4XHVBQ0M0XHVDNUQwXHVDMTFDIHRkIFx1QjlDOFx1QjJFNCBcdUQ2MzhcdUNEOUNcdUQ1NzQgXHVCQzMwXHVBQ0JEXHVDMEM5IFx1QUNCMFx1QzgxNVxyXG4gIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiAgLyoqXHJcbiAgICogbm90ZSBcdUM4MUNcdUJBQTlcdUFDRkMgXHVCMEEwXHVDOURDKDEtYmFzZWQpIFx1MjE5MiBcdUQzMTRcdUI4MDhcdUQyQjggXHVDMEM5XHVDMEMxIG9yIG51bGxcclxuICAgKiBDb250cm9sbGVyIFx1MjE5MiBVSU1hbmFnZXIuY29sb3JpemUoKSBcdUM1RDBcdUMxMUMgXHVDMEFDXHVDNkE5XHJcbiAgICovXHJcbiAgY29sb3JGb3Iobm90ZTogc3RyaW5nLCBkYXk6IG51bWJlciwgcGFjazogR2FudHREYXRhUGFjayk6IHN0cmluZyB8IG51bGwge1xyXG4gICAgY29uc3QgeyBwYWdlcywgeWVhciwgbW9udGgsIHN0YXJ0RmllbGQsIGVuZEZpZWxkIH0gPSBwYWNrO1xyXG4gICAgY29uc3QgcGcgPSBwYWdlcy5maW5kKHAgPT4gKHAudGl0bGUgfHwgcC5maWxlPy5uYW1lIHx8IFwiVW50aXRsZWRcIikgPT09IG5vdGUpO1xyXG4gICAgaWYgKCFwZykgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgY29uc3Qgc0RhdGUgPSB0aGlzLmR2LmRhdGUocGdbc3RhcnRGaWVsZF0pPy50b0pTRGF0ZSgpO1xyXG4gICAgY29uc3QgZURhdGUgPSB0aGlzLmR2LmRhdGUocGdbZW5kRmllbGRdKT8udG9KU0RhdGUoKTtcclxuICAgIGlmICghc0RhdGUgfHwgIWVEYXRlKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAvKiBcdUQ2MDRcdUM3QUMgXHVDMTQwXHVDNUQwIFx1QjMwMFx1Qzc1MVx1RDU1OFx1QjI5NCBcdUIwQTBcdUM5REMgKi9cclxuICAgIGNvbnN0IGN1ciA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXkpO1xyXG4gICAgaWYgKGN1ciA+PSBzRGF0ZSAmJiBjdXIgPD0gZURhdGUpXHJcbiAgICAgIHJldHVybiB0aGlzLmdQYWxldHRlLmNvbG9yT2Yobm90ZSk7XHJcblxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIFx1RDgzRFx1REQwRCAgXHVDQzM4XHVBQ0UwXHJcbiAgICAgIFx1MjAyMiBnYXRoZXItZmlsdGVyLXBhbGV0dGUgXHVCODVDXHVDOUMxXHVDNzQwIGxlZ2FjeSBHYW50dFRhYmxlLnRzIFx1Qzc1OFxyXG4gICAgICAgIEMoXHVEMzE0XHVCODA4XHVEMkI4KSArIEQoXHVCMzcwXHVDNzc0XHVEMTMwIFx1QzIxOFx1QzlEMSkgXHVBRDZDXHVDNUVEXHVDNzQ0IFx1QURGOFx1QjMwMFx1Qjg1QyBcdUJEODRcdUI5QUMtXHVEM0VDXHVEMzA1XHVENTg4XHVDMkI1XHVCMkM4XHVCMkU0LiA6Y29udGVudFJlZmVyZW5jZVtvYWljaXRlOjBde2luZGV4PTB9XHJcbiAgICAgIFx1MjAyMiBjb2xvckZvcigpIFx1RDMxMFx1QjJFOCBcdUI4NUNcdUM5QzFcdUM3NDAgRihcdUMxNDAgXHVDMEM5XHVDRTYwKSBcdUFENkNcdUM1RURcdUM3NDQgTW9kZWwgXHVDNkE5XHVCM0M0XHVCODVDXHJcbiAgICAgICAgXHVDN0FDXHVBRDZDXHVDMTMxXHVENTVDIFx1QUM4M1x1Qzc4NVx1QjJDOFx1QjJFNC4gOmNvbnRlbnRSZWZlcmVuY2Vbb2FpY2l0ZToxXXtpbmRleD0xfTpjb250ZW50UmVmZXJlbmNlW29haWNpdGU6Ml17aW5kZXg9Mn1cclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuIiwgIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBzcmMvdWkvZ2FudHQvR2FudHRVSU1hbmFnZXIudHMgXHUyMDEzIG1pbmltYWwgcG9ydCBmb3IgdjMuMC4wXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBHYW50dFVJTWFuYWdlciB7XHJcbiAgLyoqIGJ1aWxkIHdyYXBwZXIsIGluamVjdCB0YWJsZSArIGxlZ2VuZCwgcmV0dXJuIGNvbnRhaW5lciAqL1xyXG4gIGJ1aWxkR2FudHQoXHJcbiAgICBob3N0OiBIVE1MRWxlbWVudCxcclxuICAgIGhlYWRlclRleHQ6IHN0cmluZyxcclxuICAgIHRhYmxlSFRNTDogc3RyaW5nLFxyXG4gICAgbGVnZW5kOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxyXG4gICAgc2hvd0xlZ2VuZCA9IHRydWUsXHJcbiAgICBzaG93RGl2aWRlciA9IGZhbHNlLFxyXG4gICk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHdyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgd3JhcC5jbGFzc05hbWUgPSBcImdhbnR0LXZpZXdcIjtcclxuXHJcbiAgICAvKiBoZWFkZXIgKi9cclxuICAgIGNvbnN0IGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgaC5jbGFzc05hbWUgPSBcImdhbnR0LW1vbnRoLXllYXJcIjtcclxuICAgIGgudGV4dENvbnRlbnQgPSBoZWFkZXJUZXh0O1xyXG4gICAgd3JhcC5hcHBlbmRDaGlsZChoKTtcclxuXHJcbiAgICAvKiB0YWJsZSAqL1xyXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBcImdhbnR0LWNvbnRhaW5lclwiO1xyXG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9IHRhYmxlSFRNTDtcclxuICAgIHdyYXAuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcclxuXHJcbiAgICAvKiBsZWdlbmQgKi9cclxuICAgIGlmIChzaG93TGVnZW5kKSB7XHJcbiAgICAgIGNvbnN0IGxnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgbGcuY2xhc3NOYW1lID0gXCJnYW50dC1sZWdlbmRcIjtcclxuICAgICAgT2JqZWN0LmVudHJpZXMobGVnZW5kKS5mb3JFYWNoKChbbm90ZSwgY29sb3JdKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgaXRlbS5jbGFzc05hbWUgPSBcImdhbnR0LWxlZ2VuZC1pdGVtXCI7XHJcblxyXG4gICAgICAgIGNvbnN0IHN3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgc3cuY2xhc3NOYW1lID0gXCJnYW50dC1sZWdlbmQtY29sb3JcIjtcclxuICAgICAgICBzdy5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3I7XHJcbiAgICAgICAgaXRlbS5hcHBlbmRDaGlsZChzdyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGxibCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgIGxibC50ZXh0Q29udGVudCA9IG5vdGU7XHJcbiAgICAgICAgaXRlbS5hcHBlbmRDaGlsZChsYmwpO1xyXG5cclxuICAgICAgICBsZy5hcHBlbmRDaGlsZChpdGVtKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHdyYXAuYXBwZW5kQ2hpbGQobGcpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgaG9zdC5hcHBlbmRDaGlsZCh3cmFwKTtcclxuICAgIHJldHVybiB3cmFwO1xyXG4gIH1cclxuXHJcbi8qKiBjZWxsIHBhaW50ZXIgXHUyMDEzIGNvbnRyb2xsZXIgc3VwcGxpZXMgY2FsbGJhY2sgKi9cclxuY29sb3JpemUoXHJcbiAgZm46ICAgICAobm90ZTogc3RyaW5nLCBkYXk6IG51bWJlcikgPT4gc3RyaW5nIHwgbnVsbCxcclxuICBpc0VkZ2U6IChub3RlOiBzdHJpbmcsIGRheTogbnVtYmVyKSA9PiBcInN0YXJ0XCIgfCBcImVuZFwiIHwgbnVsbFxyXG4pIHtcclxuICBkb2N1bWVudFxyXG4gICAgLnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTFRhYmxlQ2VsbEVsZW1lbnQ+KFwiLmdhbnR0LXRhYmxlIHRkW2RhdGEtbm90ZV1cIilcclxuICAgIC5mb3JFYWNoKHRkID0+IHtcclxuICAgICAgY29uc3Qgbm90ZSA9IHRkLmRhdGFzZXQubm90ZSE7XHJcbiAgICAgIGNvbnN0IGRheSAgPSBOdW1iZXIodGQuZGF0YXNldC5kYXkpO1xyXG5cclxuICAgICAgLyogXHUyNTAwXHUyNTAwIDEpIFx1QkMzMFx1QUNCRFx1QzBDOSBcdUM5QzBcdUM4MTUgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwICovXHJcbiAgICAgIGNvbnN0IGNvbCA9IGZuKG5vdGUsIGRheSk7XHJcbiAgICAgIGlmIChjb2wpIHtcclxuICAgICAgICAvKiBcdTI0NjAgQ1NTIFx1QkNDMFx1QzIxOCBcdUM4RkNcdUM3ODUgXHUyNDYxIGlzLWZpbGxlZCBcdUQwNzRcdUI3OThcdUMyQTQgXHVCRDgwXHVDNUVDICovXHJcbiAgICAgICAgdGQuc3R5bGUuc2V0UHJvcGVydHkoXCItLWdhbnR0LWNvbG9yXCIsIGNvbCk7XHJcbiAgICAgICAgdGQuY2xhc3NMaXN0LmFkZChcImlzLWZpbGxlZFwiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvKiBcdUMwQzlcdUM3NzQgXHVDNUM2XHVDNzQ0IFx1QjU0Q1x1QjI5NCBcdUQyMkNcdUJBODUgXHUyMTkyIGlzLWZpbGxlZCBcdUM4MUNcdUFDNzAgKi9cclxuICAgICAgICB0ZC5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtZmlsbGVkXCIpO1xyXG4gICAgICAgIHRkLnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiLS1nYW50dC1jb2xvclwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLyogXHUyNTAwXHUyNTAwIDIpIFx1QzJEQ1x1Qzc5MS9cdUIwNUQgXHVEM0VDXHVDNzc4XHVEMkI4IFx1RDQ1Q1x1QzJEQyBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgKi9cclxuICAgICAgY29uc3QgZWRnZSA9IGlzRWRnZShub3RlLCBkYXkpO1xyXG4gICAgICBpZiAoZWRnZSkgdGQuY2xhc3NMaXN0LmFkZChgZ2FudHQtJHtlZGdlfWApO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG5cclxuICAvKiogaGlnaGxpZ2h0IHRvZGF5IGNvbHVtbiAqL1xyXG4gIGhpZ2hsaWdodFRvZGF5KCkge1xyXG4gICAgY29uc3QgZCA9IG5ldyBEYXRlKCkuZ2V0RGF0ZSgpO1xyXG4gICAgZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTFRhYmxlQ2VsbEVsZW1lbnQ+KGAuZ2FudHQtdGFibGUgdGRbZGF0YS1kYXk9JyR7ZH0nXWApXHJcbiAgICAgIC5mb3JFYWNoKCh0ZCkgPT4gdGQuY2xhc3NMaXN0LmFkZChcImlzLXRvZGF5XCIpKTtcclxuICB9XHJcbn1cclxuIiwgIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBzcmMvZmVhdHVyZXMvZ2FudHQvR2FudHRDb250cm9sbGVyLnRzIFx1MjAxMyBhdXRvLWdlbmVyYXRlZCBmcm9tXHJcbiAqIGxlZ2FjeSBDb3Zlci1UYWJsZSB2MjAyNS0wNVxyXG4gKiAgIFx1MjAyMiBcdUM4MDRcdUNDQjQgXHVDNzc0XHVBRDAwIFx1Q0Y1NFx1QjREQyBcdTIwMTMgXHVDMjE4XHVDODE1IFx1QUUwOFx1QzlDMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQge1xyXG4gIEFwcCxcclxuICBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxyXG4gIFRGaWxlXHJcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IEV2ZW50QnVzIH0gZnJvbSBcIi4uLy4uL2NvcmUvZXZlbnRzL0V2ZW50QnVzXCI7XHJcbmltcG9ydCB7IEdhbnR0TW9kZWwsIEdhbnR0U2V0dGluZ3MsIEdhbnR0RGF0YVBhY2sgfSBmcm9tIFwiLi9HYW50dE1vZGVsXCI7XHJcbmltcG9ydCB7IEdhbnR0VUlNYW5hZ2VyIH0gZnJvbSBcIi4uLy4uL3VpL2dhbnR0L0dhbnR0VUlNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IExvZyB9IGZyb20gXCIuLi9pbnRlcmFjdGl2ZS10YWJsZS91dGlscy9sb2dcIjtcclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgXHVEODNEXHVEQ0UxICBHYW50dENvbnRyb2xsZXJcclxuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgXHUwMEI3IE1vZGVsLVZpZXcgXHVDOTExXHVDN0FDIFx1QUNDNFx1Q0UzNVxyXG4gICAgXHUyNDYwIEdhbnR0TW9kZWwgXHVCODVDIFx1QjM3MFx1Qzc3NFx1RDEzMCBcdUFDQzRcdUMwQjBcclxuICAgIFx1MjQ2MSBHYW50dFVJTWFuYWdlciBcdUI4NUMgRE9NIFx1QUQ2Q1x1Q0Q5NVxyXG4gICAgXHUyNDYyIFx1QzE0MCBcdUMwQzlcdUMwQzEgXHUwMEI3IFx1QzYyNFx1QjI5OCBcdUFDMTVcdUM4NzAgXHUwMEI3IEludGVyYWN0aXZlVGFibGUgXHVDNUYwXHVCM0Q5XHJcblx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbmV4cG9ydCBjbGFzcyBHYW50dENvbnRyb2xsZXIge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgdWkgPSBuZXcgR2FudHRVSU1hbmFnZXIoKTtcclxuICBwcml2YXRlIF9yZW5kZXJpbmcgPSBmYWxzZTtcclxuICBwcml2YXRlIHJlYWRvbmx5IGJ1c0NiOiAoZmlsZT86IFRGaWxlKSA9PiB2b2lkO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGFwcDogQXBwKSB7XHJcbiAgICB0aGlzLmJ1c0NiID0gdGhpcy5yZWZyZXNoQnlCdXMuYmluZCh0aGlzKTtcclxuICAgIEV2ZW50QnVzLmkub24odGhpcy5idXNDYik7XHJcbiAgICAodGhpcyBhcyBhbnkpLl9fY292ZXJfdW5sb2FkX18gPSAoKSA9PiBFdmVudEJ1cy5pLm9mZih0aGlzLmJ1c0NiKTtcclxuICB9XHJcblxyXG4gIC8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAqICByZW5kZXJWaWV3KClcclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKiAgQHBhcmFtIGR2ICAgICAgICBEYXRhdmlldyBBUElcclxuICAgKiAgQHBhcmFtIHNldHRpbmdzICBcdUNGNTRcdUI0RENcdUQzOUNcdUMyQTQgXHVDNjM1XHVDMTU4IChHYW50dFNldHRpbmdzKVxyXG4gICAqICBAcGFyYW0gY3R4ICAgICAgIE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHRcclxuICAgKiAgQHBhcmFtIGhvc3RQcmUgICBgYGBkYXRhdmlld2pzYGBgIDxwcmU+IFx1QzVEOFx1QjlBQ1x1QkEzQ1x1RDJCOFxyXG4gICAqPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG4gIHB1YmxpYyBhc3luYyByZW5kZXJWaWV3KFxyXG4gICAgZHYgICAgICAgOiBhbnksXHJcbiAgICBzZXR0aW5ncyA6IEdhbnR0U2V0dGluZ3MgPSB7fSxcclxuICAgIGN0eD8gICAgIDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCxcclxuICAgIGhvc3RQcmU/IDogSFRNTEVsZW1lbnQsXHJcbiAgKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBpZiAodGhpcy5fcmVuZGVyaW5nKSByZXR1cm47XHJcbiAgICB0aGlzLl9yZW5kZXJpbmcgPSB0cnVlO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIC8qIDApIFx1QzYzNVx1QzE1OCBcdUFFMzBcdUJDRjhcdUFDMTIgXHVENjU1XHVDODE1IFx1MjAxMyBsZWdhY3kgXHVBRERDXHVDRTU5XHVBQ0ZDIFx1QjNEOVx1Qzc3QyAqLyAgICAgICAgICAgICAgIC8qIDpjb250ZW50UmVmZXJlbmNlW29haWNpdGU6MF17aW5kZXg9MH06Y29udGVudFJlZmVyZW5jZVtvYWljaXRlOjFde2luZGV4PTF9ICovXHJcbiAgICAgIHNldHRpbmdzLnJlbmRlckludGVyYWN0aXZlQmVsb3cgPz89IHRydWU7XHJcbiAgICAgIHNldHRpbmdzLnNob3dMZWdlbmQgICAgICAgICAgICAgPz89IHRydWU7XHJcbiAgICAgIHNldHRpbmdzLmZvcmNlSW50ZXJhY3RpdmVCZWxvdyAgPz89IGZhbHNlO1xyXG4gICAgICBpZiAoc2V0dGluZ3MuZm9yY2VJbnRlcmFjdGl2ZUJlbG93KSBzZXR0aW5ncy5yZW5kZXJJbnRlcmFjdGl2ZUJlbG93ID0gdHJ1ZTtcclxuXHJcblxyXG4gICAgICAvKiBcdTI3MjggbGVnYWN5IFwiZW50cmllcyBvbiBwYWdlXCIgYXQgcm9vdCBsZXZlbCAqL1xyXG4gICAgICBjb25zdCBsZWdhY3kgPVxyXG4gICAgICAgIChzZXR0aW5ncyBhcyBhbnkpW1wiZW50cmllcyBvbiBwYWdlXCJdID8/XHJcbiAgICAgICAgKHNldHRpbmdzIGFzIGFueSkuZW50cmllc19vbl9wYWdlID8/XHJcbiAgICAgICAgKHNldHRpbmdzIGFzIGFueSkuZW50cmllc09uUGFnZTtcclxuICAgICAgaWYgKGxlZ2FjeSAhPSBudWxsKSB7XHJcbiAgICAgICAgc2V0dGluZ3MuaW50ZXJhY3RpdmVPcHRpb25zID8/PSB7fTtcclxuICAgICAgICBpZiAoKHNldHRpbmdzLmludGVyYWN0aXZlT3B0aW9ucyBhcyBhbnkpLnBlclBhZ2UgPT0gbnVsbClcclxuICAgICAgICAgIChzZXR0aW5ncy5pbnRlcmFjdGl2ZU9wdGlvbnMgYXMgYW55KS5wZXJQYWdlID0gTnVtYmVyKGxlZ2FjeSkgfHwgMDtcclxuICAgICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAvKiAxKSBjdXJyZW50IHBhZ2UgXHVENjU1XHVCQ0Y0KGNhbnZhcyBcdUM5QzBcdUM2RDApICovICAgICAgICAgICAgICAgICAgICAgIC8qIDpjb250ZW50UmVmZXJlbmNlW29haWNpdGU6Ml17aW5kZXg9Mn06Y29udGVudFJlZmVyZW5jZVtvYWljaXRlOjNde2luZGV4PTN9ICovXHJcbiAgICAgIGxldCBjdXIgPSBkdi5jdXJyZW50Py4oKTtcclxuICAgICAgaWYgKCghY3VyIHx8ICFjdXIuZmlsZSkgJiYgY3R4Py5zb3VyY2VQYXRoKSBjdXIgPSBkdi5wYWdlKGN0eC5zb3VyY2VQYXRoKTtcclxuICAgICAgaWYgKCFjdXI/LmZpbGUpIHtcclxuICAgICAgICBMb2cudyhcIltHYW50dF0gY3VycmVudCBwYWdlIG5vdCBmb3VuZCBcdTIwMTMgYWJvcnRcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBEYXRhdmlld0pTIFx1QzVEMFx1QzExQyBjYW52YXMgXHVDOUMwXHVDNkQwXHVDNzQ0IFx1QzcwNFx1RDU3NCBkdi5jdXJyZW50IFx1Qzc4NFx1QzJEQyBcdUQzMjhcdUNFNTggKi8gIC8qIDpjb250ZW50UmVmZXJlbmNlW29haWNpdGU6NF17aW5kZXg9NH06Y29udGVudFJlZmVyZW5jZVtvYWljaXRlOjVde2luZGV4PTV9ICovXHJcbiAgICAgIGNvbnN0IG9yaWdDdXJyZW50ID0gZHYuY3VycmVudDtcclxuICAgICAgKGR2IGFzIGFueSkuY3VycmVudCA9ICgpID0+IGN1cjtcclxuXHJcbiAgICAgIC8qIDIpIE1vZGVsIFx1QUNDNFx1QzBCMCAqL1xyXG4gICAgICBjb25zdCBtb2RlbCA9IG5ldyBHYW50dE1vZGVsKHRoaXMuYXBwLCBkdiwgc2V0dGluZ3MsIGN0eCk7XHJcbiAgICAgIGNvbnN0IHBhY2sgID0gbW9kZWwuY29tcHV0ZSgpO1xyXG5cclxuICAgICAgLyogMykgVUkgXHVDRUU4XHVEMTRDXHVDNzc0XHVCMTA4IFx1QUNCMFx1QzgxNSAqL1xyXG4gICAgICBsZXQgaG9zdDogSFRNTEVsZW1lbnQ7XHJcbiAgICAgIGlmIChob3N0UHJlKSB7XHJcbiAgICAgICAgLyogXHVDRjU0XHVCNERDXHVEMzlDXHVDMkE0XHVDNzdDIFx1QjU0QyBcdTIwMTMgPHByZT4gXHVCQzE0XHVCODVDIFx1QzcwNFx1QzVEMCBcdUMwQkRcdUM3ODUgKi9cclxuICAgICAgICBob3N0UHJlLmVtcHR5KCk7XHJcbiAgICAgICAgaG9zdFByZS5jbGFzc0xpc3QuYWRkKFwiY3QtaXQtY29udGFpbmVyXCIpO1xyXG4gICAgICAgIGhvc3QgPSBob3N0UHJlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8qIERhdGF2aWV3IFx1QkUxNFx1Qjg1RFx1Qzc3QyBcdUI1NEMgXHUyMDEzIGR2LmNvbnRhaW5lciBcdUMwQUNcdUM2QTkgKi9cclxuICAgICAgICBob3N0ID0gZHYuY29udGFpbmVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiA0KSBcdUM2RDRcdTAwQjdcdUM1RjAgXHVENUU0XHVCMzU0IFx1RDE0RFx1QzJBNFx1RDJCOCAqL1xyXG4gICAgICBjb25zdCBtb250aE5hbWUgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChcImVuXCIsIHtcclxuICAgICAgICBtb250aDogXCJsb25nXCIsXHJcbiAgICAgIH0pLmZvcm1hdChuZXcgRGF0ZShwYWNrLnllYXIsIHBhY2subW9udGgsIDEpKTtcclxuICAgICAgY29uc3QgaGVhZGVyVGV4dCA9IGAke21vbnRoTmFtZX0gJHtwYWNrLnllYXJ9YDtcclxuXHJcbiAgICAgIC8qIDUpIEdhbnR0IFVJIFx1QkU0Q1x1QjREQyAqL1xyXG4gICAgICBjb25zdCB3cmFwID0gdGhpcy51aS5idWlsZEdhbnR0KFxyXG4gICAgICAgIGhvc3QsXHJcbiAgICAgICAgaGVhZGVyVGV4dCxcclxuICAgICAgICB0aGlzLmJ1aWxkVGFibGVIVE1MKHBhY2spLFxyXG4gICAgICAgIHBhY2subGVnZW5kLFxyXG4gICAgICAgIChzZXR0aW5ncy5zaG93TGVnZW5kID8/IHRydWUpLFxyXG4gICAgICAgIHNldHRpbmdzLnJlbmRlckludGVyYWN0aXZlQmVsb3cgLyogZGl2aWRlciBcdUQ0NUNcdUMyREMgXHVDNUVDXHVCRDgwICovXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvKlxyXG4gICAgICAgKiBcdUQ2MDRcdUM3QUMgXHVDNjM1XHVDMTU4XHVDNzQ0IERPTSBcdUIxNzhcdUI0RENcdUM1RDAgXHVDODAwXHVDN0E1XHVENTU4XHVDNUVDIHJlZnJlc2ggXHVDMkRDIFx1QURGOFx1QjMwMFx1Qjg1QyBcdUMwQUNcdUM2QTlcdUQ1NUNcdUIyRTQuXHJcbiAgICAgICAqIEpTT04gXHVBRTRBXHVDNzQwIFx1QkNGNVx1QzBBQ1x1Qjg1QyBcdUM2RDBcdUJDRjggXHVCQ0MwXHVENjE1XHVDNzQ0IFx1QkMyOVx1QzlDMFx1RDU1Q1x1QjJFNC5cclxuICAgICAgICovXHJcbiAgICAgICh3cmFwIGFzIGFueSkuX19zZXR0aW5ncyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc2V0dGluZ3MpKTtcclxuXHJcbiAgICAgIC8qIDYpIFx1QzE0MCBcdUMwQzlcdUNFNjAgJiBcdUM2MjRcdUIyOTggXHVBQzE1XHVDODcwICovXHJcbiAgICAgIHRoaXMudWkuY29sb3JpemUoXHJcbiAgICAgICAgKHRpdGxlLCBkKSA9PiBtb2RlbC5jb2xvckZvcih0aXRsZSwgZCwgcGFjayksXHJcbiAgICAgICAgKHRpdGxlLCBkKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB7IHN0YXJ0RmllbGQsIGVuZEZpZWxkLCBwYWdlcywgeWVhciwgbW9udGggfSA9IHBhY2s7XHJcbiAgICAgICAgICBjb25zdCBwZyA9IHBhZ2VzLmZpbmQocCA9PiAocC50aXRsZSB8fCBwLmZpbGU/Lm5hbWUpID09PSB0aXRsZSk7XHJcbiAgICAgICAgICBpZiAoIXBnKSByZXR1cm4gbnVsbDtcclxuXHJcbmNvbnN0IHNEdCA9IGR2LmRhdGUocGdbc3RhcnRGaWVsZF0pO1xyXG5jb25zdCBlRHQgPSBkdi5kYXRlKHBnW2VuZEZpZWxkXSk7XHJcblxyXG4vLyBEYXRlVGltZSBcdTIxOTIgZGF5IFx1Q0Q5NFx1Q0Q5QyAoXHVENTc0XHVCMkY5IFx1QzZENFx1MDBCN1x1QzVGMFx1QjNDNFx1QjNDNCBcdUQ1NjhcdUFFRDggXHVCRTQ0XHVBRDUwKVxyXG5pZiAoc0R0ICYmIHNEdC55ZWFyID09PSB5ZWFyICYmIHNEdC5tb250aCAtIDEgPT09IG1vbnRoICYmIHNEdC5kYXkgPT09IGQpXHJcbiAgcmV0dXJuIFwic3RhcnRcIjtcclxuaWYgKGVEdCAmJiBlRHQueWVhciA9PT0geWVhciAmJiBlRHQubW9udGggLSAxID09PSBtb250aCAmJiBlRHQuZGF5ID09PSBkKVxyXG4gIHJldHVybiBcImVuZFwiO1xyXG5yZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLnVpLmhpZ2hsaWdodFRvZGF5KCk7XHJcblxyXG4gICAgICAvKiA3KSBJbnRlcmFjdGl2ZVRhYmxlIFx1QzVGMFx1QjNEOSAqL1xyXG4gICAgICBpZiAoc2V0dGluZ3MucmVuZGVySW50ZXJhY3RpdmVCZWxvdykge1xyXG4gICAgICAgIGNvbnN0IGVuZ2luZSA9ICh3aW5kb3cgYXMgYW55KS5jb3ZlclRhYmxlPy5lbmdpbmU7XHJcbiAgICAgICAgaWYgKGVuZ2luZSkge1xyXG4gICAgICAgICAgLy8gYXdhaXQgZW5naW5lLnJlbmRlckF1dG9WaWV3KFxyXG4gICAgICAgICAgLy8gICBkdixcclxuICAgICAgICAgIC8vICAgc2V0dGluZ3MuaW50ZXJhY3RpdmVPcHRpb25zID8/IHt9LFxyXG4gICAgICAgICAgLy8gICBjdHgsXHJcbiAgICAgICAgICAvLyAgIHdyYXAgLyogaG9zdFByZSBcdUIzMDBcdUMyRTAgd3JhcCBcdUM1NDRcdUI3OThcdUM1RDAgXHVCODBDXHVCMzU0ICovXHJcbiAgICAgICAgICAvLyApO1xyXG4gICAgICAgICAgY29uc3QgaXRNb3VudCA9IHdyYXAuY3JlYXRlRGl2KHsgY2xzOiBcImN0LWl0LW1vdW50XCIgfSk7IC8qIFx1RDgzRFx1RENBMSBcdUM4MDRcdUM2QTkgXHVDRUU4XHVEMTRDXHVDNzc0XHVCMTA4ICovXHJcbiAgICAgICAgICBjb25zdCBvcHRzID0gc2V0dGluZ3MuaW50ZXJhY3RpdmVPcHRpb25zID8/IHt9O1xyXG4gICAgICAgICAgaWYgKHNldHRpbmdzLnByb3BzICYmIG9wdHMucHJvcHMgPT0gbnVsbClcclxuICAgICAgICAgICAgKG9wdHMgYXMgYW55KS5wcm9wcyA9IHNldHRpbmdzLnByb3BzO1xyXG5cclxuICAgICAgICAgIGlmIChvcHRzLnBlclBhZ2UgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBsZWdhY3lQZXIgPVxyXG4gICAgICAgICAgICAgIChvcHRzIGFzIGFueSlbXCJlbnRyaWVzIG9uIHBhZ2VcIl0gPz9cclxuICAgICAgICAgICAgICAob3B0cyBhcyBhbnkpLmVudHJpZXNfb25fcGFnZSA/P1xyXG4gICAgICAgICAgICAgIChvcHRzIGFzIGFueSkuZW50cmllc09uUGFnZTtcclxuICAgICAgICAgICAgaWYgKGxlZ2FjeVBlciAhPSBudWxsKSBvcHRzLnBlclBhZ2UgPSBOdW1iZXIobGVnYWN5UGVyKSB8fCAwO1xyXG4gICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICBpdE1vdW50LmRhdGFzZXQuY292ZXJTZXR0aW5ncyA9IEpTT04uc3RyaW5naWZ5KG9wdHMpO1xyXG4gICAgICAgICAgaWYgKGN0eClcclxuICAgICAgICAgICAgYXdhaXQgZW5naW5lLnJlbmRlckF1dG9WaWV3KFxyXG4gICAgICAgICAgICAgIGR2LFxyXG4gICAgICAgICAgICAgIG9wdHMsXHJcbiAgICAgICAgICAgICAgY3R4LFxyXG4gICAgICAgICAgICAgIGl0TW91bnRcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qIDgpIFx1QjUxNFx1QkM4NFx1QURGOCBcdTIwMTMgbGVnZW5kIEpTT04gXHVENTA0XHVCOUIwXHVEMkI4ICovXHJcbiAgICAgIGlmIChzZXR0aW5ncy5kZWJ1Z0xlZ2VuZCkge1xyXG4gICAgICAgIGNvbnN0IHByZSA9IHdyYXAuY3JlYXRlRWwoXCJwcmVcIiwgeyBjbHM6IFwiZ2FudHQtZGVidWdcIiB9KTtcclxuICAgICAgICBwcmUuaW5uZXJUZXh0ID0gSlNPTi5zdHJpbmdpZnkocGFjay5sZWdlbmQsIG51bGwsIDIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiByZXN0b3JlICovXHJcbiAgICAgIChkdiBhcyBhbnkpLmN1cnJlbnQgPSBvcmlnQ3VycmVudDtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcclxuICAgIFx1RDgzRFx1REQyNyAgXHVCMEI0XHVCRDgwIFx1RDVFQ1x1RDM3QyBcdTIwMTMgXHVEMTRDXHVDNzc0XHVCRTE0IEhUTUwgXHVDMEREXHVDMTMxXHJcbiAgICBcdTAwQjcgTW9kZWwgXHUyMTkwXHUyMTkyIFVJIFx1QUNCRFx1QUNDNFx1QzVEMCBcdUIwQThcdUFDQThcdUI0NTBcdUJBNzQgQ29udHJvbGxlciBcdUQxNENcdUMyQTRcdUQyQjhcdUFDMDAgXHVDMjZDXHVDNkNDXHVDOUQwXHJcbiAgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuICBwcml2YXRlIGJ1aWxkVGFibGVIVE1MKHBhY2s6IEdhbnR0RGF0YVBhY2spOiBzdHJpbmcge1xyXG4gICAgY29uc3QgeyBwYWdlcywgZGF5c0luTW9udGggfSA9IHBhY2s7XHJcblxyXG4gICAgLyogXHUyNTAwXHUyNTAwIHRoZWFkIFx1MjUwMFx1MjUwMCAqL1xyXG4gICAgY29uc3QgaGVhZENvbHMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBkYXlzSW5Nb250aCB9LCAoXywgaSkgPT5cclxuICAgICAgYDx0aCBjbGFzcz1cImdhbnR0LWRheS1jb2xcIj4ke1N0cmluZyhpICsgMSkucGFkU3RhcnQoMiwgXCIwXCIpfTwvdGg+YFxyXG4gICAgKS5qb2luKFwiXCIpO1xyXG4gICAgY29uc3QgdGhlYWQgPSBgPHRoZWFkPjx0cj48dGggY2xhc3M9XCJnYW50dC1jb3JuZXItY29sXCI+PC90aD4ke2hlYWRDb2xzfTwvdHI+PC90aGVhZD5gO1xyXG5cclxuICAgIC8qIFx1MjUwMFx1MjUwMCB0Ym9keSBcdTI1MDBcdTI1MDAgKi9cclxuICAgIGxldCB0Ym9keSA9IFwiPHRib2R5PlwiO1xyXG4gICAgcGFnZXMuZm9yRWFjaChwZyA9PiB7XHJcbiAgICAgIGNvbnN0IHRpdGxlID0gcGcudGl0bGUgfHwgcGcuZmlsZT8ubmFtZSB8fCBcIlVudGl0bGVkXCI7XHJcbiAgICAgIHRib2R5ICs9IGA8dHI+PHRkIGNsYXNzPVwiZ2FudHQtbm90ZS1jb2xcIj4ke3RpdGxlfTwvdGQ+YDtcclxuICAgICAgZm9yIChsZXQgZCA9IDE7IGQgPD0gZGF5c0luTW9udGg7IGQrKykge1xyXG4gICAgICAgIHRib2R5ICs9IGA8dGQgY2xhc3M9XCJnYW50dC1jZWxsXCIgZGF0YS1ub3RlPVwiJHt0aXRsZX1cIiBkYXRhLWRheT1cIiR7ZH1cIj48L3RkPmA7XHJcbiAgICAgIH1cclxuICAgICAgdGJvZHkgKz0gXCI8L3RyPlwiO1xyXG4gICAgfSk7XHJcbiAgICB0Ym9keSArPSBcIjwvdGJvZHk+XCI7XHJcblxyXG4gICAgcmV0dXJuIGA8dGFibGUgY2xhc3M9XCJnYW50dC10YWJsZVwiPiR7dGhlYWR9JHt0Ym9keX08L3RhYmxlPmA7XHJcbiAgfVxyXG5cclxucHJpdmF0ZSByZWZyZXNoQnlCdXMoZmlsZT86IFRGaWxlKSB7XHJcbiAgaWYgKHRoaXMuX3JlbmRlcmluZykgcmV0dXJuO1xyXG5cclxuXHJcbiAvLyBcdTI1MDBcdTI1MDAgQ2FudmFzIFx1RDMwQ1x1Qzc3Q1x1Qzc0MCBcdUQ1MDRcdUI4NjBcdUQyQjhcdUI5RTRcdUQxMzBcdTAwQjdcdUIwQTBcdUM5RENcdUQ1NDRcdUI0RENcdUFDMDAgXHVDNUM2XHVDNzNDXHVCQkMwXHVCODVDIEdhbnR0IFx1QzBDOFx1Qjg1Q1x1QUNFMFx1Q0U2OCBcdUIzMDBcdUMwQzFcdUM1RDBcdUMxMUMgXHVDODFDXHVDNjc4XHJcbiBpZiAoZmlsZT8uZXh0ZW5zaW9uID09PSBcImNhbnZhc1wiKSByZXR1cm47XHJcblxyXG5cclxuICBjb25zdCBkdiA9ICh0aGlzLmFwcCBhcyBhbnkpLnBsdWdpbnM/LnBsdWdpbnM/LmRhdGF2aWV3Py5hcGk7XHJcbiAgaWYgKCFkdikge1xyXG4gICAgTG9nLncoXCJbR2FudHRdIERhdGF2aWV3IEFQSSBub3QgYXZhaWxhYmxlLlwiKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG4gIGlmICghYWN0aXZlRmlsZSB8fCBhY3RpdmVGaWxlLmV4dGVuc2lvbiA9PT0gXCJjYW52YXNcIikgcmV0dXJuO1xyXG4gIGlmICghYWN0aXZlRmlsZSkge1xyXG4gICAgTG9nLncoXCJbR2FudHRdIE5vIGFjdGl2ZSBmaWxlIGZvdW5kLlwiKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIFx1QkNDMFx1QUNCRFx1QjQxQyBcdUQzMENcdUM3N0NcdUFDRkMgXHVENjVDXHVDMTMxIFx1RDMwQ1x1Qzc3Q1x1Qzc3NCBcdUIyRTRcdUI5NzRcdUJBNzQgXHVCQjM0XHVDMkRDXHJcbiAgaWYgKGZpbGUgJiYgZmlsZS5wYXRoICE9PSBhY3RpdmVGaWxlLnBhdGgpIHJldHVybjtcclxuXHJcblxyXG4gIGNvbnN0IGV4aXN0aW5nR2FudHRWaWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5nYW50dC12aWV3XCIpIGFzIEhUTUxFbGVtZW50IHwgbnVsbDtcclxuICBjb25zdCBwcmV2ID0gKGV4aXN0aW5nR2FudHRWaWV3IGFzIGFueSk/Ll9fc2V0dGluZ3MgYXMgR2FudHRTZXR0aW5ncyB8IHVuZGVmaW5lZDtcclxuICBjb25zdCBzZXR0aW5nczogR2FudHRTZXR0aW5ncyA9IHsgLi4ucHJldiB9O1xyXG4gIHNldHRpbmdzLnJlbmRlckludGVyYWN0aXZlQmVsb3cgPz89IHRydWU7XHJcbiAgc2V0dGluZ3Muc2hvd0xlZ2VuZCA/Pz0gdHJ1ZTtcclxuXHJcbiAgaWYgKCFleGlzdGluZ0dhbnR0Vmlldykge1xyXG4gICAgTG9nLncoXCJbR2FudHRdIEdhbnR0IGhvc3QgY29udGFpbmVyIG5vdCBmb3VuZC5cIik7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBjb25zdCBob3N0ID0gZXhpc3RpbmdHYW50dFZpZXcucGFyZW50RWxlbWVudDtcclxuICBpZiAoIWhvc3QpIHtcclxuICAgIExvZy53KFwiW0dhbnR0XSBHYW50dCBob3N0IHBhcmVudCBlbGVtZW50IG5vdCBmb3VuZC5cIik7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBleGlzdGluZ0dhbnR0Vmlldy5yZW1vdmUoKTsgLy8gXHVBRTMwXHVDODc0IERPTSBcdUM4MUNcdUFDNzAgKFx1QzkxMVx1QzY5NClcclxuXHJcbiAgLy8gXHVDODE1XHVDMEMxIFx1Q0Q5Q1x1QjgyNVx1Qzc0NCBcdUM3MDRcdUQ1NzRcdUMxMUMgXHVDRDVDXHVDMThDXHVENTVDXHVDNzU4IGN0eCBcdUM4MUNcdUFDRjUgKFx1RDBDMFx1Qzc4NSBcdUM2MjRcdUI5NTggXHVDNkIwXHVENjhDKVxyXG4gIGNvbnN0IGN0eCA9IHtcclxuICAgIHNvdXJjZVBhdGg6IGFjdGl2ZUZpbGUucGF0aCxcclxuICAgIGZyb250bWF0dGVyOiB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShhY3RpdmVGaWxlKT8uZnJvbnRtYXR0ZXIgPz8ge30sXHJcbiAgICBnZXRTZWN0aW9uSW5mbzogKCkgPT4gbnVsbCxcclxuICAgIGRvY0lkOiBcIlwiLCAgICAgICAgICAgICAgLy8gXHVENTQ0XHVDMjE4IFx1QzY5NFx1QzE4QyBcdUNEOTRcdUFDMDAgKFx1QkU0OCBcdUJCMzhcdUM3OTBcdUM1RjQgXHVDODFDXHVBQ0Y1XHVDNzNDXHVCODVDIFx1RDU3NFx1QUNCMClcclxuICAgIGFkZENoaWxkOiAoKSA9PiBudWxsICAgIC8vIFx1RDU0NFx1QzIxOCBcdUJBNTRcdUMxMUNcdUI0REMgXHVDRDk0XHVBQzAwXHJcbiAgfSBhcyB1bmtub3duIGFzIE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQ7ICAvLyBcdUQwQzBcdUM3ODUgXHVCQjM4XHVDODFDIFx1QzU0OFx1QzgwNFx1RDU1OFx1QUM4QyBcdUM2QjBcdUQ2OENcclxuXHJcbiAgdGhpcy5yZW5kZXJWaWV3KGR2LCBzZXR0aW5ncywgY3R4LCBob3N0KTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG59XHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIFx1RDgzQ1x1REY5MyAgXHVDOEZDXHVDMTFEXHJcbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIFx1MDBCNyBidWlsZFRhYmxlSFRNTCBcdTAwQjcgXHVDMEM5XHVDRTYwIFx1Qjg1Q1x1QzlDMSBcdUI0RjFcdUM3NDAgbGVnYWN5IEdhbnR0VGFibGUudHMgXHVDNzU4XHJcbiAgICBFKEhUTUwgXHVCRTRDXHVCNERDKSBcdTIwMTMgRihcdUQzOThcdUM3NzhcdUQzMDUpIFx1QUQ2Q1x1QzVFRFx1Qzc0NCBcdUM3QUNcdUFENkNcdUMxMzFcdUQ1NThcdUM1RUMgQ29udHJvbGxlciBcdUNDNDVcdUM3ODRcdUM1RDBcclxuICAgIFx1QjlERVx1QUM4QyBcdUM2MkVcdUFDQThcdUM2MjggXHVBQzgzXHVDNzg1XHVCMkM4XHVCMkU0LlxyXG46Y29udGVudFJlZmVyZW5jZVtvYWljaXRlOjZde2luZGV4PTZ9XHJcblx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXHJcbiIsICIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogc3JjL3RoZW1lL0xpc3RDYWxsb3V0TWFuYWdlci50cyBcdTIwMTMgcmVmYWN0b3JlZCBzYWZlIHZlcnNpb24gdjMuMC4wXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCB7IFBsdWdpbiwgTWFya2Rvd25Qb3N0UHJvY2Vzc29yIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7XHJcbiAgRWRpdG9yVmlldyxcclxuICBEZWNvcmF0aW9uLFxyXG4gIERlY29yYXRpb25TZXQsXHJcbiAgVmlld1BsdWdpbixcclxuICBWaWV3VXBkYXRlLFxyXG59IGZyb20gXCJAY29kZW1pcnJvci92aWV3XCI7XHJcbmltcG9ydCB7IFJhbmdlU2V0QnVpbGRlciB9IGZyb20gXCJAY29kZW1pcnJvci9zdGF0ZVwiO1xyXG5pbXBvcnQgdHlwZSBDb3ZlclRhYmxlUGx1Z2luIGZyb20gXCIuLi9jb3JlL1BsdWdpblwiO1xyXG5pbXBvcnQgdHlwZSB7IExpc3RDYWxsb3V0IH0gZnJvbSBcIi4uL3NldHRpbmdcIjtcclxuXHJcbnR5cGUgQ2FsbG91dE1hcCA9IFJlY29yZDxzdHJpbmcsIExpc3RDYWxsb3V0PjtcclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgQ002IFZpZXdQbHVnaW4gXHUyMDEzIHJvd1x1MjAxMWRlY29yYXRpb24gd2l0aCBzYWZldHkgZ3VhcmRcclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuZnVuY3Rpb24gY3JlYXRlUGx1Z2luKG1hcDogQ2FsbG91dE1hcCkge1xyXG4gIC8qIHByZWJ1aWxkIHJlZ2V4ICovXHJcbiAgY29uc3QgY2hhcnMgPSBPYmplY3Qua2V5cyhtYXApLmpvaW4oXCJcIik7XHJcbiAgaWYgKCFjaGFycykgcmV0dXJuIFtdIGFzIGFueTtcclxuICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYF5cXFxccyooPzpbLSorXXxcXFxcZCtbLildKVxcXFxzKyhbJHtjaGFyc31dKVxcXFxzK2ApO1xyXG5cclxuICBjb25zdCBkZWNvRm9yID0gKHZpZXc6IEVkaXRvclZpZXcpOiBEZWNvcmF0aW9uU2V0ID0+IHtcclxuICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgUmFuZ2VTZXRCdWlsZGVyPERlY29yYXRpb24+KCk7XHJcbiAgICBjb25zdCBkb2NFbmQgPSB2aWV3LnN0YXRlLmRvYy5sZW5ndGg7XHJcblxyXG4gICAgZm9yIChjb25zdCB7IGZyb20sIHRvIH0gb2Ygdmlldy52aXNpYmxlUmFuZ2VzKSB7XHJcbiAgICAgIGxldCBwb3MgPSBmcm9tO1xyXG4gICAgICB3aGlsZSAocG9zIDw9IHRvICYmIHBvcyA8IGRvY0VuZCkge1xyXG4gICAgICAgIGNvbnN0IGxpbmUgPSB2aWV3LnN0YXRlLmRvYy5saW5lQXQocG9zKTtcclxuICAgICAgICBjb25zdCBtID0gcmUuZXhlYyhsaW5lLnRleHQpO1xyXG4gICAgICAgIGlmIChtKSB7XHJcbiAgICAgICAgICBjb25zdCBjaCA9IG1bMV07XHJcbiAgICAgICAgICBidWlsZGVyLmFkZChcclxuICAgICAgICAgICAgbGluZS5mcm9tLFxyXG4gICAgICAgICAgICBsaW5lLmZyb20sXHJcbiAgICAgICAgICAgIERlY29yYXRpb24ubGluZSh7IGF0dHJpYnV0ZXM6IHsgY2xhc3M6IFwibGMtY202LXJvd1wiLCBcImRhdGEtY2FsbG91dC1jaGFyXCI6IGNoIH0gfSksXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiBuZXh0IGxpbmUgXHUyMDEzIGF2b2lkIGluZmluaXRlIGxvb3AgKi9cclxuICAgICAgICBpZiAobGluZS50byA8PSBwb3MpIGJyZWFrO1xyXG4gICAgICAgIHBvcyA9IGxpbmUudG8gKyAxO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYnVpbGRlci5maW5pc2goKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gVmlld1BsdWdpbi5mcm9tQ2xhc3MoXHJcbiAgICBjbGFzcyB7XHJcbiAgICAgIGRlY29yYXRpb25zOiBEZWNvcmF0aW9uU2V0O1xyXG4gICAgICBjb25zdHJ1Y3Rvcih2aWV3OiBFZGl0b3JWaWV3KSB7IHRoaXMuZGVjb3JhdGlvbnMgPSBkZWNvRm9yKHZpZXcpOyB9XHJcbiAgICAgIHVwZGF0ZSh1OiBWaWV3VXBkYXRlKSB7XHJcbiAgICAgICAgaWYgKHUuZG9jQ2hhbmdlZCB8fCB1LnZpZXdwb3J0Q2hhbmdlZCkgdGhpcy5kZWNvcmF0aW9ucyA9IGRlY29Gb3IodS52aWV3KTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHsgZGVjb3JhdGlvbnM6IHYgPT4gKHYgYXMgYW55KS5kZWNvcmF0aW9ucyB9LFxyXG4gICk7XHJcbn1cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgTWFuYWdlciBjbGFzc1xyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5leHBvcnQgY2xhc3MgTGlzdENhbGxvdXRNYW5hZ2VyIHtcclxuICBwcml2YXRlIHN0eWxlRWw6IEhUTUxTdHlsZUVsZW1lbnQgfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIGNtRXh0OiBhbnlbXSA9IFtdO1xyXG4gIHByaXZhdGUgY21EaXNwb3NlOiAoKCkgPT4gdm9pZCkgfCBudWxsID0gbnVsbDsgICAvLyBcdTIxOTAgRGlzcG9zYWJsZSBcdUJDRjRcdUFEMDBcclxuICBwcml2YXRlIG1hcDogQ2FsbG91dE1hcCA9IHt9O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsdWdpbjogQ292ZXJUYWJsZVBsdWdpbikgeyB0aGlzLnJlYnVpbGQoKTsgfVxyXG5cclxuICByZWJ1aWxkKCkge1xyXG4gICAgLyogc2V0dGluZ3MgXHUyMTkyIG1hcCAqL1xyXG4gICAgdGhpcy5tYXAgPSB7fTtcclxuICAodGhpcy5wbHVnaW4uc2V0dGluZ3MubGlzdENhbGxvdXRzID8/IFtdKS5mb3JFYWNoKFxyXG4gICAgKGM6IExpc3RDYWxsb3V0KSA9PiAodGhpcy5tYXBbYy5jaGFyXSA9IGMpXHJcbiAgKTtcclxuXHJcbiAgICAvKiBDU1MgKi9cclxuICAgIHRoaXMuaW5qZWN0Q3NzKCk7XHJcblxyXG4gICAgLyogQ002IGV4dGVuc2lvbiBcdTIwMTMgZGlzcG9zZSBcdTI1QjYgXHVDN0FDXHVCNEYxXHVCODVEICovXHJcbiAgICBpZiAodGhpcy5jbURpc3Bvc2UpIHtcclxuICAgICAgdGhpcy5jbURpc3Bvc2UoKTtcclxuICAgICAgdGhpcy5jbURpc3Bvc2UgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jbUV4dCA9IGNyZWF0ZVBsdWdpbih0aGlzLm1hcCk7XHJcbiAgICBpZiAodGhpcy5jbUV4dC5sZW5ndGgpIFxyXG4gICAgICB0aGlzLnBsdWdpbi5yZWdpc3RlckVkaXRvckV4dGVuc2lvbih0aGlzLmNtRXh0KTtcclxuICB9XHJcblxyXG4gIC8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuICBlZGl0b3JFeHRlbnNpb25zKCkgeyByZXR1cm4gdGhpcy5jbUV4dDsgfVxyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIHNyYy90aGVtZS9MaXN0Q2FsbG91dE1hbmFnZXIudHMgXHUyMDEzIHBhdGNoIHNuaXBwZXRcclxuICogXHUyNDYwIFx1QjlDMVx1RDA2QyBcdUIxNzhcdUI0RENcdUI5N0MgXHVCQ0Y0XHVDODc0XHVENTU4XHVCQTc0XHVDMTFDIHBpbGwgXHVBRDZDXHVDMTMxXHJcbiAqIFx1MjQ2MSBcdUM3N0RcdUFFMzBcdUJBQThcdUI0RENcdUM1RDBcdUMxMUMgXHVCMzU0XHVCRTE0LVx1RDA3NFx1QjlBRCBcdTIxRDIgYS5ocmVmIFx1RDJCOFx1QjlBQ1x1QUM3MFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIHBvc3RQcm9jZXNzb3IoKSBcdTIwMTMgXHVDQ0FCIFx1QzcwNFx1RDBBNFx1QjlDMVx1RDA2Q1x1QUMwMCBcdUM1QzZcdUM3M0NcdUJBNzQgXHVDMjFDXHVDMjE4IFx1RDE0RFx1QzJBNFx1RDJCOCBcdUMwQUNcdUM2QTlcclxuXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cclxuXHJcbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHJcbiAgcG9zdFByb2Nlc3NvcigpIFx1MjAxMyBcdTIwMUNcdUNDQUIgXHVCOUMxXHVEMDZDIFx1QjE3OFx1QjREQ1x1Qjk3QyBcdUFERjhcdUIzMDBcdUI4NUMgXHVDMEI0XHVCODI0IHBpbGwgXHVCODVDIFx1QUMxMFx1QzJGOFx1QUUzMFx1MjAxRFxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5wb3N0UHJvY2Vzc29yKCk6IE1hcmtkb3duUG9zdFByb2Nlc3NvciB7XHJcbiAgcmV0dXJuIGVsID0+IHtcclxuICAgIGlmICghT2JqZWN0LmtleXModGhpcy5tYXApLmxlbmd0aCkgcmV0dXJuO1xyXG5cclxuICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTExJRWxlbWVudD4oXCJsaVwiKS5mb3JFYWNoKGxpID0+IHtcclxuICAgICAgY29uc3QgcmF3ID0gbGkudGV4dENvbnRlbnQgPz8gXCJcIjtcclxuICAgICAgY29uc3QgY2ggID0gcmF3LnRyaW0oKS5jaGFyQXQoMCk7XHJcbiAgICAgIGlmICghdGhpcy5tYXBbY2hdKSByZXR1cm47XHJcblxyXG4gICAgICAvKiAxXHVGRTBGXHUyMEUzICBcdUNDQUIgPGE+IFx1QzY5NFx1QzE4QyBcdUNDM0VcdUFFMzAgKFx1QjBCNFx1QkQ4MFx1MDBCN1x1QzY3OFx1QkQ4MCBcdUI5QzFcdUQwNkMgXHVCQUE4XHVCNDUwKSAqL1xyXG4gICAgICBjb25zdCBmaXJzdExpbmsgPSBsaS5xdWVyeVNlbGVjdG9yPEhUTUxBbmNob3JFbGVtZW50PihcclxuICAgICAgICBcImEuaW50ZXJuYWwtbGluaywgYS5leHRlcm5hbC1saW5rLCBhOm5vdChbaHJlZl49JyMnXSlcIixcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8qIDJcdUZFMEZcdTIwRTMgIFx1RDQ1Q1x1QzJEQyBcdUI3N0NcdUJDQTggXHVBQ0IwXHVDODE1ICovXHJcbiAgICAgIGxldCBsYWJlbE5vZGU6IE5vZGU7XHJcbiAgICAgIGlmIChmaXJzdExpbmspIHtcclxuICAgICAgICBsYWJlbE5vZGUgPSBmaXJzdExpbms7ICAgICAgICAgICAvLyBcdUFERjhcdUIzMDBcdUI4NUMgXHVDMEFDXHVDNkE5IFx1MjAxMyBPYnNpZGlhbiBcdUM3NzRcdUJDQTRcdUQyQjggXHVDNzIwXHVDOUMwXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLyogXHVDNzA0XHVEMEE0XHVCOUMxXHVEMDZDXHVCM0M0IFx1QzVDNlx1QUNFMCA8YT5cdUIzQzQgXHVDNUM2XHVDNzNDXHVCQTc0ID0+IFx1QzIxQ1x1QzIxOCBcdUQxNERcdUMyQTRcdUQyQjggKi9cclxuICAgICAgICBjb25zdCB0eHQgPSByYXcudHJpbSgpLnNsaWNlKDEpLnRyaW0oKTsgICAgICAgICAgICAvLyBcdUM1NUVcdUM3NTggXHVDRjVDXHVDNTQ0XHVDNkMzIFx1QkIzOFx1Qzc5MCBcdUM4MUNcdUFDNzBcclxuICAgICAgICBsYWJlbE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0eHQgfHwgXCIgXCIpOyAgIC8vIFx1QUNGNVx1QkMzMSBcdUJDMjlcdUM5QzBcclxuICAgICAgfVxyXG5cclxuICAgICAgLyogM1x1RkUwRlx1MjBFMyAgbGkgXHVCMEI0XHVCRDgwIFx1QkU0NFx1QzZCMFx1QUNFMCBwaWxsIFx1QUQ2Q1x1QzEzMSAqL1xyXG4gICAgICBsaS5yZXBsYWNlQ2hpbGRyZW4oKTsgICAgICAgICAgICAgLy8gXHVBRTMwXHVDODc0IFx1Qzc5MFx1QzJERCBcdUM4MDRcdUJEODAgXHVDODFDXHVBQzcwXHJcbiAgICAgIGNvbnN0IHBpbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgcGlsbC5jbGFzc05hbWUgPSBcImxjLXBpbGxcIjtcclxuICAgICAgcGlsbC5hcHBlbmRDaGlsZChsYWJlbE5vZGUpO1xyXG4gICAgICBsaS5hcHBlbmRDaGlsZChwaWxsKTtcclxuXHJcbiAgICAgIGxpLmNsYXNzTGlzdC5hZGQoXCJsYy1saXN0LWNhbGxvdXRcIik7XHJcbiAgICAgIGxpLnNldEF0dHJpYnV0ZShcImRhdGEtY2FsbG91dC1jaGFyXCIsIGNoKTtcclxuXHJcbiAgICAgIC8qIDRcdUZFMEZcdTIwRTMgIFx1QjM1NFx1QkUxNC1cdUQwNzRcdUI5QUQgXHUyMTkyIFx1Q0NBQiBcdUI5QzFcdUQwNkMgXHVEMkI4XHVCOUFDXHVBQzcwIChcdUQxNERcdUMyQTRcdUQyQjhcdUI5Q0MgXHVDNzg4XHVDNzQ0IFx1QjU1MCBcdUJCMzRcdUMyREMpICovXHJcbiAgICAgIGlmIChmaXJzdExpbmspIHtcclxuICAgICAgICBsaS5hZGRFdmVudExpc3RlbmVyKFwiZGJsY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFsaS5jbG9zZXN0KFwiLm1hcmtkb3duLXJlYWRpbmctdmlld1wiKSkgcmV0dXJuO1xyXG4gICAgICAgICAgZmlyc3RMaW5rLmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgICAgIG5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIiwgeyBidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiB0cnVlLCB2aWV3OiB3aW5kb3cgfSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcbn1cclxuXHJcblxyXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFxyXG4gIGluamVjdENzcygpIFx1MjAxMyBcdUNGNUNcdUM1NDRcdUM2QzMgXHVCOUFDXHVDMkE0XHVEMkI4XHVCOTdDIFx1MjAxQ1x1QjJFOFx1Qzc3QyBcdUQxNERcdUMyQTRcdUQyQjggKyBcdUJDMzBcdUFDQkRcdTIwMUQgXHVCQzg0XHVDODA0XHVDNzNDXHVCODVDIFx1QkNGNVx1QzZEMFxyXG5cdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAqL1xyXG5wcml2YXRlIGluamVjdENzcygpIHtcclxuICBpZiAoIXRoaXMuc3R5bGVFbCkge1xyXG4gICAgdGhpcy5zdHlsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gICAgdGhpcy5zdHlsZUVsLmlkID0gXCJjdC1sYy1zdHlsZVwiO1xyXG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlRWwpO1xyXG4gIH1cclxuXHJcbiAgLyogXHUyNTAwXHUyNTAwIFx1MjQ2MCBcdUFDRjVcdUQxQjUgXHVCQ0EwXHVDNzc0XHVDMkE0OiBcdUI0RTRcdUM1RUNcdUM0RjBcdUFFMzBcdTIwMDZcdUM4MUNcdUFDNzAgKyBwaWxsIFx1QUUzMFx1QkNGOCBcdTI1MDBcdTI1MDAgKi9cclxuICBsZXQgY3NzID0gYFxyXG4gICAgLyogXHVDNzdDXHVCQzE4IFx1QjlBQ1x1QzJBNFx1RDJCOCBcdUM3MjBcdUM5QzAsIFx1Q0Y1Q1x1QzU0NFx1QzZDMyBcdUM1NDhcdUM1RDBcdUMxMUNcdUI5Q0MgXHVCRDg4XHVCOUJGIFx1QzIyOFx1QUU0MCAqL1xyXG4gIGxpLmxjLWxpc3QtY2FsbG91dCAubGlzdC1idWxsZXR7ZGlzcGxheTpub25lIWltcG9ydGFudDt9XHJcblxyXG4gIGxpLmxjLWxpc3QtY2FsbG91dHtcclxuICAgIGxpc3Qtc3R5bGU6bm9uZSFpbXBvcnRhbnQ7XHJcbiAgICBtYXJnaW46MCFpbXBvcnRhbnQ7XHJcbiAgICBwYWRkaW5nOjAhaW1wb3J0YW50O1xyXG4gICAgZm9udDogNjAwIDFlbS8xIHZhcigtLWZvbnQtaW50ZXJmYWNlKTtcclxuICB9XHJcbiAgbGkubGMtbGlzdC1jYWxsb3V0OjptYXJrZXJ7Y29udGVudDpcIlwiIWltcG9ydGFudH1cclxuXHJcbiAgLmxjLXBpbGx7XHJcbiAgICBkaXNwbGF5OmJsb2NrO1xyXG4gICAgd2lkdGg6MTAwJTtcclxuICAgIHBhZGRpbmc6NnB4IDEwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOjZweDtcclxuICAgIGZvbnQtd2VpZ2h0OjYwMDtcclxuICAgIG1hcmdpbjowcHggMHB4IDVweCAwcHg7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfVxyXG4gIC5sYy1waWxsOmhvdmVye1xyXG4gICAgdHJhbnNpdGlvbjphbGwgLjNzIGVhc2U7XHJcbiAgICB0cmFuc2Zvcm06c2NhbGUoLjk1KTtcclxuICB9XHJcblxyXG4gIC8qIFx1QjlDMVx1RDA2Q1x1MjAwNlx1MjE5MiBcdTIwMUNcdUM3N0NcdUJDMTggXHVEMTREXHVDMkE0XHVEMkI4XHUyMDFEIFx1Q0M5OFx1QjlBQyAqL1xyXG4gIC5sYy1waWxsIGF7XHJcbiAgICBjb2xvcjppbmhlcml0IWltcG9ydGFudDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjpub25lIWltcG9ydGFudDtcclxuICB9XHJcblxyXG4gIC8qIGhvdmVyIFx1QUMxNVx1Qzg3MFx1MDBCN1x1QzY3OFx1QUNGRCBcdUJDMzBcdUFDQkQgXHVDODFDXHVBQzcwIChwaWxsIFx1QjBCNFx1QkQ4MCBcdUJDMzBcdUFDQkRcdUI5Q0MgXHVENDVDXHVDMkRDKSAqL1xyXG4gIC5tYXJrZG93bi1yZWFkaW5nLXZpZXcgbGkubGMtbGlzdC1jYWxsb3V0OmhvdmVye1xyXG4gICAgYmFja2dyb3VuZDp1bnNldCFpbXBvcnRhbnQ7XHJcbiAgfVxyXG5cclxuICAvKiBcdUQzQjhcdUM5RDFcdUJBQThcdUI0REMgQ002IFx1RDU4OSBcdUIzNzBcdUNGNTQgXHVDNjAxXHVENUE1IFx1QzVDNlx1Qzc3NCwgXHVDNzdEXHVBRTMwXHVCQUE4XHVCNERDIFx1QzgwNFx1QzZBOSBcdUJDMzBcdUFDQkRcdUI5Q0MgXHVDNzIwXHVDOUMwICovXHJcbiAgLm1hcmtkb3duLXJlYWRpbmctdmlldyBsaS5sYy1saXN0LWNhbGxvdXQgLmNtLWxpbmV7YmFja2dyb3VuZDp0cmFuc3BhcmVudCFpbXBvcnRhbnQ7fVxyXG4gIGA7XHJcblxyXG4gIC8qIFx1MjUwMFx1MjUwMCBcdTI0NjEgXHVDMEM5XHVDMEMxIFx1QjNEOVx1QzgwMSBcdUMwRERcdUMxMzEgXHUyNTAwXHUyNTAwICovXHJcbiAgZm9yIChjb25zdCBjaCBpbiB0aGlzLm1hcCkge1xyXG4gICAgY29uc3QgYyA9IHRoaXMubWFwW2NoXTtcclxuICAgIGNzcyArPSBgXHJcbiAgICAudGhlbWUtbGlnaHQgbGlbZGF0YS1jYWxsb3V0LWNoYXI9JyR7Y2h9J10gLmxjLXBpbGx7XHJcbiAgICAgIGJhY2tncm91bmQ6JHtjLmJnTGlnaHR9IWltcG9ydGFudDtcclxuICAgICAgY29sb3I6JHtjLmZnTGlnaHR9IWltcG9ydGFudDtcclxuICAgIH1cclxuICAgIC50aGVtZS1kYXJrICBsaVtkYXRhLWNhbGxvdXQtY2hhcj0nJHtjaH0nXSAubGMtcGlsbHtcclxuICAgICAgYmFja2dyb3VuZDoke2MuYmdEYXJrfSFpbXBvcnRhbnQ7XHJcbiAgICAgIGNvbG9yOiR7Yy5mZ0Rhcmt9IWltcG9ydGFudDtcclxuICAgIH1cclxuICAgIGxpLmxjLWxpc3QtY2FsbG91dFtkYXRhLWNhbGxvdXQtY2hhcj0nJHtjaH0nXSAubGMtcGlsbDo6YmVmb3JleyBcclxuICAgICAgY29udGVudDpcIlwiOyBcclxuICAgIH1gO1xyXG5cclxuICAgIFxyXG4gIH1cclxuXHJcbiAgLyogXHUyNTAwXHUyNTAwIFx1MjQ2MiBcdUNENUNcdUM4ODUgXHVDOEZDXHVDNzg1IFx1MjUwMFx1MjUwMCAqL1xyXG4gIHRoaXMuc3R5bGVFbC50ZXh0Q29udGVudCA9IGNzcztcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbn1cclxuIiwgImltcG9ydCB7IEFwcCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQge1xyXG4gIGluamVjdFRva2VucyxcclxuICBERUZBVUxUX1RPS0VOUyxcclxuICB0eXBlIEFwcERlc2lnblRva2VucyxcclxufSBmcm9tIFwiLi4vLi4vdGhlbWUvdG9rZW5zXCI7XHJcbmltcG9ydCBCQVNFX1RIRU1FX0NTUyBmcm9tIFwiLi4vLi4vdGhlbWUvY3NzL2Jhc2UuY3NzXCI7XHJcbmltcG9ydCB0eXBlIHsgQ292ZXJUYWJsZVNldHRpbmdzIH0gZnJvbSBcIi4uLy4uL3NldHRpbmdcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEZXNpZ25TZXJ2aWNlIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IHJvb3QgICA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuICBwcml2YXRlIHJlYWRvbmx5IGNmZzogKCkgPT4gQ292ZXJUYWJsZVNldHRpbmdzO1xyXG5cclxuICAvKiBzdHlsZSBcdUQwRENcdUFERjggaWQgKi9cclxuICBwcml2YXRlIHN0YXRpYyBCQVNFICA9IFwiY3QtYmFzZS10aGVtZVwiO1xyXG4gIHByaXZhdGUgc3RhdGljIENVU1RPTT0gXCJjdC1jdXN0b20tY3NzXCI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGFwcDpBcHAsIGNmZ0dldHRlcjooKT0+Q292ZXJUYWJsZVNldHRpbmdzKXtcclxuICAgIHRoaXMuY2ZnID0gY2ZnR2V0dGVyO1xyXG4gICAgdGhpcy5hcHBseUFsbCgpO1xyXG4gICAgYXBwLndvcmtzcGFjZS5vbihcImNzcy1jaGFuZ2VcIiwgKCkgPT4gdGhpcy5hcHBseUFsbCgpKTtcclxuICB9XHJcblxyXG4gIGFwcGx5QWxsKCk6dm9pZHtcclxuICAgIGNvbnN0IHsgdG9rZW5zLCBjdXN0b21Dc3MgfSA9IHRoaXMuY2ZnKCk7XHJcbiAgICBjb25zdCBtb2RlID0gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoXCJ0aGVtZS1kYXJrXCIpID8gXCJkYXJrXCI6XCJsaWdodFwiO1xyXG5cclxuICAgIC8qIFx1MjQ2MCBkZXNpZ24gdG9rZW5zIFx1MjE5MiA6cm9vdCAqL1xyXG4gICAgaW5qZWN0VG9rZW5zKG1vZGUsIHRva2VucyA/PyBERUZBVUxUX1RPS0VOUyk7XHJcblxyXG4gICAgLyogXHUyNDYxIGJhc2UtdGhlbWUgY3NzIChcdUMwQUNcdUM2QTlcdUM3OTAgXHVEMUEwXHVBRTAwKSAqL1xyXG4gICAgdGhpcy51cHNlcnRTdHlsZShEZXNpZ25TZXJ2aWNlLkJBU0UsIEJBU0VfVEhFTUVfQ1NTKTtcclxuXHJcbiAgICAvKiBcdTI0NjIgXHVDMEFDXHVDNkE5XHVDNzkwIGN1c3RvbSBjc3MgKi9cclxuICAgIHRoaXMudXBzZXJ0U3R5bGUoRGVzaWduU2VydmljZS5DVVNUT00sIGN1c3RvbUNzcyB8fCBcIlwiKTtcclxuICB9XHJcblxyXG4gIC8qIHV0aWwgKi9cclxuICBwcml2YXRlIHVwc2VydFN0eWxlKGlkOnN0cmluZywgY3NzOnN0cmluZyl7XHJcbiAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgYXMgSFRNTFN0eWxlRWxlbWVudCB8IG51bGw7XHJcbiAgICBpZighZWwgJiYgY3NzKXtcclxuICAgICAgZWwgPSBPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSx7IGlkIH0pIGFzIEhUTUxTdHlsZUVsZW1lbnQ7XHJcbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoZWwpO1xyXG4gICAgfVxyXG4gICAgaWYoZWwpIGVsLnRleHRDb250ZW50ID0gY3NzO1xyXG4gIH1cclxufVxyXG4iLCAiLyogdXRpbHMvY2xvbmVSb290U3R5bGUudHMgKi9cclxuaW1wb3J0IHsgQXBwLCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG4vKiogXHVCQTU0XHVDNzc4IGRvY3VtZW50IFx1Qzc1OCBDU1MgXHVCQ0MwXHVDMjE4IFx1MjE5MiBcdUJBQThcdUI0RTAgTGVhZiBcdUI4NUMgXHVCQ0Y1XHVDMEFDICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVJvb3RTdHlsZVRvTGVhdmVzKGFwcDogQXBwKSB7XHJcbiAgY29uc3Qgc3JjID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmNzc1RleHQ7XHJcbiAgY29uc3QgaHRtbENsYXNzZXMgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NOYW1lO1xyXG4gIGNvbnN0IGJvZHlDbGFzc2VzID0gZG9jdW1lbnQuYm9keS5jbGFzc05hbWU7XHJcbiAgICBjb25zdCBzdHlsZUlkcyA9IFtcclxuICAgIFwiY3Qtc3R5bGUtZmFsbGJhY2tcIixcclxuICAgIFwiY3QtYmFzZS10aGVtZVwiLFxyXG4gICAgXCJjdC1jdXN0b20tY3NzXCIsXHJcbiAgICBcImN0LWJhc2UtdmFyc1wiLFxyXG4gICAgXCJjdC10YWctY29sb3JzXCIsXHJcbiAgXTtcclxuXHJcbiAgYXBwLndvcmtzcGFjZS5pdGVyYXRlQWxsTGVhdmVzKChsZWFmOiBXb3Jrc3BhY2VMZWFmKSA9PiB7XHJcbiAgICBjb25zdCBkb2MgPSBsZWFmLnZpZXc/LmNvbnRhaW5lckVsPy5vd25lckRvY3VtZW50O1xyXG4gICAgaWYgKGRvYyAmJiBkb2MgIT09IGRvY3VtZW50KSB7XHJcbiAgICAgIGRvYy5kb2N1bWVudEVsZW1lbnQuc3R5bGUuY3NzVGV4dCA9IHNyYztcclxuICAgICAgZG9jLmRvY3VtZW50RWxlbWVudC5jbGFzc05hbWUgPSBodG1sQ2xhc3NlcztcclxuICAgICAgZG9jLmJvZHkuY2xhc3NOYW1lID0gYm9keUNsYXNzZXM7XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IGlkIG9mIHN0eWxlSWRzKSB7XHJcbiAgICAgICAgY29uc3Qgc3JjRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgYXMgSFRNTFN0eWxlRWxlbWVudCB8IG51bGw7XHJcbiAgICAgICAgaWYgKCFzcmNFbCkgY29udGludWU7XHJcblxyXG4gICAgICAgIGxldCBkZXN0ID0gZG9jLmdldEVsZW1lbnRCeUlkKGlkKSBhcyBIVE1MU3R5bGVFbGVtZW50IHwgbnVsbDtcclxuICAgICAgICBpZiAoIWRlc3QpIHtcclxuICAgICAgICAgIGRlc3QgPSBkb2MuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gICAgICAgICAgZGVzdC5pZCA9IGlkO1xyXG4gICAgICAgICAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoZGVzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlc3QudGV4dENvbnRlbnQgPSBzcmNFbC50ZXh0Q29udGVudDtcclxuICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBVUEsSUFBQUEsbUJBT087QUFDUCxnQkFBNkI7QUFDN0Isa0JBQXFCO0FBQ3JCLElBQUFBLG1CQUFrQzs7O0FDYWxDLElBQU0sY0FBYyxPQUFtQjtBQUFBLEVBQ3JDLE1BQVEsRUFBRSxPQUFNLFdBQVcsT0FBTSxVQUFVO0FBQUEsRUFDM0MsU0FBUTtBQUFBLElBQUUsSUFBRztBQUFBLElBQVcsSUFBRztBQUFBLElBQVcsSUFBRztBQUFBLElBQy9CLElBQUc7QUFBQSxJQUFXLElBQUc7QUFBQSxJQUFXLElBQUc7QUFBQSxFQUFVO0FBQUEsRUFDbkQsTUFBUSxFQUFFLFFBQU8sa0JBQWtCLFVBQVMsTUFBTTtBQUFBLEVBQ2xELE1BQU8sRUFBRSxNQUFNLGlCQUFpQjtBQUFBLEVBQ2hDLFFBQVMsRUFBRSxRQUFTLG1CQUFrQjtBQUFBLEVBQ3RDLE9BQVE7QUFBQSxJQUFFLFFBQU87QUFBQSxJQUFXLFFBQU87QUFBQSxJQUN6QixTQUFRO0FBQUEsSUFBbUIsVUFBUztBQUFBLEVBQWtCO0FBQUEsRUFDaEUsT0FBUSxFQUFFLFFBQU8sV0FBVyxRQUFPLGtCQUFrQjtBQUN2RDtBQUVPLElBQU0saUJBQWlDO0FBQUEsRUFDNUMsT0FBTyxZQUFZO0FBQUEsRUFDbkIsT0FBUSxNQUFJO0FBQ1YsVUFBTSxJQUFJLFlBQVk7QUFDdEIsTUFBRSxPQUFRLEVBQUUsUUFBTyxrQkFBa0IsVUFBUyxNQUFNO0FBQ3BELE1BQUUsT0FBUSxFQUFFLE1BQUssbUJBQW1CO0FBQ3BDLE1BQUUsU0FBVSxFQUFFLFFBQU8scUJBQXFCO0FBQzFDLE1BQUUsUUFBUTtBQUFBLE1BQUUsUUFBTztBQUFBLE1BQVcsUUFBTztBQUFBLE1BQ3pCLFNBQVE7QUFBQSxNQUFlLFVBQVM7QUFBQSxJQUF3QjtBQUNwRSxNQUFFLFFBQVEsRUFBRSxRQUFPLFdBQVcsUUFBTyxrQkFBa0I7QUFDdkQsV0FBTztBQUFBLEVBQ1QsR0FBRztBQUNMO0FBR08sSUFBTSxNQUFNO0FBQUE7QUFBQSxFQUNFLFdBQVU7QUFBQSxFQUFxQixXQUFVO0FBQUE7QUFBQSxFQUN6QyxJQUFHO0FBQUEsRUFBaUIsSUFBRztBQUFBLEVBQWlCLElBQUc7QUFBQSxFQUMzQyxJQUFHO0FBQUEsRUFBaUIsSUFBRztBQUFBLEVBQWlCLElBQUc7QUFBQTtBQUFBLEVBQzNDLFFBQU87QUFBQSxFQUF3QixVQUFTO0FBQUE7QUFBQSxFQUN4QyxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUE7QUFBQSxFQUNSLFNBQVE7QUFBQSxFQUFxQixTQUFRO0FBQUEsRUFDckMsT0FBTTtBQUFBLEVBQXVCLFFBQU87QUFBQTtBQUFBLEVBQ3BDLFNBQVE7QUFBQSxFQUFzQixTQUFRO0FBQzNEO0FBR08sU0FBUyxhQUNkLE1BQ0EsU0FDQSxPQUE0QixTQUFTLGlCQUN0QztBQUNDLFFBQU0sSUFBSSxRQUFRLElBQUk7QUFDdEIsUUFBTSxLQUFLLGdCQUFnQixXQUFXLEtBQUssa0JBQWtCO0FBQzdELFFBQU0sTUFBTSxTQUFTLFNBQVMsU0FBUztBQUd2QyxLQUFHLE1BQU0sWUFBWSxJQUFJLFdBQVcsRUFBRSxLQUFLLEtBQUs7QUFDaEQsS0FBRyxNQUFNLFlBQVksSUFBSSxXQUFXLEVBQUUsS0FBSyxLQUFLO0FBR2hELEVBQUMsQ0FBQyxNQUFLLE1BQUssTUFBSyxNQUFLLE1BQUssSUFBSSxFQUFZO0FBQUEsSUFBUSxPQUNqRCxHQUFHLE1BQU0sWUFBWSxRQUFRLEtBQUssT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQUE7QUFBQSxFQUN2RDtBQUdBLEtBQUcsTUFBTSxZQUFZLGVBQWUsT0FBUyxFQUFFLEtBQUssTUFBTTtBQUMxRCxLQUFHLE1BQU0sWUFBWSxrQkFBa0IsT0FBTyxFQUFFLEtBQUssUUFBUTtBQUcvRCxLQUFHLE1BQU0sWUFBWSxhQUFhLE9BQU8sRUFBRSxLQUFLLElBQUk7QUFFcEQsS0FBRyxNQUFNLFlBQVksZUFBZSxPQUFPLEVBQUUsT0FBTyxNQUFNO0FBR3hELEtBQUcsTUFBTSxZQUFZLElBQUksU0FBUyxFQUFFLE1BQU0sTUFBTztBQUNqRCxLQUFHLE1BQU0sWUFBWSxJQUFJLFNBQVMsRUFBRSxNQUFNLE1BQU87QUFDakQsS0FBRyxNQUFNLFlBQVksSUFBSSxPQUFTLEVBQUUsTUFBTSxPQUFPO0FBQ2pELEtBQUcsTUFBTSxZQUFZLElBQUksUUFBUyxFQUFFLE1BQU0sUUFBUTtBQUdwRCxLQUFHLE1BQU0sWUFBWSxxQkFBcUIsRUFBRSxNQUFNLE1BQU07QUFDeEQsS0FBRyxNQUFNLFlBQVkscUJBQXFCLEVBQUUsTUFBTSxNQUFNO0FBQ3hEOzs7QUNwR0Esc0JBQStDOzs7QUNOL0MsU0FBUyxLQUFLLFFBQWlCO0FBQzdCLFNBQU8sSUFBSSxNQUFhLFNBQVUsUUFBZ0IsTUFBTSxFQUFFLFFBQVEsR0FBRyxDQUFDO0FBQ3hFO0FBRUEsSUFBSSxRQUFRO0FBRUwsSUFBTSxNQUFNO0FBQUE7QUFBQSxFQUVqQixTQUFTLEdBQVk7QUFBRSxZQUFRO0FBQUEsRUFBRztBQUFBO0FBQUEsRUFHbEMsR0FBSSxLQUFLLE9BQU87QUFBQTtBQUFBLEVBQ2hCLEdBQUksS0FBSyxNQUFNO0FBQUEsRUFDZixHQUFJLEtBQUssT0FBTztBQUFBO0FBQUEsRUFHaEIsS0FBSyxPQUFrQjtBQUFFLGFBQVMsUUFBUSxLQUFLLFFBQVEsT0FBTztBQUFBLEVBQUc7QUFBQSxFQUNqRSxRQUFRLE9BQWU7QUFBRSxhQUFTLFFBQVEsUUFBUSxRQUFRLE9BQU87QUFBQSxFQUFHO0FBQ3RFOzs7QURVTyxJQUFNLG1CQUF1QztBQUFBLEVBQ2xELGlCQUF1QjtBQUFBLEVBQ3ZCLGNBQXVCLENBQUM7QUFBQSxFQUd4QixRQUFXLGdCQUFnQixjQUFjO0FBQUEsRUFDekMsVUFBVyxDQUFDO0FBQUEsRUFDWixXQUFXO0FBQUEsRUFDWCxVQUFVO0FBQ1o7QUFHQSxJQUFNLFFBQVE7QUFBQTtBQUFBLEVBRVosV0FBWTtBQUFBLEVBQ1osV0FBWTtBQUFBO0FBQUEsRUFFWixJQUFHO0FBQUEsRUFBWSxJQUFHO0FBQUEsRUFBZSxJQUFHO0FBQUEsRUFDcEMsSUFBRztBQUFBLEVBQWMsSUFBRztBQUFBLEVBQWEsSUFBRztBQUFBO0FBQUEsRUFFcEMsUUFBTztBQUFBLEVBQWUsVUFBUztBQUFBO0FBQUEsRUFFL0IsU0FBUTtBQUFBLEVBQWdCLFNBQVE7QUFBQSxFQUNoQyxVQUFTO0FBQUEsRUFBb0IsV0FBVTtBQUFBLEVBQ3ZDLFNBQVE7QUFBQSxFQUFnQixTQUFRO0FBQ2xDO0FBQ0EsSUFBTSxnQkFBZ0I7QUFLZixJQUFNLHVCQUFOLGNBQW1DLGlDQUFpQjtBQUFBLEVBR3pELFlBQVksS0FBVSxRQUEwQjtBQUM5QyxVQUFNLEtBQUssTUFBTTtBQUNqQixTQUFLLFNBQVM7QUFBQSxFQUNoQjtBQUFBLEVBRUYsTUFBYyxTQUFTO0FBQ3JCLFVBQU0sS0FBSyxPQUFPLGFBQWE7QUFFL0IsaUJBQWEsUUFBUyxLQUFLLE9BQU8sU0FBUyxNQUFNO0FBQ2pELGlCQUFhLFNBQVMsS0FBSyxPQUFPLFNBQVMsTUFBTTtBQUdqRCxTQUFLLE9BQU8sb0JBQW9CO0FBQUEsRUFDbEM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9RLFlBQVksUUFBeUI7QUFDM0MsSUFBQyxDQUFDLFFBQU8sT0FBTyxFQUFZLFFBQVEsVUFBUTtBQUMxQyxZQUFNLE1BQU0sZUFBZSxJQUFJO0FBQy9CLFlBQU0sTUFBTSxPQUFPLElBQUk7QUFFdkIsVUFBSSxPQUFVLEVBQUUsR0FBRyxJQUFJLE1BQVMsR0FBRyxJQUFJLEtBQVE7QUFDL0MsVUFBSSxVQUFVLEVBQUUsR0FBRyxJQUFJLFNBQVMsR0FBRyxJQUFJLFFBQVE7QUFDL0MsVUFBSSxPQUFVLEVBQUUsR0FBRyxJQUFJLE1BQVMsR0FBRyxJQUFJLEtBQVE7QUFDL0MsVUFBSSxPQUFRLEVBQUUsR0FBRyxJQUFJLE1BQU0sR0FBRyxJQUFJLEtBQUs7QUFDdkMsVUFBSSxTQUFVLEVBQUUsR0FBRyxJQUFJLFFBQVEsR0FBRyxJQUFJLE9BQU87QUFJN0MsWUFBTSxRQUFRLENBQXVDLEdBQU0sTUFBZTtBQUN4RSxRQUFDLE9BQU8sS0FBSyxDQUFDLEVBQWtCLFFBQVEsT0FBSztBQW5HbkQsY0FBQUM7QUFvR1EsV0FBQUEsTUFBQSxnQkFBQUEsTUFBQSxPQUFTLEVBQUUsQ0FBQztBQUFBLFFBQ2QsQ0FBQztBQUFBLE1BQ0g7QUFHQSxVQUFJLFFBQVEsRUFBRSxHQUFHLElBQUksT0FBTyxHQUFHLElBQUksTUFBTTtBQUN6QyxVQUFJLFFBQVEsRUFBRSxHQUFHLElBQUksT0FBTyxHQUFHLElBQUksTUFBTTtBQUFBLElBQzNDLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQSxFQUlRLGNBQ04sTUFDQSxPQUNBLGFBQ0EsWUFDQSxhQUNBLFlBQ0E7QUFDQSxVQUFNLE1BQU0sSUFBSSx3QkFBUSxJQUFJLEVBQUUsUUFBUSxLQUFLLEVBQUUsUUFBUSwrREFBc0M7QUFNM0YsVUFBTSxhQUFhLENBQ2pCLElBQ0EsS0FDQSxLQUNBLFFBQ0c7QUFuSVAsVUFBQUE7QUFvSUksU0FBRyxTQUFTLElBQUksQ0FBQyxFQUNkLFNBQVMsT0FBTyxNQUFjO0FBQUUsWUFBSSxDQUFDO0FBQUcsY0FBTSxLQUFLLE9BQU87QUFBQSxNQUFHLENBQUM7QUFHakUsVUFBSSxPQUNEQSxNQUFBLEdBQVcsWUFBWCxPQUFBQSxNQUFzQjtBQUd6QixVQUFJLENBQUMsS0FBSztBQUNSLHVCQUFlLE1BQU07QUE3STNCLGNBQUFBO0FBOElRLGlCQUFNQSxNQUFBLEdBQUcsZ0JBQUgsZ0JBQUFBLElBQWdCLGNBQWM7QUFFcEMscUNBQUssYUFBYSxTQUFTO0FBQUEsUUFDN0IsQ0FBQztBQUFBLE1BQ0gsT0FBTztBQUNMLFlBQUksYUFBYSxTQUFTLEdBQUc7QUFBQSxNQUMvQjtBQUFBLElBQ0Y7QUFHQSxRQUFJO0FBQUEsTUFBZSxRQUNqQixXQUFXLElBQUksYUFBYSxhQUFhLDRCQUF1QjtBQUFBLElBQ2xFO0FBR0EsUUFBSTtBQUFBLE1BQWUsUUFDakIsV0FBVyxJQUFJLFlBQVksWUFBWSw4QkFBdUI7QUFBQSxJQUNoRTtBQUFBLEVBQ0Y7QUFBQTtBQUFBLEVBR1EsZ0JBQ04sTUFDQSxJQUNBLEtBQ0EsR0FDRDtBQUNDLFVBQU0sTUFBTSxJQUFJLHdCQUFRLElBQUk7QUFHNUIsUUFBSTtBQUFBLE1BQVEsT0FDVixFQUFFLGVBQWUsUUFBRyxFQUNsQixTQUFTLEdBQUcsSUFBSSxFQUNoQixTQUFTLE9BQU0sTUFBSztBQUNuQixXQUFHLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7QUFDaEMsY0FBTSxLQUFLLE9BQU87QUFDbEIsYUFBSyxRQUFRO0FBQUEsTUFDZixDQUFDO0FBQUEsSUFDSixFQUFFLFFBQVEsVUFBVSxNQUFNLEdBQUc7QUFPL0IsVUFBTSxTQUFTLENBQ2IsS0FDQSxLQUNBLFFBQ0c7QUFDSCxVQUFJLGVBQWUsUUFBTTtBQUN2QixXQUFHLFNBQVMsSUFBSSxDQUFDLEVBQ2QsU0FBUyxPQUFNLE1BQUs7QUFBRSxjQUFJLENBQUM7QUFBRyxnQkFBTSxLQUFLLE9BQU87QUFBQSxRQUFHLENBQUM7QUFHdkQsY0FBTSxTQUFTLE1BQU07QUFyTXpCLGNBQUFBO0FBc01NLGdCQUFNLFFBQVE7QUFDZCxnQkFBTSxPQUFPQSxNQUFBLE1BQU0sZ0JBQU4sZ0JBQUFBLElBQ0csY0FBYztBQUM5QixxQ0FBSyxhQUFhLFNBQVM7QUFBQSxRQUM3QjtBQUNBLGVBQU87QUFDUCx1QkFBZSxNQUFNO0FBQUEsTUFDdkIsQ0FBQztBQUFBLElBQ0g7QUFLRSxXQUFPLFdBQVcsTUFBTSxHQUFHLFNBQVMsT0FBTSxHQUFHLFVBQVUsQ0FBRTtBQUN6RCxXQUFPLFdBQVcsTUFBTSxHQUFHLFNBQVMsT0FBTSxHQUFHLFVBQVUsQ0FBRTtBQUN6RCxXQUFPLFVBQVcsTUFBTSxHQUFHLFFBQVMsT0FBTSxHQUFHLFNBQVUsQ0FBRTtBQUN6RCxXQUFPLFVBQVcsTUFBTSxHQUFHLFFBQVMsT0FBTSxHQUFHLFNBQVUsQ0FBRTtBQUkzRCxRQUFJO0FBQUEsTUFBZSxTQUNqQixJQUFJLFFBQVEsT0FBTyxFQUNmLFdBQVcsUUFBUSxFQUNuQixRQUFRLFlBQVk7QUFDbkIsVUFBRSxhQUFhLE9BQU8sS0FBSyxDQUFDO0FBQzVCLGNBQU0sS0FBSyxPQUFPO0FBQ2xCLGFBQUssUUFBUTtBQUFBLE1BQ2YsQ0FBQztBQUFBLElBQ047QUFBQSxFQUVBO0FBQUE7QUFBQSxFQUdRLGFBQTBCO0FBQ2hDLFdBQU87QUFBQSxNQUNMLE1BQVM7QUFBQSxNQUNULFNBQVM7QUFBQSxNQUNULFNBQVM7QUFBQSxNQUNULFFBQVM7QUFBQSxNQUNULFFBQVM7QUFBQSxJQUNYO0FBQUEsRUFDRjtBQUFBO0FBQUEsRUFLUyxVQUFnQjtBQUN2QixVQUFNLElBQUksS0FBSztBQUNmLE1BQUUsTUFBTTtBQUNSLFVBQU0sSUFBSSxLQUFLLE9BQU87QUFDdEIsU0FBSyxZQUFZLEVBQUUsTUFBTTtBQUkzQixRQUFJLHdCQUFRLENBQUMsRUFDVixRQUFRLGlDQUFhLEVBQ3JCLFVBQVUsT0FDVCxFQUFFLFNBQVMsS0FBSyxPQUFPLFNBQVMsUUFBUSxFQUN0QyxTQUFTLE9BQU8sTUFBTTtBQUNwQixXQUFLLE9BQU8sU0FBUyxXQUFXO0FBQ2hDLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFDL0IsVUFBSSxTQUFTLENBQUM7QUFBQSxJQUNqQixDQUFDLENBQUM7QUFHUCxRQUFJLHdCQUFRLENBQUMsRUFDVixRQUFRLGNBQWMsRUFDdEIsUUFBUSx3RkFBd0YsRUFDaEc7QUFBQSxNQUFVLE9BQ1QsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUMxQixTQUFTLE9BQU0sTUFBSztBQUNuQixVQUFFLGtCQUFrQjtBQUNwQixjQUFNLEtBQUssT0FBTztBQUNsQixhQUFLLE9BQU8sMEJBQTBCO0FBQUEsTUFDeEMsQ0FBQztBQUFBLElBQ0o7QUFRRSxNQUFFLFNBQVMsTUFBTSxFQUFFLE1BQU0sOENBQWtDLENBQUM7QUFJaEUsTUFBRSxTQUFTLEtBQUs7QUFBQSxNQUNkLE1BQU07QUFBQSxNQUNOLEtBQU07QUFBQSxJQUNSLENBQUM7QUFHRyxTQUFLO0FBQUEsTUFDSDtBQUFBLE1BQUcsTUFBTTtBQUFBLE1BQ1QsTUFBTSxFQUFFLE9BQU8sTUFBTSxLQUFLO0FBQUEsTUFBTyxNQUFNLEVBQUUsT0FBTyxLQUFLLEtBQUs7QUFBQSxNQUMxRCxPQUFNLEVBQUUsT0FBTyxNQUFNLEtBQUssUUFBUTtBQUFBLE1BQUcsT0FBTSxFQUFFLE9BQU8sS0FBSyxLQUFLLFFBQVE7QUFBQSxJQUN4RTtBQUNBLFNBQUs7QUFBQSxNQUNIO0FBQUEsTUFBRyxNQUFNO0FBQUEsTUFDVCxNQUFNLEVBQUUsT0FBTyxNQUFNLEtBQUs7QUFBQSxNQUFPLE1BQU0sRUFBRSxPQUFPLEtBQUssS0FBSztBQUFBLE1BQzFELE9BQU0sRUFBRSxPQUFPLE1BQU0sS0FBSyxRQUFRO0FBQUEsTUFBRyxPQUFNLEVBQUUsT0FBTyxLQUFLLEtBQUssUUFBUTtBQUFBLElBQ3hFO0FBR0EsTUFBRSxTQUFTLE1BQU0sRUFBRSxNQUFNLHdCQUFtQixDQUFDO0FBQzdDLElBQUMsQ0FBQyxNQUFLLE1BQUssTUFBSyxNQUFLLE1BQUssSUFBSSxFQUFZO0FBQUEsTUFBUSxPQUNqRCxLQUFLO0FBQUEsUUFDSDtBQUFBLFFBQUcsTUFBTSxDQUFDO0FBQUEsUUFDVixNQUFNLEVBQUUsT0FBTyxNQUFNLFFBQVEsQ0FBQztBQUFBLFFBQUcsTUFBTSxFQUFFLE9BQU8sS0FBSyxRQUFRLENBQUM7QUFBQSxRQUM5RCxPQUFNLEVBQUUsT0FBTyxNQUFNLFFBQVEsQ0FBQyxJQUFJO0FBQUEsUUFBRyxPQUFNLEVBQUUsT0FBTyxLQUFLLFFBQVEsQ0FBQyxJQUFLO0FBQUEsTUFDekU7QUFBQSxJQUNGO0FBR0EsTUFBRSxTQUFTLE1BQU0sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN4QyxJQUFDLENBQUMsVUFBUyxVQUFVLEVBQVk7QUFBQSxNQUFRLE9BQ3ZDLEtBQUs7QUFBQSxRQUNIO0FBQUEsUUFBRyxNQUFNLENBQUM7QUFBQSxRQUNWLE1BQU0sRUFBRSxPQUFPLE1BQU0sS0FBSyxDQUFDO0FBQUEsUUFBRyxNQUFNLEVBQUUsT0FBTyxLQUFLLEtBQUssQ0FBQztBQUFBLFFBQ3hELE9BQU0sRUFBRSxPQUFPLE1BQU0sS0FBSyxDQUFDLElBQUk7QUFBQSxRQUFHLE9BQU0sRUFBRSxPQUFPLEtBQUssS0FBSyxDQUFDLElBQUs7QUFBQSxNQUNuRTtBQUFBLElBQ0Y7QUFFSixTQUFLO0FBQUEsTUFDSDtBQUFBLE1BQUc7QUFBQSxNQUNILE1BQU0sRUFBRSxPQUFPLE1BQU0sS0FBSztBQUFBLE1BQU8sTUFBTSxFQUFFLE9BQU8sS0FBSyxLQUFLO0FBQUEsTUFDMUQsT0FBTSxFQUFFLE9BQU8sTUFBTSxLQUFLLE9BQU87QUFBQSxNQUFHLE9BQUssRUFBRSxPQUFPLEtBQUssS0FBSyxPQUFPO0FBQUEsSUFDckU7QUFHQSxTQUFLO0FBQUEsTUFDSDtBQUFBLE1BQUc7QUFBQSxNQUNILE1BQU0sRUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLE1BQVMsTUFBTSxFQUFFLE9BQU8sS0FBSyxPQUFPO0FBQUEsTUFDaEUsT0FBTSxFQUFFLE9BQU8sTUFBTSxPQUFPLFNBQVM7QUFBQSxNQUFHLE9BQUssRUFBRSxPQUFPLEtBQUssT0FBTyxTQUFTO0FBQUEsSUFDN0U7QUFLQSxNQUFFLFNBQVMsTUFBTSxFQUFFLE1BQU0sMEJBQW1CLENBQUM7QUFHN0MsTUFBRSxhQUFhLFFBQVEsQ0FBQyxJQUFJLE1BQU0sS0FBSyxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBR25FLFFBQUksd0JBQVEsQ0FBQyxFQUNWLFVBQVUsU0FBTztBQUNoQixZQUFNLE9BQU8sRUFBRSxhQUFhLFVBQVU7QUFFdEMsVUFBSSxjQUFjLE9BQU8sa0JBQWtCLE9BQU8sRUFDOUMsWUFBWSxJQUFJLEVBQ2hCLE9BQU8sRUFDUCxXQUFXLE9BQ1IsMEJBQTBCLDJCQUMxQixtQkFBbUIsRUFDdEIsUUFBUSxZQUFZO0FBRW5CLFlBQUksRUFBRSxhQUFhLFVBQVU7QUFBZTtBQUU1QyxVQUFFLGFBQWEsS0FBSyxLQUFLLFdBQVcsQ0FBQztBQUNyQyxjQUFNLEtBQUssT0FBTztBQUNsQixhQUFLLFFBQVE7QUFBQSxNQUNmLENBQUM7QUFBQSxJQUNOLENBQUMsRUFDQSxRQUFRLG9DQUFxQixnQkFBZ0I7QUFBQSxFQUs5QztBQUNGOzs7QUV4VkEsSUFBQUMsbUJBQW9DOzs7QUNOcEMsSUFBQUMsbUJBQW9DOzs7QUNBN0IsSUFBTSxNQUFOLE1BQVU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFlZixPQUFPLEdBQ0wsS0FDQSxNQUFNLElBQ04sT0FBTyxJQUNtQjtBQUMxQixVQUFNLEtBQUssU0FBUyxjQUFjLEdBQUc7QUFDckMsUUFBSTtBQUFNLFNBQUcsWUFBZTtBQUM1QixRQUFJO0FBQU0sU0FBRyxjQUFlO0FBQzVCLFdBQU87QUFBQSxFQUNUO0FBQ0Y7OztBQ0lPLElBQU0sZ0JBQU4sTUFBb0I7QUFBQSxFQUN6QixZQUE2QixLQUFVO0FBQVY7QUFBQSxFQUFXO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU94QyxZQUErQjtBQUM3QixXQUFPLEtBQUssT0FBTztBQUFBLE1BQ2pCLE9BQVE7QUFBQSxNQUNSLEtBQVE7QUFBQSxNQUNSLFNBQVMsTUFBTTtBQUFBLE1BQThCO0FBQUEsSUFDL0MsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLE9BQU8sTUFBMEM7QUFDL0MsVUFBTSxNQUFNLElBQUksR0FBRyxVQUFVLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFHakQsUUFBSSxLQUFLLFVBQVU7QUFDakIsVUFBSSxVQUFVLElBQUksR0FBRyxLQUFLLGVBQWU7QUFDekMsVUFBSSxhQUFhLGlCQUFpQixNQUFNO0FBQ3hDLFVBQUksV0FBVztBQUNmLGFBQU87QUFBQSxJQUNUO0FBR0EsUUFBSSxVQUFVLEtBQUs7QUFDbkIsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVyxTQUFvQztBQUM3QyxXQUFPLEtBQUssT0FBTztBQUFBLE1BQ2pCLE9BQU87QUFBQSxNQUNQLEtBQU87QUFBQSxNQUNQLFNBQVMsWUFBWTtBQUVuQixZQUFJO0FBQ0YsZ0JBQU0sRUFBRSxNQUFNLElBQU8sT0FBZSxRQUFRLFVBQVU7QUFDdEQsZ0JBQU0sVUFBZSxPQUFlLFFBQVEsTUFBTTtBQUNsRCxnQkFBTSxZQUFlLEtBQUssSUFBSSxNQUFNLFFBQWdCO0FBQ3BELGdCQUFNLE1BQWMsUUFBUSxRQUFRLFdBQVcsT0FBTztBQUN0RCxnQkFBTSxTQUFjLFFBQVEsUUFBUSxHQUFHLE1BQU07QUFDN0MsbUJBQVMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLE1BQU0sU0FBUyxHQUFHO0FBQUEsUUFDM0QsU0FBUyxHQUFQO0FBQUEsUUFBb0M7QUFBQSxNQUN4QztBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBLEVBR0EsVUFBNkI7QUFDM0IsV0FBTyxLQUFLLE9BQU87QUFBQSxNQUNqQixPQUFRO0FBQUEsTUFDUixLQUFRO0FBQUEsTUFDUixTQUFTLE1BQ04sS0FBSyxJQUFZLFNBQVMsbUJBQW1CLHdCQUF3QjtBQUFBLElBQzFFLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQSxFQUdBLFFBQVEsV0FBbUQ7QUFDekQsV0FBTyxLQUFLLE9BQU87QUFBQSxNQUNqQixPQUFRO0FBQUEsTUFDUixLQUFRO0FBQUEsTUFDUixTQUFTO0FBQUEsSUFDWCxDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUEsRUFHQSxVQUFVLFFBQWdCLFVBQWtEO0FBQzFFLFdBQU8sS0FBSyxPQUFPO0FBQUEsTUFDakIsT0FBUztBQUFBLE1BQ1QsS0FBUztBQUFBLE1BQ1QsU0FBUztBQUFBLElBQ1gsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBLEVBR0EsT0FBTyxVQUFrQixVQUFrRDtBQUN6RSxXQUFPLEtBQUssT0FBTztBQUFBLE1BQ2pCLE9BQVM7QUFBQSxNQUNULEtBQVM7QUFBQSxNQUNULFNBQVM7QUFBQSxJQUNYLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQSxFQUdBLFdBQ0UsT0FDQSxVQUNBLFNBQ21CO0FBQ25CLFdBQU8sS0FBSyxPQUFPO0FBQUEsTUFDakI7QUFBQSxNQUNBLEtBQVU7QUFBQSxNQUNWO0FBQUEsTUFDQTtBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7QUFDRjs7O0FDMUZPLElBQU0sUUFBTixNQUFZO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJakIsT0FBTyxLQUFLLE9BQWlDLENBQUMsR0FBcUI7QUFyRXJFLFFBQUFDLEtBQUE7QUFzRUksVUFBTSxLQUFLLElBQUksR0FBRyxVQUFTQSxNQUFBLEtBQUssUUFBTCxPQUFBQSxNQUFZLEVBQUU7QUFDekMsT0FBRyxPQUFjO0FBQ2pCLE9BQUcsZUFBYyxVQUFLLGdCQUFMLFlBQW9CO0FBQ3JDLFFBQUksS0FBSyxTQUFTO0FBQU0sU0FBRyxRQUFRLE9BQU8sS0FBSyxLQUFLO0FBR3BELFFBQUksS0FBSztBQUNQLFNBQUcsaUJBQWlCLFdBQVcsUUFBTTtBQUNuQyxZQUFJLEdBQUcsUUFBUTtBQUFTLGVBQUssUUFBUyxHQUFHLE1BQU0sS0FBSyxDQUFDO0FBQUEsTUFDdkQsQ0FBQztBQUdILFFBQUksS0FBSztBQUNQLFNBQUcsaUJBQWlCLFVBQVUsTUFBTSxLQUFLLFNBQVUsR0FBRyxNQUFNLEtBQUssQ0FBQyxDQUFDO0FBRXJFLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLQSxPQUFPLE9BQ0wsT0FBb0QsQ0FBQyxHQUNuQztBQTdGdEIsUUFBQUE7QUE4RkksVUFBTSxLQUFLLElBQUksR0FBRyxVQUFTQSxNQUFBLEtBQUssUUFBTCxPQUFBQSxNQUFZLEVBQUU7QUFDekMsT0FBRyxPQUFRO0FBQ1gsUUFBSSxLQUFLLE9BQVE7QUFBTSxTQUFHLE1BQU8sT0FBTyxLQUFLLEdBQUc7QUFDaEQsUUFBSSxLQUFLLE9BQVE7QUFBTSxTQUFHLE1BQU8sT0FBTyxLQUFLLEdBQUc7QUFDaEQsUUFBSSxLQUFLLFFBQVE7QUFBTSxTQUFHLE9BQU8sT0FBTyxLQUFLLElBQUk7QUFDakQsUUFBSSxLQUFLLFNBQVM7QUFBTSxTQUFHLFFBQVEsT0FBTyxLQUFLLEtBQUs7QUFHcEQsUUFBSSxLQUFLO0FBQ1AsU0FBRztBQUFBLFFBQWlCO0FBQUEsUUFBVSxNQUM1QixLQUFLLFNBQVUsR0FBRyxVQUFVLEtBQUssTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQUEsTUFDekQ7QUFFRixXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsT0FBTyxLQUFLLE9BQXdDLENBQUMsR0FBcUI7QUFqSDVFLFFBQUFBO0FBa0hJLFVBQU0sS0FBSyxJQUFJLEdBQUcsVUFBU0EsTUFBQSxLQUFLLFFBQUwsT0FBQUEsTUFBWSxFQUFFO0FBQ3pDLE9BQUcsT0FBUTtBQUVYLFFBQUksS0FBSyxTQUFTLE1BQU07QUFDdEIsWUFBTSxNQUNKLEtBQUssaUJBQWlCLE9BQ2xCLEtBQUssTUFBTSxZQUFZLEVBQUUsTUFBTSxHQUFHLEVBQUUsSUFDcEMsT0FBTyxLQUFLLEtBQUs7QUFDdkIsU0FBRyxRQUFRO0FBQUEsSUFDYjtBQUdBLFFBQUksS0FBSztBQUNQLFNBQUc7QUFBQSxRQUFpQjtBQUFBLFFBQVUsTUFDNUIsS0FBSztBQUFBLFVBQ0gsR0FBRyxRQUFRLG9CQUFJLEtBQUssR0FBRyxHQUFHLGdCQUFnQixJQUFLO0FBQUEsUUFDakQ7QUFBQSxNQUNGO0FBRUYsV0FBTztBQUFBLEVBQ1Q7QUFDRjs7O0FDMUdPLElBQU0sVUFBTixNQUFjO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFuQixPQUFPLE9BQU8sUUFBUSxPQUFPLE1BQU0sSUFBb0I7QUFDckQsVUFBTSxVQUFVLElBQUksR0FBRyxPQUFPLGFBQWEsUUFBUSxvQkFBb0IsS0FBSyxNQUFNLE1BQU0sTUFBTSxJQUFJO0FBQ2xHLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLE9BQU8sVUFBMEI7QUFDL0IsV0FBTyxRQUFRLE9BQU87QUFBQSxFQUN4QjtBQUFBO0FBQUEsRUFHQSxPQUFPLE9BQXVCO0FBQzVCLFdBQU8sUUFBUSxPQUFPLElBQUk7QUFBQSxFQUM1QjtBQUNGOzs7QUN0REEsSUFBTSxZQUFZLENBQUM7QUFDbkIsU0FBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLEVBQUUsR0FBRztBQUMxQixZQUFVLE1BQU0sSUFBSSxLQUFPLFNBQVMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3BEO0FBQ08sU0FBUyxnQkFBZ0IsS0FBSyxTQUFTLEdBQUc7QUFDN0MsVUFBUSxVQUFVLElBQUksU0FBUyxDQUFDLENBQUMsSUFDN0IsVUFBVSxJQUFJLFNBQVMsQ0FBQyxDQUFDLElBQ3pCLFVBQVUsSUFBSSxTQUFTLENBQUMsQ0FBQyxJQUN6QixVQUFVLElBQUksU0FBUyxDQUFDLENBQUMsSUFDekIsTUFDQSxVQUFVLElBQUksU0FBUyxDQUFDLENBQUMsSUFDekIsVUFBVSxJQUFJLFNBQVMsQ0FBQyxDQUFDLElBQ3pCLE1BQ0EsVUFBVSxJQUFJLFNBQVMsQ0FBQyxDQUFDLElBQ3pCLFVBQVUsSUFBSSxTQUFTLENBQUMsQ0FBQyxJQUN6QixNQUNBLFVBQVUsSUFBSSxTQUFTLENBQUMsQ0FBQyxJQUN6QixVQUFVLElBQUksU0FBUyxDQUFDLENBQUMsSUFDekIsTUFDQSxVQUFVLElBQUksU0FBUyxFQUFFLENBQUMsSUFDMUIsVUFBVSxJQUFJLFNBQVMsRUFBRSxDQUFDLElBQzFCLFVBQVUsSUFBSSxTQUFTLEVBQUUsQ0FBQyxJQUMxQixVQUFVLElBQUksU0FBUyxFQUFFLENBQUMsSUFDMUIsVUFBVSxJQUFJLFNBQVMsRUFBRSxDQUFDLElBQzFCLFVBQVUsSUFBSSxTQUFTLEVBQUUsQ0FBQyxHQUFHLFlBQVk7QUFDakQ7OztBQzFCQSxJQUFJO0FBQ0osSUFBTSxRQUFRLElBQUksV0FBVyxFQUFFO0FBQ2hCLFNBQVIsTUFBdUI7QUFDMUIsTUFBSSxDQUFDLGlCQUFpQjtBQUNsQixRQUFJLE9BQU8sV0FBVyxlQUFlLENBQUMsT0FBTyxpQkFBaUI7QUFDMUQsWUFBTSxJQUFJLE1BQU0sMEdBQTBHO0FBQUEsSUFDOUg7QUFDQSxzQkFBa0IsT0FBTyxnQkFBZ0IsS0FBSyxNQUFNO0FBQUEsRUFDeEQ7QUFDQSxTQUFPLGdCQUFnQixLQUFLO0FBQ2hDOzs7QUNWQSxJQUFNLGFBQWEsT0FBTyxXQUFXLGVBQWUsT0FBTyxjQUFjLE9BQU8sV0FBVyxLQUFLLE1BQU07QUFDdEcsSUFBTyxpQkFBUSxFQUFFLFdBQVc7OztBQ0U1QixTQUFTLEdBQUcsU0FBUyxLQUFLLFFBQVE7QUFIbEMsTUFBQUMsS0FBQTtBQUlJLE1BQUksZUFBTyxjQUFjLENBQUMsT0FBTyxDQUFDLFNBQVM7QUFDdkMsV0FBTyxlQUFPLFdBQVc7QUFBQSxFQUM3QjtBQUNBLFlBQVUsV0FBVyxDQUFDO0FBQ3RCLFFBQU0sUUFBTyxtQkFBUSxXQUFSLGFBQWtCQSxNQUFBLFFBQVEsUUFBUixnQkFBQUEsSUFBQSxrQkFBbEIsWUFBcUMsSUFBSTtBQUN0RCxNQUFJLEtBQUssU0FBUyxJQUFJO0FBQ2xCLFVBQU0sSUFBSSxNQUFNLG1DQUFtQztBQUFBLEVBQ3ZEO0FBQ0EsT0FBSyxDQUFDLElBQUssS0FBSyxDQUFDLElBQUksS0FBUTtBQUM3QixPQUFLLENBQUMsSUFBSyxLQUFLLENBQUMsSUFBSSxLQUFRO0FBQzdCLE1BQUksS0FBSztBQUNMLGFBQVMsVUFBVTtBQUNuQixRQUFJLFNBQVMsS0FBSyxTQUFTLEtBQUssSUFBSSxRQUFRO0FBQ3hDLFlBQU0sSUFBSSxXQUFXLG1CQUFtQixVQUFVLFNBQVMsNEJBQTRCO0FBQUEsSUFDM0Y7QUFDQSxhQUFTLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxHQUFHO0FBQ3pCLFVBQUksU0FBUyxDQUFDLElBQUksS0FBSyxDQUFDO0FBQUEsSUFDNUI7QUFDQSxXQUFPO0FBQUEsRUFDWDtBQUNBLFNBQU8sZ0JBQWdCLElBQUk7QUFDL0I7QUFDQSxJQUFPLGFBQVE7OztBUitCUixJQUFNLFlBQU4sTUFBZ0I7QUFBQSxFQUtyQixZQUNtQixLQUNqQixNQUNpQixNQUNBLEtBQ0EsTUFDQSxJQUNBLE1BQ0EsUUFDQSxTQUVqQjtBQVZpQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR2pCLFNBQUssYUFBYSxJQUFJLGNBQWMsR0FBRztBQUd2QyxTQUFLLE9BQU8sSUFBSSxHQUFHLE9BQU8sZUFBZTtBQUN6QyxTQUFLLFFBQVEsS0FBSyxJQUFJO0FBR3RCLFFBQUksS0FBSztBQUE2QixXQUFLLHdCQUF3QjtBQUNuRSxRQUFJLEtBQUs7QUFBNkIsV0FBSyxlQUFlO0FBRzFELFFBQUksS0FBSztBQUE0QixXQUFLLGVBQWU7QUFHekQsU0FBSyxPQUFPLElBQUksR0FBRyxPQUFPLHNCQUFzQjtBQUNoRCxTQUFLLEtBQUssWUFBWSxLQUFLLElBQUk7QUFFL0IsUUFBSSxLQUFLLHdCQUF3QixLQUFLO0FBQ3BDLFdBQUssS0FBSyxZQUFZLEtBQUssV0FBVyxXQUFXLEtBQUssVUFBVSxDQUFDO0FBRXZFLFFBQUksS0FBSyxtQkFBbUI7QUFDMUIsWUFBTSxNQUFNLEtBQUssV0FBVyxRQUFRO0FBRXBDLFVBQUksVUFBVSxZQUFZO0FBakc1QixZQUFBQztBQW1HSSxjQUFNLGNBQ0pBLE1BQUEsS0FBSyxLQUFLLGVBQVYsT0FBQUEsTUFDQSxLQUFLLEtBQUssVUFBVSxHQUFHLEtBQUssS0FBSyxZQUFZLEdBQUcsQ0FBQztBQUduRCxZQUFJLFVBQVUsS0FBSyxJQUFJLE1BQU0sc0JBQXNCLFVBQVU7QUFDN0QsWUFBSSxFQUFFLG1CQUFtQiwyQkFBVTtBQUNqQyxnQkFBTSxLQUFLLElBQUksTUFBTSxhQUFhLFVBQVU7QUFDNUMsb0JBQVUsS0FBSyxJQUFJLE1BQU0sc0JBQXNCLFVBQVU7QUFBQSxRQUMzRDtBQUdBLGNBQU0sV0FBVyxZQUFZLE9BQU8sT0FBTyxFQUFFLE9BQU8sbUJBQW1CO0FBQ3ZFLGNBQU0sT0FBTyxNQUFPLEtBQUssSUFDdEIsWUFBWSxzQkFBc0IsU0FBUyxRQUFRO0FBR3RELGNBQU0sc0JBQXNCLEtBQUssS0FBSyxLQUFLLE1BQU0sSUFBSTtBQUFBLE1BQ3ZEO0FBRUEsV0FBSyxLQUFLLFlBQVksR0FBRztBQUFBLElBQzNCO0FBSUEsUUFBSSxLQUFLLHFCQUFxQjtBQUM1QixZQUFNLE1BQU0sS0FBSyxXQUFXLFVBQVU7QUFFdEMsVUFBSSxVQUFVLFlBQVk7QUEvSDVCLFlBQUFBO0FBZ0lJLFlBQUk7QUFFRixnQkFBTSxjQUNKQSxNQUFBLEtBQUssS0FBSyxlQUFWLE9BQUFBLE1BQ0EsS0FBSyxLQUFLLFVBQVUsR0FBRyxLQUFLLEtBQUssWUFBWSxHQUFHLENBQUM7QUFHbkQsY0FBSSxVQUFVLEtBQUssSUFBSSxNQUFNLHNCQUFzQixVQUFVO0FBQzdELGNBQUksRUFBRSxtQkFBbUIsMkJBQVU7QUFDakMsa0JBQU0sS0FBSyxJQUFJLE1BQU0sYUFBYSxVQUFVO0FBQzVDLHNCQUFVLEtBQUssSUFBSSxNQUFNLHNCQUFzQixVQUFVO0FBQUEsVUFDM0Q7QUFHQSxnQkFBTSxLQUFPLE9BQU8sT0FBTyxFQUFFLE9BQU8sbUJBQW1CO0FBQ3ZELGNBQUksT0FBUyxNQUFNLEtBQUssY0FBYyxZQUFZLElBQUk7QUFDdEQsY0FBSSxDQUFDO0FBQU07QUFDWCxjQUFJLENBQUMsS0FBSyxTQUFTLFNBQVM7QUFBRyxvQkFBUTtBQUN2QyxnQkFBTSxPQUFPLEdBQUcsY0FBYztBQUc5QixnQkFBTSxTQUFTLEtBQUssSUFBSSxNQUFNLHNCQUFzQixJQUFJO0FBQ3hELGNBQUksQ0FBQyxRQUFRO0FBQ1gsa0JBQU0sS0FBSyxrQkFBa0IsSUFBSTtBQUFBLFVBQ25DO0FBR0EsZ0JBQU0sc0JBQXNCLEtBQUssS0FBSyxNQUFNLElBQUk7QUFBQSxRQUVsRCxTQUFTLEdBQVA7QUFDQSxjQUFJLHdCQUFPLDRCQUE2QixFQUFZLFNBQVM7QUFDN0Qsa0JBQVEsTUFBTSxDQUFDO0FBQUEsUUFDakI7QUFBQSxNQUNGO0FBRUEsV0FBSyxLQUFLLFlBQVksR0FBRztBQUFBLElBQzNCO0FBR0ksUUFBSSxLQUFLO0FBQ1AsV0FBSyxLQUFLLFlBQVksS0FBSyxXQUFXLFFBQVEsWUFBWTtBQUV4RCxjQUFNLE1BQU8sTUFBTztBQUNwQixjQUFNLE9BQU8sSUFBSTtBQUNqQixZQUFJLGdCQUFnQixRQUFRLEtBQUssQ0FBQztBQUNsQyxZQUFJO0FBQUUsZ0JBQU0sS0FBSyxHQUFHLFNBQVM7QUFBQSxRQUFHLFVBQ2hDO0FBQVUsY0FBSSxjQUFjLHNCQUFRO0FBQUEsUUFBSztBQUFBLE1BQzNDLENBQUMsQ0FBQztBQUFBLEVBQ047QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLGlCQUF1QjtBQUU3QixVQUFNLE1BQU0sYUFBYSxLQUFLO0FBQzlCLFVBQU0sTUFBTyxLQUFLLEdBQUcsU0FBaUIsS0FBSyxNQUFNLEtBQUssS0FBSyxHQUFHLEtBQUs7QUFFbkUsVUFBTSxNQUFNLEtBQUssV0FBVyxVQUFVLFFBQVEsUUFBUSxVQUFVLEtBQUssWUFBWTtBQUMvRSxVQUFJLENBQUMsS0FBSztBQUFTO0FBQ25CLFlBQU0sU0FBUyxNQUFNLEtBQUssR0FBRyxVQUFVLEtBQUssT0FBTztBQUNuRCxVQUFJLFVBQVU7QUFBTTtBQUNwQixXQUFLLEdBQUcsS0FBSyxLQUFLLE1BQU0sS0FBSyxLQUFLLEtBQUssTUFBTTtBQUFBLElBQy9DLENBQUM7QUFHSCxRQUFJLFFBQVE7QUFBTyxVQUFJLFVBQVUsSUFBSSxXQUFXO0FBRTlDLFNBQUssS0FBSyxZQUFZLEdBQUc7QUFBQSxFQUMzQjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsMEJBQWdDO0FBQ3RDLFNBQUssT0FBTyxRQUFRLENBQUMsRUFBRSxNQUFNLE1BQU0sT0FBTyxNQUFNO0FBQzlDLFlBQU0sTUFBTSxVQUFVLEtBQUssT0FBTztBQUNsQyxZQUFNLE1BQU8sS0FBSyxHQUFHLFNBQWlCLEtBQUssTUFBTSxLQUFLLEtBQUssR0FBRyxLQUFLO0FBQ25FLFlBQU0sT0FBTyxRQUFRO0FBQ3JCLFlBQU0sUUFBUSxRQUFRLFFBQVEsT0FBTyxHQUFHLFNBQVM7QUFFakQsWUFBTSxNQUFNLEtBQUssV0FBVyxPQUFPLE9BQU8sWUFBWTtBQUNwRCxjQUFNLFNBQVMsTUFBTSxLQUFLLEdBQUcsVUFBVSxNQUFNO0FBQzdDLFlBQUksVUFBVTtBQUFNO0FBQ3BCLGFBQUssR0FBRyxLQUFLLEtBQUssTUFBTSxLQUFLLEtBQUssS0FBSyxNQUFNO0FBQUEsTUFDL0MsQ0FBQztBQUdQLFVBQUksUUFBUTtBQUFPLFlBQUksVUFBVSxJQUFJLFdBQVc7QUFFMUMsV0FBSyxLQUFLLFlBQVksR0FBRztBQUFBLElBQzNCLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFFUSxrQkFBa0IsTUFBd0I7QUE5TnBELFFBQUFBLEtBQUE7QUErTkksVUFBTSxTQUFlLE1BQUFBLE1BQUEsS0FBSyxHQUFHLGNBQWMsS0FBSyxNQUFNLEtBQUssR0FBRyxNQUF6QyxnQkFBQUEsSUFBNEMsVUFBNUMsWUFBcUQsQ0FBQztBQUMzRSxVQUFNLE1BQU0sb0JBQUksSUFBWTtBQUM1QixVQUFNLFFBQVEsUUFBTTtBQUNsQixZQUFNLE1BQU0sS0FBSyxHQUFHLE9BQU8sSUFBSSxJQUFJO0FBQ25DLFlBQU0sSUFBSSxLQUFLLEdBQUcsYUFBYSxHQUFHLEtBQUssT0FBTyxvQkFBTyxHQUFHO0FBQ3hELFVBQUksSUFBSSxDQUFDO0FBQUEsSUFDWCxDQUFDO0FBQ0QsV0FBTyxNQUFNLEtBQUssR0FBRyxFQUFFLE9BQU8sT0FBRyxNQUFJLEdBQUcsRUFBRSxLQUFLO0FBQUEsRUFDakQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLGlCQUF1QjtBQUM3QixVQUFNLFdBQVcsZ0JBQWdCLEtBQUs7QUFDdEMsVUFBTSxXQUFXLFVBQVUsS0FBSztBQUNoQyxVQUFNLE9BQVksS0FBSyxHQUFHLFNBQWlCLEtBQUssTUFBTSxLQUFLLEtBQUssUUFBUSxLQUFLO0FBRTdFLFVBQU0sUUFBUSxNQUFNLEtBQUs7QUFBQSxNQUN2QixLQUFLO0FBQUEsTUFDTCxhQUFhO0FBQUEsTUFDYixPQUFPO0FBQUEsTUFDUCxTQUFTLE9BQUs7QUFDWixhQUFLLEdBQUcsS0FBSyxLQUFLLE1BQU0sS0FBSyxLQUFLLFVBQVUsSUFBSTtBQUNoRCxhQUFLLEdBQUcsS0FBSyxLQUFLLE1BQU0sS0FBSyxLQUFLLFVBQVUsQ0FBQztBQUFBLE1BQy9DO0FBQUEsSUFDRixDQUFDO0FBRUQsU0FBSyxLQUFLLFlBQVksS0FBSztBQUFBLEVBQzdCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1GLE1BQWMsa0JBQWtCLE1BQTZCO0FBQzNELFVBQU0sUUFBUSxLQUFLO0FBQUEsTUFDakIsRUFBRSxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxTQUFTLFNBQVMsSUFBSSxXQUFLLEVBQUU7QUFBQSxNQUNyRDtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQ0EsVUFBTSxLQUFLLElBQUksTUFBTSxPQUFPLE1BQU0sS0FBSztBQUFBLEVBQ3pDO0FBQUEsRUFFQSxNQUFjLGNBQWMsS0FBcUM7QUFDL0QsV0FBTyxJQUFJLFFBQVEsQ0FBQyxZQUFZO0FBQzlCLFlBQU0sRUFBRSxPQUFBQyxPQUFNLElBQUssV0FBbUIsV0FBVztBQUNqRCxZQUFNLGtCQUFrQkEsT0FBTTtBQUFBLFFBRzVCLFlBQVksS0FBVTtBQUFFLGdCQUFNLEdBQUc7QUFGakMsdUJBQVE7QUFDUiwwQkFBVztBQUFBLFFBQ3lCO0FBQUEsUUFDcEMsU0FBUztBQUNQLGdCQUFNLEVBQUUsVUFBVSxJQUFJO0FBQ3RCLG9CQUFVLFNBQVMsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDcEQsZ0JBQU0sUUFBUSxVQUFVLFNBQVMsU0FBUyxFQUFFLE9BQU8sS0FBSyxNQUFNLENBQUM7QUFDL0QsZ0JBQU0sTUFBTSxRQUFRO0FBQ3BCLGdCQUFNLE1BQU07QUFDWixnQkFBTSxTQUFTLE1BQU07QUFDbkIsaUJBQUssUUFBUSxNQUFNLE1BQU0sS0FBSztBQUM5QixpQkFBSyxXQUFXO0FBQ2hCLGlCQUFLLE1BQU07QUFBQSxVQUNiO0FBQ0EsZ0JBQU0saUJBQWlCLFdBQVcsQ0FBQyxPQUFzQjtBQUN2RCxnQkFBSSxHQUFHLFFBQVE7QUFBUyxxQkFBTztBQUFBLFVBQ2pDLENBQUM7QUFDRCxnQkFBTSxLQUFLLFVBQVUsU0FBUyxVQUFVLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFDdEQsYUFBRyxVQUFVO0FBQUEsUUFDZjtBQUFBLFFBQ0EsVUFBVTtBQUNSLGVBQUssVUFBVSxNQUFNO0FBQ3JCLGtCQUFRLEtBQUssV0FBVyxLQUFLLFFBQVEsSUFBSTtBQUFBLFFBQzNDO0FBQUEsTUFDRjtBQUNBLFVBQUksVUFBVSxLQUFLLEdBQUcsRUFBRSxLQUFLO0FBQUEsSUFDL0IsQ0FBQztBQUFBLEVBQ0g7QUFJQTs7O0FTL1FPLElBQU0sYUFBTixNQUFpQjtBQUFBLEVBS3RCLFlBQ21CLE1BQ0EsS0FDQSxJQUNqQixNQUNBLE1BQ0E7QUFMaUI7QUFDQTtBQUNBO0FBdkNyQixRQUFBQztBQTJDSSxTQUFLLGFBQWEsSUFBSSxjQUFjLEVBQVM7QUFHN0MsVUFBTSxNQUFNLEtBQUssSUFBSSxLQUFLLFNBQVMsQ0FBQztBQUNwQyxTQUFLLGFBQWEsS0FBSyxLQUFLLEtBQUssWUFBWSxHQUFHO0FBQ2hELFFBQUksS0FBSyxjQUFjLEdBQUc7QUFDeEIsV0FBSyxPQUFPLElBQUksR0FBRyxLQUFLO0FBQ3hCO0FBQUEsSUFDRjtBQUVBLFNBQUssT0FBTyxJQUFJLEdBQUcsT0FBTyxlQUFlO0FBQ3pDLFNBQUssWUFBWSxLQUFLLElBQUk7QUFFMUIsU0FBSyxRQUFPQSxNQUFBLEtBQUssZUFBTCxPQUFBQSxNQUFtQixDQUFDO0FBQUEsRUFDbEM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtRLE9BQU8sUUFBc0I7QUE5RHZDLFFBQUFBO0FBK0RJLFNBQUssS0FBSyxNQUFNO0FBRWhCLFVBQU0sTUFBUSxjQUFjLEtBQUs7QUFDakMsVUFBTSxPQUFTQSxNQUFBLEtBQUssR0FBRyxTQUFpQixLQUFLLE1BQU0sS0FBSyxLQUFLLEdBQUcsTUFBakQsT0FBQUEsTUFBc0Q7QUFHckUsVUFBTSxNQUFNLENBQUMsS0FBYSxJQUFZLFdBQVcsVUFBVTtBQUN6RCxZQUFNLE1BQU0sS0FBSyxXQUFXLFdBQVcsS0FBSyxVQUFVLE1BQU07QUFDMUQsYUFBSyxHQUFHLEtBQUssS0FBSyxNQUFNLEtBQUssS0FBSyxLQUFLLEVBQUU7QUFBQSxNQUMzQyxDQUFDO0FBR0wsVUFBSSxVQUFVLElBQUssUUFBUSxZQUFPLFFBQVEsV0FDdEMsNkNBQ0Esd0NBQXlDO0FBRTNDLFVBQUk7QUFBVSxZQUFJLFVBQVUsSUFBSSxXQUFXO0FBQ3pDLFdBQUssS0FBSyxZQUFZLEdBQUc7QUFBQSxJQUMzQjtBQUdBLFFBQUksVUFBSyxNQUFNLEdBQUcsUUFBUSxDQUFDO0FBRzNCLFVBQU0sTUFBTSxLQUFLLElBQUksR0FBRyxNQUFNO0FBQzlCLFFBQUksUUFBUSxLQUFLLElBQUksR0FBRyxNQUFNLEtBQUssTUFBTSxNQUFNLENBQUMsQ0FBQztBQUNqRCxRQUFJLE1BQVEsUUFBUSxNQUFNO0FBQzFCLFFBQUksT0FBTyxLQUFLLFlBQVk7QUFDMUIsWUFBUSxLQUFLLGFBQWE7QUFDMUIsY0FBUSxLQUFLLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQztBQUFBLElBQ25DO0FBRUEsUUFBSSxRQUFRO0FBQUcsVUFBSSxLQUFLLENBQUM7QUFDekIsUUFBSSxRQUFRO0FBQUcsV0FBSyxLQUFLLFlBQVksSUFBSSxHQUFHLFFBQVEsMkJBQTJCLFFBQUcsQ0FBQztBQUVuRixhQUFTLElBQUksT0FBTyxLQUFLLEtBQUssS0FBSztBQUNqQyxVQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLEdBQUc7QUFBQSxJQUNqQztBQUVBLFFBQUksTUFBTSxLQUFLLGFBQWE7QUFBRyxXQUFLLEtBQUssWUFBWSxJQUFJLEdBQUcsUUFBUSwyQkFBMkIsUUFBRyxDQUFDO0FBQ25HLFFBQUksTUFBTSxLQUFLLGFBQWE7QUFBRyxVQUFJLE9BQU8sS0FBSyxVQUFVLEdBQUcsS0FBSyxhQUFhLENBQUM7QUFHL0UsUUFBSSxVQUFLLE1BQU0sR0FBRyxPQUFPLEtBQUssYUFBYSxDQUFDO0FBQUEsRUFDOUM7QUFDRjs7O0FDL0ZPLFNBQVMsY0FBYyxLQUFvQjtBQUNoRCxRQUFNLE1BQ0YsT0FBTyxPQUFtQixDQUFDLElBQzNCLE1BQU0sUUFBUSxHQUFHLElBQVMsTUFDMUIsZUFBZSxNQUFXLENBQUMsR0FBRyxHQUFHLElBQ2pDLE9BQU8sUUFBUSxXQUFXLElBQUksTUFBTSxNQUFNLEVBQUUsT0FBTyxPQUFPLElBQ2hDLENBQUM7QUFFL0IsU0FBTyxJQUNKLElBQUksUUFBTSxnQkFBSyxJQUFJLEtBQUssQ0FBQyxFQUN6QixPQUFPLE9BQU8sRUFDZCxJQUFJLE9BQUssRUFBRSxXQUFXLEdBQUcsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDaEQ7OztBQ2dDQSxTQUFTLElBQUksR0FBUztBQUFDLFNBQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxHQUFFLEdBQUc7QUFBRTtBQUMzRCxTQUFTLFFBQVEsR0FBTztBQUFDLFNBQU8sR0FBRyxFQUFFLFlBQVksS0FBSyxJQUFJLEVBQUUsU0FBUyxJQUFFLENBQUMsS0FBSyxJQUFJLEVBQUUsUUFBUSxDQUFDO0FBQUk7QUFFaEcsU0FBUyxXQUFXLEtBQXNCO0FBQ3hDLFFBQU0sT0FBTyxJQUFJLEdBQUcsUUFBUSxFQUFFO0FBQzlCLFFBQU0sT0FBTyxjQUFjLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRSxNQUFJLEVBQUUsY0FBYyxHQUFFLElBQUksQ0FBQztBQUNuRSxPQUFLLFFBQVEsQ0FBQyxHQUFHLE1BQU07QUFDckIsVUFBTSxPQUFPLElBQUksR0FBRyxRQUFRLFVBQVUsQ0FBQztBQUN2QyxVQUFNLFNBQVMsRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQzdCLFNBQUssVUFBVSxJQUFJLFdBQVcsUUFBUTtBQUN0QyxTQUFLLFlBQVksSUFBSTtBQUNyQixRQUFJLElBQUksS0FBSyxTQUFTO0FBQUcsV0FBSyxZQUFZLFNBQVMsZUFBZSxJQUFJLENBQUM7QUFBQSxFQUN6RSxDQUFDO0FBQ0QsU0FBTztBQUNUO0FBRUEsU0FBUyxlQUFlLEtBQVMsS0FBbUM7QUF6RXBFLE1BQUFDO0FBMEVFLE1BQUksT0FBTztBQUFNLFdBQU87QUFFeEIsVUFBTyxLQUFJO0FBQUEsSUFDVCxLQUFLO0FBQVMsYUFBTyxPQUFPLEdBQUc7QUFBQSxJQUMvQixLQUFLLFFBQVE7QUFDWCxZQUFNLEtBQUlBLE1BQUEsT0FBTyxHQUFHLEVBQUUsTUFBTSxPQUFPLE1BQXpCLGdCQUFBQSxJQUE2QjtBQUN2QyxhQUFPLGdCQUFLLE9BQU8sR0FBRztBQUFBLElBQ3hCO0FBQUEsSUFDQSxLQUFLLFFBQVE7QUFDWCxZQUFNLElBQUksSUFBSSxLQUFLLEdBQUc7QUFDdEIsYUFBTyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksUUFBUSxDQUFDO0FBQUEsSUFDckQ7QUFBQSxJQUNBLEtBQUssUUFBUTtBQUNmLGFBQU8sV0FBVyxHQUFHO0FBQUEsSUFDbkI7QUFBQSxJQUNBO0FBQ0UsYUFBTyxPQUFPLEdBQUc7QUFBQSxFQUNyQjtBQUNGO0FBRUEsU0FBUyxPQUFPLEtBQVUsTUFBbUI7QUFDM0MsU0FBTyxLQUFLLFdBQVcsT0FBTyxJQUMxQixLQUFLLE1BQU0sR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLE1BQU0sdUJBQUksSUFBSSxHQUFHLElBQzVDLElBQUksSUFBSTtBQUNkO0FBZU8sSUFBTSxZQUFOLE1BQWdCO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJckIsT0FBTyxNQUFNLE1BQTBDO0FBQ3JELFVBQU0sUUFBUSxJQUFJLEdBQUcsU0FBUyxlQUFlO0FBQzdDLFFBQUksS0FBSztBQUFPLFlBQU0sVUFBVSxJQUFJLHNCQUFzQjtBQUcxRCxVQUFNLFFBQVEsSUFBSSxHQUFHLFNBQVMsRUFBRTtBQUNoQyxVQUFNLFNBQVMsSUFBSSxHQUFHLE1BQU0sRUFBRTtBQUk5QixTQUFLLFFBQVEsT0FBTyxPQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsU0FBTztBQUNoRCxZQUFNLEtBQUssSUFBSSxHQUFHLE1BQU0scUJBQXFCLElBQUksSUFBSTtBQUdyRCxZQUFNLFVBQVUsS0FBSyxHQUFHLFNBQVMsS0FBSyxVQUFVLEtBQUssUUFBUSxRQUFRLEtBQUssUUFBUTtBQUNsRixZQUFNLFNBQVUsS0FBSyxHQUFHLFNBQVMsS0FBSyxVQUFVLEtBQUssUUFBUSxrQkFBa0IsS0FBSyxRQUFRO0FBQzVGLFVBQUksSUFBSSxTQUFTLFNBQVM7QUFDeEIsWUFBSSxXQUFXO0FBQVEsYUFBRyxVQUFVLElBQUksUUFBUTtBQUNoRCxZQUFJLFdBQVc7QUFBUSxhQUFHLFVBQVUsSUFBSSxTQUFTO0FBQUEsTUFDbkQ7QUFHQSxTQUFHLGlCQUFpQixTQUFTLE1BQU07QUFHbkMsZUFBTyxpQkFBaUIsb0JBQW9CLEVBQ3JDLFFBQVEsUUFBTSxHQUFHLFVBQVUsT0FBTyxVQUFTLFNBQVMsQ0FBQztBQU1oRSxjQUFNLFVBQVUsUUFBUSxLQUFLO0FBQzdCLGNBQU0sU0FBVSxrQkFBa0IsS0FBSztBQUV2QyxjQUFNQyxXQUFVLEtBQUssR0FBRyxTQUFTLEtBQUssVUFBVSxLQUFLLFFBQVEsT0FBTztBQUNwRSxjQUFNQyxVQUFVLEtBQUssR0FBRyxTQUFTLEtBQUssVUFBVSxLQUFLLFFBQVEsTUFBTTtBQUdyRSxZQUFJLFdBQTBCO0FBQzlCLFlBQUksVUFBa0M7QUFFdEMsY0FBTSxZQUFZRCxZQUFXQztBQUU3QixZQUFJLElBQUksU0FBU0QsVUFBUztBQUN4QixjQUFJLFdBQVc7QUFDYix1QkFBVztBQUNYLHNCQUFXO0FBQUEsVUFDYixPQUFPO0FBQ0wsdUJBQVcsSUFBSTtBQUNmLHNCQUFXO0FBQUEsVUFDYjtBQUFBLFFBQ0YsT0FBTztBQUNMLGNBQUlDLFlBQVcsTUFBYTtBQUFFLHVCQUFXLElBQUk7QUFBTSxzQkFBVTtBQUFBLFVBQVEsV0FDNURBLFlBQVcsT0FBUTtBQUFFLHVCQUFXLElBQUk7QUFBTSxzQkFBVTtBQUFBLFVBQVEsT0FDekM7QUFBRSx1QkFBVztBQUFVLHNCQUFVO0FBQUEsVUFBUTtBQUFBLFFBQ3ZFO0FBSUUsWUFBSSxZQUFZO0FBQVEsYUFBRyxVQUFVLElBQUksUUFBUTtBQUNqRCxZQUFJLFlBQVk7QUFBUSxhQUFHLFVBQVUsSUFBSSxTQUFTO0FBR2xELGFBQUssR0FBRyxLQUFLLEtBQUssVUFBVSxLQUFLLFFBQVEsU0FBUyxRQUFRO0FBQzFELGFBQUssR0FBRyxLQUFLLEtBQUssVUFBVSxLQUFLLFFBQVEsUUFBUyxPQUFPO0FBQUEsTUFDM0QsQ0FBQztBQUNLLGFBQU8sWUFBWSxFQUFFO0FBQUEsSUFDdkIsQ0FBQztBQUVELFVBQU0sWUFBWSxNQUFNO0FBQ3hCLFVBQU0sWUFBWSxLQUFLO0FBR3ZCLFVBQU0sUUFBUSxJQUFJLEdBQUcsU0FBUyxFQUFFO0FBQ2hDLFNBQUssS0FBSyxRQUFRLENBQUMsS0FBSyxXQUFXO0FBaE12QyxVQUFBQyxLQUFBO0FBaU1NLFlBQU0sS0FBSyxJQUFJLEdBQUcsTUFBTSxtQkFBbUI7QUFDM0MsU0FBRyxRQUFRLFFBQU8sTUFBQUEsTUFBQSwyQkFBSyxTQUFMLGdCQUFBQSxJQUFXLFNBQVgsWUFBbUI7QUFHM0MsU0FBRyxVQUFVLE1BQU07QUFDakIsY0FBTSxXQUFXLEdBQUcsVUFBVSxTQUFTLGdCQUFnQjtBQUd2RCxZQUFJLFVBQVU7QUFDWixhQUFHLFVBQVUsT0FBTyxnQkFBZ0I7QUFDcEM7QUFBQSxRQUNGO0FBR0EsY0FBTSxPQUFPLE1BQU0sY0FBYyxpQkFBaUI7QUFDbEQsWUFBSTtBQUFNLGVBQUssVUFBVSxPQUFPLGdCQUFnQjtBQUNoRCxXQUFHLFVBQVUsSUFBSSxnQkFBZ0I7QUFBQSxNQUNuQztBQUlNLFdBQUssUUFBUSxPQUFPLE9BQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxTQUFPO0FBQ2hELGNBQU0sS0FBSyxJQUFJLEdBQUcsTUFBTSxtQkFBbUI7QUFDM0MsWUFBSTtBQUVKLFlBQUksS0FBSyxjQUFjO0FBQ3JCLG9CQUFVLEtBQUssYUFBYSxLQUFLLEdBQUc7QUFBQSxRQUN0QyxPQUFPO0FBQ0wsZ0JBQU0sTUFBTSxPQUFPLEtBQUssSUFBSSxJQUFJO0FBQ2hDLGNBQUksSUFBSSxTQUFTLG9CQUFvQixPQUFPLEdBQUcsTUFBTSxVQUFVO0FBQzdELGtCQUFNLE9BQU8sSUFBSSxHQUFHLFFBQVEsa0JBQWtCLFFBQVE7QUFDdEQsc0JBQVU7QUFBQSxVQUNaLE9BQU87QUFDTCxzQkFBVSxlQUFlLEtBQUssSUFBSSxNQUFNO0FBQUEsVUFDMUM7QUFBQSxRQUNGO0FBRUEsWUFBSSxtQkFBbUI7QUFBYSxhQUFHLFlBQVksT0FBTztBQUFBO0FBQ3JELGFBQUcsY0FBYztBQUV0QixXQUFHLFlBQVksRUFBRTtBQUFBLE1BQ25CLENBQUM7QUFFRCxZQUFNLFlBQVksRUFBRTtBQUFBLElBQ3RCLENBQUM7QUFDRCxVQUFNLFlBQVksS0FBSztBQUV2QixXQUFPO0FBQUEsRUFDVDtBQUNGOzs7QVo3TUEsZUFBZSxrQkFBa0IsS0FBVSxNQUE2QjtBQUN0RSxNQUFJLENBQUM7QUFBTTtBQUNYLFFBQU0sT0FBTyxJQUFJLE1BQU0sc0JBQXNCLElBQUk7QUFDakQsTUFBSSxFQUFFLGdCQUFnQjtBQUFRO0FBQzlCLFFBQU0sT0FBTyxJQUFJLFVBQVUsUUFBUSxJQUFJO0FBQ3ZDLFFBQU0sS0FBSyxTQUFTLElBQUk7QUFDeEIsTUFBSSxVQUFVLGNBQWMsSUFBSTtBQUNsQztBQUtBLGVBQXNCLHNCQUNwQixLQUNBLFVBQ0EsV0FDQTtBQXJERixNQUFBQztBQXNERSxRQUFNLE9BQU1BLE1BQUEsSUFBSSxjQUFjLHFCQUFxQixVQUFVLEVBQUUsTUFBbkQsT0FBQUEsTUFDQSxJQUFJLE1BQU0sc0JBQXNCLFFBQVE7QUFDcEQsTUFBSSxFQUFFLGVBQWU7QUFBUTtBQUc3QixRQUFNLE9BQU8sSUFBSSxVQUFVLFFBQVEsSUFBSTtBQUN2QyxRQUFNLEtBQUssU0FBUyxHQUFHO0FBQ3ZCLE1BQUksVUFBVSxjQUFjLElBQUk7QUFDbEM7QUFvRE8sSUFBTSxZQUFOLE1BQWdCO0FBQUEsRUFJckIsWUFBWSxLQUFVLFdBQTZCO0FBQ2pELFNBQUssTUFBTTtBQUNYLFNBQUssS0FBTTtBQUFBLEVBQ2I7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLE1BQU0sVUFDSixTQUNBLFVBQ0EsUUFDQSxNQUNBLFNBQ0EsU0FDQSxXQUNBLE1BRUEsU0FBMkIsQ0FBQyxHQUM1QixVQUE2QixNQUM3QixLQUF1QixLQUFLLElBQ2I7QUFFZixZQUFRLE1BQU07QUFDZCxZQUFRLFVBQVUsSUFBSSxpQkFBaUI7QUFHdkMsVUFBTSxTQUEyQjtBQUFBLE1BQy9CLHNCQUE4QixLQUFLO0FBQUEsTUFDbkMsbUJBQThCLEtBQUs7QUFBQSxNQUNuQyxxQkFBOEIsS0FBSztBQUFBO0FBQUEsTUFDbkMscUJBQThCLEtBQUs7QUFBQSxNQUNuQyw2QkFBOEIsS0FBSztBQUFBLE1BQ25DLGVBQThCLEtBQUs7QUFBQSxNQUNuQyxtQkFBOEIsS0FBSztBQUFBLE1BQ25DLFlBQThCLEtBQUs7QUFBQSxJQUNyQztBQUNBLFFBQUk7QUFBQSxNQUNGLEtBQUs7QUFBQSxNQUNMO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFJSixVQUFNLFFBQVEsVUFBVSxNQUFNO0FBQUEsTUFDNUI7QUFBQSxNQUNBO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDVCxZQUFZLENBQUMsUUFBUTtBQTdLckIsWUFBQUE7QUE4S0UsY0FBTSxRQUFPQSxNQUFBLDJCQUFLLFNBQUwsZ0JBQUFBLElBQVc7QUFDeEIsWUFBSSxDQUFDO0FBQU07QUFHWCw4QkFBc0IsS0FBSyxLQUFLLE1BQU0sT0FBTztBQUFBLE1BQy9DO0FBQUEsTUFDRTtBQUFBLE1BQ0E7QUFBQSxNQUNBLElBQUk7QUFBQSxRQUNGLFVBQVUsR0FBRztBQUFBLFFBQ2IsTUFBVSxHQUFHO0FBQUEsTUFDZjtBQUFBLElBQ0YsQ0FBQztBQUNELFlBQVEsWUFBWSxLQUFLO0FBSXpCLFVBQU07QUFBQSxNQUNKO0FBQUEsTUFDQSxPQUFPLE1BQU07QUFqTWYsWUFBQUEsS0FBQTtBQWtNSSxjQUFNLEtBQUssRUFBRTtBQUNiLFlBQUksR0FBRyxRQUFRLGlCQUFpQjtBQUFHO0FBRW5DLGNBQU0sUUFBT0EsTUFBQSxHQUFHLFFBQTJCLEdBQUcsTUFBakMsZ0JBQUFBLElBQW9DLGFBQWE7QUFDOUQsY0FBTSxNQUFPLEdBQUcsUUFBNkIsSUFBSTtBQUNqRCxjQUFNLFFBQU8sMkJBQVEsMkJBQUssUUFBUSxTQUFyQixZQUE2QjtBQUMxQyxZQUFJLENBQUM7QUFBTTtBQUVYLGNBQU0sVUFDSixVQUFLLElBQUksY0FBYyxxQkFBcUIsTUFBTSxFQUFFLE1BQXBELFlBQ0EsS0FBSyxJQUFJLE1BQU0sc0JBQXNCLElBQUk7QUFDM0MsWUFBSSxFQUFFLGtCQUFrQjtBQUFRO0FBQ2hDLGNBQU0sTUFBTSxPQUFPLFVBQVUsWUFBWTtBQUN6QyxZQUFJLENBQUMsQ0FBQyxNQUFNLE9BQU8sUUFBUSxFQUFFLFNBQVMsR0FBRztBQUFHO0FBRTVDLFVBQUUsZUFBZTtBQUNqQixjQUFNLGtCQUFrQixLQUFLLEtBQUssT0FBTyxJQUFJO0FBQUEsTUFDL0M7QUFBQSxNQUNBO0FBQUE7QUFBQSxJQUNGO0FBTUksUUFBSSxVQUFVLEdBQUc7QUFDZixZQUFNLFNBQTRCO0FBQUEsUUFDaEM7QUFBQSxRQUNBO0FBQUEsTUFDRjtBQUNBLFVBQUksV0FBVyxVQUFVLFFBQVEsSUFBSSxTQUFTLE1BQU07QUFBQSxJQUN0RDtBQUFBLEVBR0Y7QUFDRjs7O0FhL05BLElBQUFDLG1CQUtPO0FBa0JQLElBQXFCLGtCQUFyQixNQUFxQztBQUFBLEVBS25DLFlBQTZCLEtBQVU7QUFBVjtBQUg3QjtBQUFBLFNBQWlCLGVBQWU7QUFDaEMsU0FBaUIsY0FBZTtBQUFBLEVBRVE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVd4QyxNQUFNLFNBQVMsTUFBc0M7QUE3Q3ZELFFBQUFDLEtBQUE7QUE4Q0ksVUFBTSxPQUFPLEtBQUssSUFBSSxNQUFNLDBCQUFzQixnQ0FBYyxLQUFLLElBQUksQ0FBQztBQUMxRSxRQUFJLEVBQUUsZ0JBQWdCO0FBQVE7QUFHOUIsUUFBSSxLQUFLLFNBQVMsYUFBYTtBQUM3QixZQUFNLFVBQVUsS0FBSztBQUNyQixZQUFNLE9BQU8sTUFBTSxLQUFLLFVBQVUsT0FBTztBQUN6QyxVQUFJLENBQUMsUUFBUSxTQUFTO0FBQVM7QUFFL0IsWUFBTSxVQUFTLE1BQUFBLE1BQUEsS0FBSyxXQUFMLGdCQUFBQSxJQUFhLFNBQWIsWUFBcUI7QUFDcEMsWUFBTSxNQUFTLEtBQUs7QUFDcEIsWUFBTSxPQUFTLFNBQVMsR0FBRyxVQUFVLFFBQVEsUUFBUSxHQUFHLFFBQVE7QUFFaEUsVUFBSTtBQUNGLGNBQU0sS0FBSyxJQUFJLE1BQU0sT0FBTyxNQUFNLElBQUk7QUFDdEMsWUFBSSx3QkFBTyxxQkFBZ0I7QUFBQSxNQUM3QixTQUFTLEdBQVA7QUFDQSxZQUFJLEVBQUUsQ0FBQztBQUNQLFlBQUksd0JBQU8sb0NBQTBCO0FBQUEsTUFDdkM7QUFBQSxJQUNGO0FBQUEsRUFLRjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsTUFBYyxVQUFVLEtBQXFDO0FBQzNELFdBQU8sSUFBSSxRQUFRLENBQUMsWUFBWTtBQUM5QixZQUFNLEVBQUUsT0FBQUMsT0FBTSxJQUFLLFdBQW1CLFdBQVc7QUFFakQsWUFBTSxvQkFBb0JBLE9BQU07QUFBQSxRQUc5QixZQUFZLEtBQVU7QUFDcEIsZ0JBQU0sR0FBRztBQUhYLHdCQUFTO0FBQUEsUUFJVDtBQUFBLFFBRUEsU0FBUztBQUNQLGdCQUFNLEVBQUUsVUFBVSxJQUFJO0FBQ3RCLG9CQUFVLFNBQVMsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTFDLGdCQUFNLFFBQVEsVUFBVSxTQUFTLFNBQVMsRUFBRSxPQUFPLEtBQUssT0FBTyxDQUFDO0FBQ2hFLGdCQUFNLE1BQU0sUUFBUTtBQUVwQixnQkFBTSxpQkFBaUIsV0FBVyxDQUFDLE9BQXVCO0FBQ3hELGdCQUFJLEdBQUcsUUFBUSxTQUFTO0FBQ3RCLG1CQUFLLFNBQVMsTUFBTSxNQUFNLEtBQUs7QUFDL0IsbUJBQUssTUFBTTtBQUNYLHNCQUFRLEtBQUssTUFBTTtBQUFBLFlBQ3JCO0FBQUEsVUFDRixDQUFDO0FBRUQsZ0JBQU0sS0FBSyxVQUFVLFNBQVMsVUFBVSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3RELGFBQUcsVUFBVSxNQUFNO0FBQ2pCLGlCQUFLLFNBQVMsTUFBTSxNQUFNLEtBQUs7QUFDL0IsaUJBQUssTUFBTTtBQUNYLG9CQUFRLEtBQUssTUFBTTtBQUFBLFVBQ3JCO0FBQUEsUUFDRjtBQUFBLFFBRUEsVUFBVTtBQUNSLGVBQUssVUFBVSxNQUFNO0FBQUEsUUFDdkI7QUFBQSxNQUNGO0FBRUEsVUFBSSxZQUFZLEtBQUssR0FBRyxFQUFFLEtBQUs7QUFBQSxJQUNqQyxDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxPQUFPLE1BQVcsTUFBbUI7QUFDbkMsV0FBTyxLQUFLLFdBQVcsT0FBTyxJQUMxQixLQUFLLE1BQU0sR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLE1BQU0sdUJBQUksSUFBSSxJQUFJLElBQzdDLEtBQUssSUFBSTtBQUFBLEVBQ2Y7QUFBQTtBQUFBLEVBR0EsYUFBYSxLQUEwQjtBQUNyQyxRQUFJLE9BQU8sUUFBUTtBQUFVLGFBQU87QUFFcEMsVUFBTSxJQUFJLElBQUksTUFBTSxLQUFLLFlBQVk7QUFDckMsUUFBSSxHQUFHO0FBQ0wsWUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksTUFBTTtBQUNsQyxVQUFJLElBQUksT0FBUSxJQUFJLFFBQVEsS0FBSyxLQUFLLEtBQUssTUFBTSxJQUFJLEtBQUssSUFBSTtBQUM1RCxlQUFPO0FBQ1QsYUFBTyxJQUFJLEtBQUssR0FBRyxLQUFLLEdBQUcsQ0FBQztBQUFBLElBQzlCO0FBQ0EsVUFBTSxLQUFLLElBQUksS0FBSyxHQUFHO0FBQ3ZCLFdBQU8sTUFBTSxHQUFHLFFBQVEsQ0FBQyxJQUFJLE9BQU87QUFBQSxFQUN0QztBQUFBO0FBQUEsRUFHQSxZQUFZLEtBQTBCO0FBQ3BDLFFBQUksT0FBTyxRQUFRO0FBQVUsYUFBTztBQUNwQyxVQUFNLElBQUksSUFBSSxNQUFNLEtBQUssV0FBVztBQUNwQyxRQUFJLENBQUM7QUFBRyxhQUFPO0FBRWYsVUFBTSxDQUFDLEdBQUcsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLE1BQU07QUFDaEMsUUFBSSxLQUFLLE1BQU0sS0FBSztBQUFJLGFBQU87QUFFL0IsVUFBTSxJQUFJLG9CQUFJLEtBQUs7QUFDbkIsTUFBRSxTQUFTLElBQUksSUFBSSxHQUFHLENBQUM7QUFDdkIsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBLEVBR0EsYUFBYSxHQUF5QjtBQUNwQyxRQUFJLEtBQUs7QUFBTSxhQUFPO0FBQ3RCLFVBQU0sSUFBSSxPQUFPLE1BQU0sV0FBVyxJQUFJLE9BQU8sQ0FBQztBQUU5QyxVQUFNLElBQUksS0FBSyxhQUFhLENBQUMsS0FBSyxLQUFLLFlBQVksQ0FBQztBQUNwRCxRQUFJO0FBQUcsYUFBTyxFQUFFLFFBQVE7QUFFeEIsVUFBTSxJQUFJLFdBQVcsQ0FBQztBQUN0QixXQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsWUFBWSxJQUFJO0FBQUEsRUFDdEM7QUFBQTtBQUFBLEVBR0EsYUFBYSxHQUFnQjtBQUMzQixRQUFJLEtBQUs7QUFBTSxhQUFPO0FBQ3RCLFVBQU0sSUFBSSxLQUFLLGFBQWEsT0FBTyxDQUFDLENBQUM7QUFDckMsUUFBSSxDQUFDO0FBQUcsYUFBTyxPQUFPLENBQUM7QUFFdkIsVUFBTSxJQUFJLEVBQUUsWUFBWTtBQUN4QixVQUFNLElBQUksRUFBRSxTQUFTLElBQUk7QUFDekIsVUFBTSxLQUFLLEVBQUUsUUFBUTtBQUNyQixXQUFPLEdBQUcsS0FBSyxJQUFJLEtBQUssTUFBTSxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU0sS0FBSztBQUFBLEVBQy9EO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLFdBQVcsS0FBWSxNQUFxQixNQUFzQixPQUFPO0FBQ3ZFLFFBQUksQ0FBQyxRQUFRLFNBQVMsZ0JBQWdCLFNBQVM7QUFBUSxhQUFPO0FBRTlELFdBQU8sSUFBSSxLQUFLLENBQUMsR0FBRyxNQUFNO0FBQ3hCLFlBQU0sSUFBSSxLQUFLLGFBQWEsS0FBSyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ2hELFlBQU0sSUFBSSxLQUFLLGFBQWEsS0FBSyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBRWhELFVBQUksT0FBTyxNQUFNLFlBQVksT0FBTyxNQUFNO0FBQ3hDLGVBQU8sUUFBUSxRQUFRLElBQUksSUFBSSxJQUFJO0FBRXJDLGFBQU8sUUFBUSxRQUNYLE9BQU8sQ0FBQyxFQUFFLGNBQWMsT0FBTyxDQUFDLENBQUMsSUFDakMsT0FBTyxDQUFDLEVBQUUsY0FBYyxPQUFPLENBQUMsQ0FBQztBQUFBLElBQ3ZDLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLE1BQU0sVUFBVSxRQUEwQztBQUN4RCxVQUFNLEVBQUUsY0FBQUMsY0FBYSxJQUFLLFdBQW1CLFdBQVc7QUFDeEQsV0FBTyxJQUFJLFFBQVEsQ0FBQyxZQUFZO0FBQzlCLFlBQU0sYUFBYUEsY0FBcUI7QUFBQSxRQUN0QyxZQUFZLEtBQVU7QUFDcEIsZ0JBQU0sR0FBRztBQUFBLFFBQ1g7QUFBQSxRQUVBLGVBQWUsR0FBVztBQUN4QixnQkFBTSxLQUFLLEVBQUUsWUFBWTtBQUN6QixpQkFBTyxPQUFPLE9BQU8sQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxDQUFDO0FBQUEsUUFDMUQ7QUFBQSxRQUNBLGlCQUFpQixHQUFXLElBQWlCO0FBQzNDLGFBQUcsU0FBUyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFBQSxRQUNoQztBQUFBLFFBQ0EsbUJBQW1CLEdBQVc7QUFDNUIsa0JBQVEsQ0FBQztBQUFBLFFBQ1g7QUFBQSxNQUNGO0FBQ0EsVUFBSSxLQUFLLEtBQUssR0FBRyxFQUFFLEtBQUs7QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDSDtBQUNGOzs7QUM1TUEsSUFBTSxVQUFrQixpQ0FBZ0IsY0FDcEMsT0FBTyxXQUFXLElBQ2xCLE9BQU8sS0FBSyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssS0FBSyxPQUFPLEVBQUUsU0FBUyxFQUFFLEVBQUUsTUFBTSxHQUFHLEVBQUU7QUFrQ3JFLElBQU0sY0FBTixNQUFrQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUErQnZCLGNBQWM7QUF2QmQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxTQUFRLFVBQVUsb0JBQUksSUFBd0I7QUFLOUM7QUFBQTtBQUFBO0FBQUE7QUFBQSxTQUFRLFFBQVUsb0JBQUksSUFBOEI7QUFLcEQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxTQUFRLE9BQVUsb0JBQUksSUFBMkI7QUFpQi9DLFdBQU8saUJBQWlCLFdBQVcsT0FBSztBQWxHNUMsVUFBQUM7QUFtR00sVUFBSSxHQUFDQSxNQUFBLEVBQUUsUUFBRixnQkFBQUEsSUFBTyxXQUFXLG9CQUFtQixFQUFFLFlBQVk7QUFBTTtBQUM5RCxZQUFNLENBQUMsRUFBRSxVQUFVLE1BQU0sSUFBSSxFQUFFLElBQUksTUFBTSxJQUFJO0FBQzdDLFVBQUk7QUFBRSxhQUFLLFlBQVksUUFBUSxLQUFLLE1BQU0sRUFBRSxRQUFRLENBQUM7QUFBQSxNQUFHLFNBQVFDLElBQU47QUFBQSxNQUFPO0FBQUEsSUFDbkUsQ0FBQztBQUlELFdBQU8saUJBQWlCLFdBQVcsUUFBTTtBQTFHN0MsVUFBQUQ7QUEyR00sVUFBSSxHQUFDQSxNQUFBLEdBQUcsU0FBSCxnQkFBQUEsSUFBUztBQUFjO0FBQzVCLFlBQU0sRUFBRSxRQUFRLFFBQVEsSUFBSSxHQUFHO0FBQy9CLFVBQUksUUFBUSxXQUFXO0FBQVE7QUFDL0IsV0FBSyxZQUFZLFFBQVEsUUFBUSxLQUFLO0FBQUEsSUFDeEMsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQTNCUSxNQUFNLFFBQWdCO0FBckZoQyxRQUFBQTtBQXNGSSxVQUFNLFVBQVNBLE1BQUEsS0FBSyxRQUFRLElBQUksTUFBTSxNQUF2QixPQUFBQSxNQUE0QixDQUFDLEdBQUcsT0FBTyxPQUFLLFNBQVMsS0FBSyxTQUFTLEVBQUUsTUFBTSxDQUFDO0FBQzNGLFNBQUssUUFBUSxJQUFJLFFBQVEsS0FBSztBQUFBLEVBQ2hDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFtQ0EsUUFBUSxNQUFnQjtBQTNIMUIsUUFBQUE7QUE0SEksVUFBTSxRQUFPQSxNQUFBLEtBQUssUUFBUSxJQUFJLEtBQUssTUFBTSxNQUE1QixPQUFBQSxNQUFpQyxDQUFDO0FBQy9DLFFBQUksS0FBSyxLQUFLLE9BQUssRUFBRSxjQUFjLEtBQUssU0FBUyxHQUFHO0FBQUU7QUFBQSxJQUFRO0FBQzlELFNBQUssS0FBSyxJQUFJO0FBQ2QsU0FBSyxRQUFRLElBQUksS0FBSyxRQUFRLElBQUk7QUFDbEMsUUFBSSxFQUFFLGtCQUFhLEtBQUssUUFBUSw2QkFBYyxLQUFLLE1BQU07QUFDekQsU0FBSyxNQUFNLEtBQUssTUFBTTtBQUN0QixVQUFNLEtBQWUsWUFBWTtBQUMvQixVQUFJLEVBQUUsZ0NBQWlCLEtBQUssTUFBTTtBQUNsQyxZQUFNLEtBQUssWUFBWSxJQUFJO0FBQzNCLFlBQU0sTUFBTSxJQUFJLFlBQVksbUJBQW1CLEVBQUUsUUFBUSxLQUFLLE9BQU8sQ0FBQztBQUN0RSxhQUFPLGNBQWMsR0FBRztBQUFBLElBQzFCO0FBQ0EsU0FBSyxVQUFVLEtBQUssUUFBUSxFQUFFO0FBQzlCLFFBQUksS0FBSyxRQUFRO0FBQ2YsWUFBTSxLQUFLLElBQUksaUJBQWlCLE1BQU07QUExSTVDLFlBQUFBO0FBMklRLFlBQUksS0FBSyxVQUFVLENBQUMsU0FBUyxLQUFLLFNBQVMsS0FBSyxNQUFNLEdBQUc7QUFDdkQsZUFBSyxZQUFZLEtBQUssUUFBUSxFQUFFO0FBQ2hDLGdCQUFNLFdBQVVBLE1BQUEsS0FBSyxRQUFRLElBQUksS0FBSyxNQUFNLE1BQTVCLE9BQUFBLE1BQWlDLENBQUMsR0FBRyxPQUFPLE9BQUssTUFBTSxJQUFJO0FBQzNFLGVBQUssUUFBUSxJQUFJLEtBQUssUUFBUSxNQUFNO0FBQ3BDLGNBQUksRUFBRSw0QkFBYSxLQUFLLFFBQVEsc0JBQVksT0FBTyxNQUFNO0FBQ3pELGFBQUcsV0FBVztBQUFBLFFBQ2hCO0FBQUEsTUFDRixDQUFDO0FBQ0QsU0FBRyxRQUFRLFNBQVMsTUFBTSxFQUFFLFdBQVcsTUFBTSxTQUFTLEtBQUssQ0FBQztBQUFBLElBQzlEO0FBQ0EsU0FBSyxjQUFjLEtBQUssTUFBTTtBQUFBLEVBQ2hDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxXQUFXLFVBQWtCLFFBQWdCO0FBN0ovQyxRQUFBQSxLQUFBO0FBOEpJLFNBQUssTUFBTSxNQUFNO0FBQ2pCLFVBQU0sV0FBVUEsTUFBQSxLQUFLLFFBQVEsSUFBSSxNQUFNLE1BQXZCLE9BQUFBLE1BQTRCLENBQUMsR0FBRyxPQUFPLE9BQUssRUFBRSxhQUFhLFFBQVE7QUFDbkYsU0FBSyxRQUFRLElBQUksUUFBUSxNQUFNO0FBQy9CLFFBQUksRUFBRSxxQkFBZ0IsUUFBUSxzQkFBWSxPQUFPLE1BQU07QUFDdkQsUUFBSSxPQUFPLFdBQVcsR0FBRztBQUN2QixpQkFBSyxLQUFLLElBQUksTUFBTSxNQUFwQixtQkFBdUI7QUFDdkIsV0FBSyxLQUFLLE9BQU8sTUFBTTtBQUN2QixpQkFBSyxNQUFNLElBQUksTUFBTSxNQUFyQixtQkFBd0I7QUFDeEIsV0FBSyxNQUFNLE9BQU8sTUFBTTtBQUN4QixVQUFJO0FBQUUscUJBQWEsV0FBVyxLQUFLLFFBQVEsVUFBVSxNQUFNLENBQUM7QUFBQSxNQUFFLFNBQVEsR0FBTjtBQUFBLE1BQU87QUFBQSxJQUN6RTtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVdBLElBQUksVUFBa0IsUUFBcUM7QUFDekQsVUFBTSxNQUFNLGFBQWEsUUFBUSxLQUFLLFFBQVEsVUFBVSxNQUFNLENBQUM7QUFDL0QsUUFBSTtBQUFFLGFBQU8sTUFBTSxLQUFLLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFBQSxJQUFHLFNBQ25DLEdBQU47QUFBUSxhQUFPLENBQUM7QUFBQSxJQUFHO0FBQUEsRUFDckI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLElBQUksTUFBZ0IsT0FBNEIsT0FBTyxPQUFPLFNBQVMsT0FBTztBQS9MaEYsUUFBQUE7QUFnTUksUUFBSSxFQUFFLGNBQVMsS0FBSyxRQUFRLEVBQUUsT0FBTyxNQUFNLE9BQU8sQ0FBQztBQUNuRCxRQUFLLE9BQWU7QUFBMEIsZUFBUztBQUN2RCxVQUFNLE1BQVMsS0FBSyxRQUFRLEtBQUssVUFBVSxLQUFLLE1BQU07QUFDdEQsVUFBTSxTQUFTLEtBQUssSUFBSSxLQUFLLFVBQVUsS0FBSyxNQUFNO0FBQ2xELFVBQU0sT0FBUyxPQUFPLFFBQVEsRUFBRSxHQUFHLFFBQVEsR0FBRyxNQUFNO0FBQ3BELFFBQUk7QUFDRixtQkFBYSxRQUFRLEtBQUssS0FBSyxVQUFVLElBQUksQ0FBQztBQUFBLElBQ2hELFNBQVMsR0FBUDtBQUNBLFdBQUksdUJBQUcsVUFBUyxzQkFBc0I7QUFDcEMsZ0JBQVEsS0FBSyxvRUFBK0Q7QUFBQSxNQUM5RSxPQUFPO0FBQ0wsY0FBTTtBQUFBLE1BQ1I7QUFBQSxJQUNGO0FBQ0EsUUFBSSxDQUFDLFFBQVE7QUFDWCxZQUFNLFVBQVUsRUFBRSxRQUFRLFFBQVEsT0FBTyxLQUFLO0FBQzlDLE9BQUFBLE1BQUEsS0FBSyxNQUFNLElBQUksS0FBSyxNQUFNLE1BQTFCLGdCQUFBQSxJQUE2QixZQUFZO0FBQ3pDLGFBQU8sWUFBWSxFQUFFLGNBQWMsTUFBTSxRQUFRLEtBQUssUUFBUSxRQUFRLEdBQUcsR0FBRztBQUFBLElBQzlFO0FBQ0EsU0FBSyxLQUFLLEtBQUssUUFBUSxJQUFJO0FBQUEsRUFDN0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFVBQVUsUUFBZ0IsSUFBYztBQTNOMUMsUUFBQUE7QUE0TkksVUFBTSxPQUFNQSxNQUFBLEtBQUssS0FBSyxJQUFJLE1BQU0sTUFBcEIsT0FBQUEsTUFBeUIsb0JBQUksSUFBYztBQUN2RCxRQUFJLElBQUksRUFBRTtBQUNWLFNBQUssS0FBSyxJQUFJLFFBQVEsR0FBRztBQUFBLEVBQzNCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxZQUFZLFFBQWdCLElBQWM7QUF0TzVDLFFBQUFBO0FBdU9JLEtBQUFBLE1BQUEsS0FBSyxLQUFLLElBQUksTUFBTSxNQUFwQixnQkFBQUEsSUFBdUIsT0FBTztBQUFBLEVBQ2hDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPUSxLQUFLLFFBQWdCLE9BQTRCO0FBL08zRCxRQUFBQTtBQWdQSSxLQUFBQSxNQUFBLEtBQUssS0FBSyxJQUFJLE1BQU0sTUFBcEIsZ0JBQUFBLElBQXVCLFFBQVEsUUFBTTtBQUNuQyxVQUFJO0FBQUUsV0FBRyxLQUFLO0FBQUEsTUFBRyxTQUFTLEdBQVA7QUFBWSxnQkFBUSxNQUFNLENBQUM7QUFBQSxNQUFHO0FBQUEsSUFDbkQ7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPUSxjQUFlLFFBQWlCO0FBQ3RDLFFBQUssS0FBSyxNQUFNLElBQUssTUFBTztBQUFJO0FBQ2hDLFVBQU0sS0FBSyxJQUFJLGlCQUFpQixjQUFjLFFBQVE7QUFDdEQsT0FBRyxZQUFZLFFBQU07QUFDbkIsWUFBTSxFQUFFLFFBQVEsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDO0FBQ3RDLFVBQUssV0FBVztBQUFTO0FBQ3pCLFdBQUssWUFBYSxRQUFRLEtBQU07QUFBQSxJQUNsQztBQUNBLFNBQUssTUFBTSxJQUFJLFFBQVEsRUFBRTtBQUFBLEVBQzNCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPUSxZQUFZLFFBQWdCLFVBQWU7QUExUXJELFFBQUFBO0FBMlFJLFVBQU0sU0FBUUEsTUFBQSxLQUFLLFFBQVEsSUFBSSxNQUFNLE1BQXZCLE9BQUFBLE1BQTRCLENBQUM7QUFDM0MsUUFBSSxNQUFNLFdBQVc7QUFBRztBQUV4QixVQUFNLFdBQVcsTUFBTSxDQUFDLEVBQUU7QUFDMUIsVUFBTSxNQUFXLEtBQUssUUFBUSxVQUFVLE1BQU07QUFDOUMsVUFBTSxNQUFXLEtBQUssSUFBSSxVQUFVLE1BQU07QUFDMUMsUUFBSSxLQUFLLFVBQVUsR0FBRyxNQUFNLEtBQUssVUFBVSxRQUFRO0FBQUc7QUFFdEQsaUJBQWEsUUFBUSxLQUFLLEtBQUssVUFBVSxRQUFRLENBQUM7QUFDbEQsU0FBSyxLQUFLLFFBQVEsUUFBUTtBQUFBLEVBQzVCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPUSxRQUFRLFVBQWtCLFFBQWdCO0FBQ2hELFdBQU8sZUFBZSxhQUFhO0FBQUEsRUFDckM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9PLFlBQVksS0FBc0I7QUFyUzNDLFFBQUFBO0FBc1NJLFVBQU0sT0FBTUEsTUFBQSxLQUFLLFFBQVEsSUFBSSxHQUFHLE1BQXBCLE9BQUFBLE1BQXVCLENBQUM7QUFDcEMsV0FBTyxJQUFJLEtBQUssT0FBSyxFQUFFLFVBQVUsU0FBUyxLQUFLLFNBQVMsRUFBRSxNQUFNLENBQUM7QUFBQSxFQUNuRTtBQUNGO0FBT08sSUFBTSxhQUFhLElBQUksWUFBWTs7O0FDL1AxQyxTQUFTLE9BQU87QUFDZCxVQUFRLGlDQUFnQixjQUNwQixPQUFPLFdBQVcsSUFDbEIsT0FBTyxLQUFLLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxLQUFLLE9BQU8sRUFBRSxTQUFTLEVBQUUsRUFBRSxNQUFNLEdBQUcsQ0FBQztBQUM3RTtBQUdBLFNBQVMsR0FBRyxNQUFjLEtBQWEsR0FBVztBQXhEbEQsTUFBQUUsS0FBQTtBQXlERSxVQUFPLE1BQUFBLE1BQUEsV0FBVyxJQUFJLE1BQU0sR0FBRyxNQUF4QixnQkFBQUEsSUFBNEIsT0FBNUIsWUFBa0M7QUFDM0M7QUFHQSxTQUFTLEdBQUcsTUFBYyxLQUFhLEdBQVcsR0FBUTtBQUN4RCxRQUFNLE1BQVEsV0FBbUIsUUFBUSxJQUFJLEdBQUc7QUFDaEQsUUFBTSxPQUFPLDJCQUFNO0FBR25CLE1BQUksTUFBTTtBQUNSLFVBQU0sU0FBUyxDQUFDLENBQUUsS0FBYTtBQUMvQixlQUFXLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLE1BQU07QUFDOUM7QUFBQSxFQUNGO0FBR0EsUUFBTSxNQUFNLGVBQWUsU0FBUztBQUNwQyxNQUFJO0FBQ0YsVUFBTSxPQUFPLEtBQUssTUFBTSxhQUFhLFFBQVEsR0FBRyxLQUFLLElBQUk7QUFDekQsU0FBSyxDQUFDLElBQUk7QUFDVixpQkFBYSxRQUFRLEtBQUssS0FBSyxVQUFVLElBQUksQ0FBQztBQUFBLEVBQ2hELFNBQVEsR0FBTjtBQUNBLGlCQUFhLFFBQVEsS0FBSyxLQUFLLFVBQVUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUFBLEVBQ3REO0FBQ0Y7QUFLTyxJQUFNLHdCQUFOLE1BQTRCO0FBQUE7QUFBQSxFQWFuQyxZQUNFLElBQ0EsT0FDQSxTQUNBLEtBQ0EsVUFDQSxNQUNBO0FBVkEsU0FBTyxlQUFzQixDQUFDO0FBa0Q5QjtBQUFBO0FBQUE7QUFBQTtBQUFBLFNBQU8sY0FBcUIsQ0FBQztBQUU3QjtBQUFBLFNBQU8sWUFBYTtBQWdNcEI7QUFBQTtBQUFBO0FBQUEsU0FBaUIsZUFBZTtBQUNoQyxTQUFpQixlQUFlO0FBQ2hDLFNBQWlCLGNBQWU7QUF0VmxDLFFBQUFBO0FBMkdFLFFBQUksRUFBQywyQkFBSztBQUFZLFlBQU0sSUFBSSxNQUFNLHdCQUF3QjtBQUc5RCxTQUFLLEtBQVk7QUFDakIsU0FBSyxRQUFZO0FBQ2pCLFNBQUssVUFBWTtBQUNqQixTQUFLLE1BQVk7QUFDakIsU0FBSyxXQUFZO0FBQ2pCLFNBQUssV0FBWSxJQUFJO0FBQ3JCLFNBQUssT0FBWTtBQUdqQixTQUFLLFVBQVNBLE1BQUEsU0FBUyxhQUFULE9BQUFBLE1BQXNCLFNBQVMsV0FBVyxLQUFLO0FBRzdELFVBQU0sU0FBUyxLQUFLLFFBQVEsaUJBQWlCO0FBRzdDLFFBQUksUUFBUTtBQUNWLGlCQUFXLFFBQVE7QUFBQSxRQUNqQixRQUFXLEtBQUs7QUFBQSxRQUNoQixVQUFXLEtBQUs7QUFBQSxRQUNoQjtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQSxXQUFXO0FBQUEsUUFDWDtBQUFBLFFBQ0EsVUFBYyxPQUFNLE1BQUssTUFBTSxLQUFLLFFBQVEsQ0FBQztBQUFBLFFBQzdDLGFBQWMsT0FBTSxNQUFFO0FBdkk1QixjQUFBQTtBQXVJK0IseUJBQU1BLE1BQUEsU0FBUyxtQkFBVCxnQkFBQUEsSUFBQSxlQUEwQjtBQUFBO0FBQUEsTUFDM0QsQ0FBQztBQUFBLElBQ0gsT0FBTztBQUNMLFVBQUksRUFBRSxzRUFBaUU7QUFBQSxJQUN6RTtBQUFBLEVBQ0Y7QUFBQTtBQUFBLEVBV0UsTUFBTSxRQUFRLFVBQVUsT0FBTztBQXZKakMsUUFBQUE7QUF5SkksVUFBTSxTQUFTLEtBQUssTUFBTSxJQUFJLENBQUMsSUFBRyxRQUFRO0FBeko5QyxVQUFBQSxLQUFBO0FBMkpFLFlBQU0sS0FBUyxFQUFFLEdBQUcsSUFBSSxPQUFNLElBQUk7QUFHbEMsU0FBRyxPQUFPLE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxHQUFHLE9BQzVCLE1BQU0sU0FBUUEsTUFBQSxHQUFHLFNBQUgsZ0JBQUFBLElBQVMsSUFBSSxJQUFJLEdBQUcsS0FBSyxPQUN2QyxHQUFHLE9BQU8sQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDO0FBR2pDLFlBQU0sUUFBUSxNQUFNO0FBQ2xCLFlBQUk7QUFBRSxpQkFBTyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssSUFBSTtBQUFBLFFBQUcsU0FDbkMsR0FBTjtBQUFRLGlCQUFPO0FBQUEsUUFBTTtBQUFBLE1BQ3ZCLEdBQUc7QUFJSCxZQUFNLFlBQVcsY0FBRyxTQUFILG1CQUFTLGFBQVQsWUFBcUI7QUFFdEMsWUFBTSxZQUNGLFNBQVMsU0FBUyxhQUFhLElBQzNCLFNBQVMsTUFBTSxHQUFHLENBQUMsY0FBYyxNQUFNLElBQ3ZDLFlBQVk7QUFFcEIsU0FBRyxhQUNDLG9EQUFNLGdCQUFOLG1CQUFtQixVQUFuQixZQUNBLDZCQUFNLFVBRE4sYUFFQSxRQUFHLGdCQUFILG1CQUFnQixVQUZoQixZQUdBO0FBRUEsYUFBTztBQUFBLElBQ1QsQ0FBQztBQUdELFFBQUksT0FBTyxNQUFNLEtBQUssZ0JBQWdCLE1BQU07QUFHNUMsV0FBTyxLQUFLLFVBQVUsSUFBSTtBQUUxQixTQUFLLGVBQWU7QUFFcEIsU0FBSyxZQUFZLEtBQUs7QUFHdEIsVUFBTSxPQUFNQSxNQUFBLEtBQUssU0FBUyxZQUFkLE9BQUFBLE1BQXlCO0FBQ3JDLFNBQUssY0FBYyxNQUFNLElBQUksS0FBSyxTQUFTLE1BQU0sS0FBSyxPQUFPLElBQUk7QUFBQSxFQUNuRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxNQUFjLGdCQUFnQixPQUE4QjtBQUUxRCxlQUFXLE9BQU8sS0FBSyxRQUFRLE9BQU8sT0FBSyxFQUFFLE1BQU0sR0FBRztBQUNwRCxjQUFRLE1BQU0sS0FBSyxhQUFhLEtBQUssS0FBSztBQUFBLElBQzVDO0FBR0EsWUFBUSxNQUFNLEtBQUssZUFBZSxLQUFLO0FBR3ZDLFlBQVEsS0FBSyxZQUFZLEtBQUs7QUFFOUIsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBLEVBR0EsTUFBYyxhQUFhLEdBQWMsT0FBOEI7QUFDckUsVUFBTSxNQUFNLFVBQVUsS0FBSyxVQUFVLEVBQUU7QUFDdkMsVUFBTSxNQUFNLEdBQUcsS0FBSyxVQUFVLEtBQUssUUFBUSxHQUFHO0FBQzlDLFFBQUksQ0FBQyxPQUFPLFFBQVE7QUFBTyxhQUFPO0FBR2xDLFVBQU0sWUFBWSxDQUFDLFFBQWE7QUFwT3BDLFVBQUFBO0FBcU9NLGNBQVEsRUFBRSxRQUFRO0FBQUEsUUFDaEIsS0FBSyxRQUFRO0FBQ25CLGdCQUFNLE1BQU0sS0FBSyxhQUFhLEdBQUc7QUFDakMsaUJBQU8sb0JBQU87QUFBQSxRQUNSO0FBQUEsUUFDQSxLQUFLLFFBQVE7QUFDWCxnQkFBTSxJQUFJLE9BQU8sUUFBUSxXQUNyQixPQUFPLEdBQUcsS0FDVkEsTUFBQSxPQUFPLEdBQUcsRUFBRSxNQUFNLE9BQU8sTUFBekIsZ0JBQUFBLElBQTZCO0FBQ2pDLGlCQUFPLGdCQUFLO0FBQUEsUUFDZDtBQUFBLFFBQ0E7QUFDRSxpQkFBTyxPQUFPLG9CQUFPLEdBQUc7QUFBQSxNQUM1QjtBQUFBLElBQ0Y7QUFFQSxXQUFPLE1BQU0sT0FBTyxRQUFNLFVBQVUsS0FBSyxPQUFPLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHO0FBQUEsRUFDdEU7QUFBQTtBQUFBLEVBR0EsTUFBYyxlQUFlLE9BQWM7QUFDekMsVUFBTSxLQUFLLEdBQUcsS0FBSyxVQUFVLEtBQUssUUFBUSxhQUFhLEtBQUssUUFBUSxLQUFLO0FBQ3pFLFFBQUksT0FBTztBQUFPLGFBQU87QUFDekIsV0FBTyxNQUFNLE9BQU8sUUFBTTtBQTVQOUIsVUFBQUEsS0FBQTtBQTZQQSxZQUFNLE1BQU0sTUFBTSxTQUFRQSxNQUFBLEdBQUcsU0FBSCxnQkFBQUEsSUFBUyxJQUFJLElBQUksR0FBRyxLQUFNLE9BQ3hDLE1BQU0sUUFBUSxHQUFHLElBQUksSUFBVSxHQUFHLE9BQ2xDLEVBQUMsY0FBRyxTQUFILG1CQUFTLFNBQVQsWUFBaUIsR0FBRyxJQUFJO0FBQ3JDLGFBQU8sSUFBSSxTQUFTLEVBQUU7QUFBQSxJQUNsQixDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUEsRUFHUSxZQUFZLE9BQWM7QUFDaEMsVUFBTSxRQUFRLEdBQUcsS0FBSyxVQUFVLEtBQUssUUFBUSxnQkFBZ0IsS0FBSyxRQUFRO0FBQzFFLFFBQUksQ0FBQztBQUFPLGFBQU87QUFFbkIsVUFBTSxLQUFLLEdBQUcsS0FBSyxVQUFVLEtBQUssUUFBUSxVQUFVLEtBQUssUUFBUSxLQUFLLElBQ25FLEtBQUssRUFDTCxZQUFZO0FBQ2YsUUFBSSxDQUFDO0FBQUcsYUFBTztBQUdmLFVBQU0sT0FBTyxLQUFLLFFBQVEsT0FBTyxPQUFLLEVBQUUsTUFBTTtBQUM5QyxVQUFNLFFBQVEsUUFBTTtBQUNsQixZQUFNLE1BQWdCLENBQUM7QUFDdkIsV0FBSyxRQUFRLE9BQUs7QUFDaEIsWUFBSSxLQUNGLEVBQUUsU0FBUyxlQUNQLEdBQUcsYUFBYSxLQUNoQixPQUFPLEtBQUssT0FBTyxJQUFJLEVBQUUsSUFBSSxLQUFLLEVBQUU7QUFDMUMsWUFBSSxLQUFLLEdBQUcsWUFBWSxDQUFDO0FBQUEsTUFDM0IsQ0FBQztBQUNELFNBQUcsZUFBZSxJQUFJLEtBQUssR0FBRztBQUFBLElBQ2hDLENBQUM7QUFFRCxXQUFPLE1BQU07QUFBQSxNQUFPLFFBQ2xCLEVBQ0csTUFBTSxHQUFHLEVBQ1QsTUFBTSxDQUFDLE1BQWEsTUFBTSxHQUFHLGdCQUFnQixJQUFJLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUFBLElBQy9FO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTVEsVUFBVSxLQUFZO0FBdlNoQyxRQUFBQTtBQXdTSSxVQUFNLE9BQU8sR0FBRyxLQUFLLFVBQVUsS0FBSyxRQUFRLFFBQVEsS0FBSyxRQUFRO0FBQ2pFLFVBQU0sTUFBTyxHQUFHLEtBQUssVUFBVSxLQUFLLFFBQVEsa0JBQWtCLEtBQUssUUFBUTtBQUUzRSxRQUFJLENBQUMsUUFBUSxDQUFDO0FBQUssYUFBTyxJQUFJLEtBQUssQ0FBQyxHQUFFLE1BQUksRUFBRSxRQUFRLEVBQUUsS0FBSztBQUczRCxRQUFJLENBQUM7QUFBTSxhQUFPLElBQUksS0FBSyxDQUFDLEdBQUUsTUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLO0FBRW5ELFVBQU0sTUFBTSxLQUFLLFFBQVEsS0FBSyxPQUFLLEVBQUUsU0FBUyxJQUFJO0FBQ2xELFVBQU0sT0FBTUEsTUFBQSwyQkFBSyxXQUFMLE9BQUFBLE1BQWU7QUFFM0IsV0FBTyxJQUFJLEtBQUssQ0FBQyxHQUFHLE1BQU07QUFDeEIsWUFBTSxJQUFJLEtBQUssYUFBYSxLQUFLLE9BQU8sR0FBRyxJQUFJLEdBQUcsR0FBRztBQUNyRCxZQUFNLElBQUksS0FBSyxhQUFhLEtBQUssT0FBTyxHQUFHLElBQUksR0FBRyxHQUFHO0FBRXJELFlBQU0sTUFBTyxPQUFPLE1BQU0sWUFBWSxPQUFPLE1BQU0sV0FDakQsSUFBSSxJQUNKLEtBQUssVUFBVSxDQUFDLEVBQUUsY0FBYyxLQUFLLFVBQVUsQ0FBQyxHQUFFLElBQUk7QUFFeEQsYUFBTyxRQUFNLFFBQVEsTUFBTSxDQUFDO0FBQUEsSUFDOUIsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUVRLFNBQVMsS0FBWSxLQUFhLFNBQWtCO0FBL1Q5RCxRQUFBQTtBQWdVSSxVQUFNLE1BQVEsY0FBYyxLQUFLO0FBQ2pDLFVBQU0sUUFBUSxNQUFNLElBQUksS0FBSyxLQUFLLElBQUksU0FBUyxHQUFHLElBQUk7QUFFdEQsUUFBSSxPQUFNQSxNQUFBLEdBQUcsS0FBSyxVQUFVLEtBQUssUUFBUSxHQUFHLE1BQWxDLE9BQUFBLE1BQXVDO0FBQ2pELFFBQUksVUFBVTtBQUFHLFlBQU07QUFBQSxTQUNsQjtBQUNILFVBQUksTUFBTTtBQUFHLGNBQU07QUFDbkIsVUFBSSxPQUFPO0FBQU8sY0FBTSxRQUFRO0FBQUEsSUFDbEM7QUFFQSxRQUFJLENBQUMsV0FBVyxRQUFRLEdBQUcsS0FBSyxVQUFVLEtBQUssUUFBUSxHQUFHO0FBQ3hELFNBQUcsS0FBSyxVQUFVLEtBQUssUUFBUSxLQUFLLEdBQUc7QUFFekMsV0FBTyxNQUFNLElBQUksSUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHO0FBQUEsRUFDbEU7QUFBQSxFQVVRLGFBQWEsS0FBYTtBQUNoQyxRQUFJLE9BQU8sUUFBUTtBQUFVLGFBQU87QUFDcEMsVUFBTSxJQUFJLElBQUksTUFBTSxLQUFLLFlBQVk7QUFDckMsUUFBSSxDQUFDO0FBQUcsYUFBTztBQUNmLFVBQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUNaLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FDVCxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ1YsUUFBSSxJQUFJLE9BQVEsSUFBSSxRQUFRLEtBQUssS0FBSyxLQUFLLE1BQU0sSUFBSSxLQUFLLElBQUk7QUFBSSxhQUFPO0FBQ3pFLFdBQU8sSUFBSSxLQUFLLEdBQUcsS0FBSyxHQUFHLENBQUM7QUFBQSxFQUM5QjtBQUFBO0FBQUEsRUFHSyxhQUFhLEtBQXlCO0FBQzNDLFFBQUksQ0FBQztBQUFLLGFBQU87QUFDakIsVUFBTSxJQUFJLE9BQU8sR0FBRyxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDbEMsVUFBTSxJQUFJLEVBQUUsTUFBTSwrQkFBK0I7QUFDakQsUUFBSSxDQUFDO0FBQUcsYUFBTztBQUNmLFdBQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFBQSxFQUNsQztBQUFBLEVBR1UsWUFBWSxLQUFhO0FBQy9CLFFBQUksT0FBTyxRQUFRO0FBQVUsYUFBTztBQUNwQyxVQUFNLElBQUksSUFBSSxNQUFNLEtBQUssV0FBVztBQUNwQyxRQUFJLENBQUM7QUFBRyxhQUFPO0FBQ2YsVUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQ2IsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNYLFFBQUksS0FBSyxNQUFNLEtBQUs7QUFBSSxhQUFPO0FBQy9CLFVBQU0sS0FBSyxvQkFBSSxLQUFLO0FBQ3BCLE9BQUcsU0FBUyxJQUFJLElBQUksR0FBRyxDQUFDO0FBQ3hCLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBLEVBSU0sYUFDTixHQUNBLE1BQWlELFFBQ1A7QUE5WDVDLFFBQUFBLEtBQUE7QUErWEUsUUFBSSxLQUFLO0FBQU0sYUFBTyxRQUFRLFFBQVEsSUFBSSxDQUFDLElBQUcsSUFBRyxFQUFFO0FBRW5ELFlBQVEsS0FBSztBQUFBLE1BQ1gsS0FBSyxPQUFPO0FBQ1YsY0FBTSxJQUFJLE9BQU8sQ0FBQztBQUNsQixlQUFPLE1BQU0sQ0FBQyxJQUFJLElBQUk7QUFBQSxNQUN4QjtBQUFBLE1BQ0EsS0FBSyxRQUFRO0FBQ2pCLFlBQUksSUFBSSxPQUFPLENBQUM7QUFDaEIsWUFBSSxLQUFLLGFBQWEsS0FBSyxDQUFDO0FBQUcsY0FBSSxFQUFFLE1BQU0sR0FBRSxFQUFFO0FBQy9DLGNBQU0sSUFBSSxLQUFLLGFBQWEsQ0FBQztBQUN2QixlQUFPLElBQUksRUFBRSxRQUFRLElBQUk7QUFBQSxNQUMzQjtBQUFBLE1BQ0EsS0FBSyxRQUFRO0FBQ1gsY0FBTSxLQUFJQSxNQUFBLE9BQU8sQ0FBQyxFQUFFLE1BQU0sT0FBTyxNQUF2QixnQkFBQUEsSUFBMkI7QUFDckMsZUFBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJO0FBQUEsTUFDekI7QUFBQSxNQUNBLEtBQUssUUFBUTtBQUNYLGNBQU0sUUFBUSxjQUFjLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRSxNQUFJLEVBQUUsY0FBYyxHQUFFLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDckUsZUFBTyx3QkFBUztBQUFBLE1BQ2xCO0FBQUEsTUFDQSxTQUFTO0FBQ1AsY0FBTSxNQUFPLE9BQU8sZ0JBQUssRUFBRTtBQUMzQixjQUFNLE9BQU8sSUFBSSxVQUFVLE1BQU0sRUFDaEIsUUFBUSxvQkFBbUIsRUFBRSxFQUM3QixRQUFRLDRCQUEyQixFQUFFLEVBQ3JDLEtBQUssRUFDTCxZQUFZO0FBQzdCLGNBQU0sTUFBTyxVQUFLLENBQUMsTUFBTixZQUFXO0FBRXhCLGNBQU0sTUFDSixRQUFRLEtBQUssRUFBRSxJQUFJLElBQ25CLFFBQVEsS0FBSyxFQUFFLElBQUksSUFDbkIsS0FBSyxLQUFLLEVBQUUsSUFBUyxJQUNyQiw2QkFBNkIsS0FBSyxFQUFFLElBQUksSUFBSTtBQUM5QyxlQUFPLENBQUMsS0FBSyxNQUFNLEdBQUc7QUFBQSxNQUN4QjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUEsRUFJVSxhQUFhLEdBQVE7QUFDM0IsUUFBSSxLQUFLO0FBQU0sYUFBTztBQUN0QixVQUFNLElBQUksS0FBSyxhQUFhLE9BQU8sQ0FBQyxDQUFDO0FBQ3JDLFFBQUksQ0FBQztBQUFHLGFBQU8sT0FBTyxDQUFDO0FBQ3ZCLFVBQU0sSUFBSSxFQUFFLFlBQVksR0FDdEIsSUFBSSxFQUFFLFNBQVMsSUFBSSxHQUNuQixLQUFLLEVBQUUsUUFBUTtBQUNqQixXQUFPLEdBQUcsS0FBSyxJQUFJLEtBQUssTUFBTSxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU0sS0FBSztBQUFBLEVBQy9EO0FBQUEsRUFFUSxPQUFPLEdBQVEsTUFBYztBQUNuQyxXQUFPLEtBQUssV0FBVyxPQUFPLElBQzFCLEtBQUssTUFBTSxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsTUFBTSx1QkFBSSxJQUFJLENBQUMsSUFDMUMsRUFBRSxJQUFJO0FBQUEsRUFDWjtBQUNGOzs7QUNyYkEsSUFBQUMsbUJBQTBDO0FBR25DLElBQU0sWUFBTixNQUFlO0FBQUEsRUFZWixZQUFZLEtBQVU7QUFGOUIsU0FBaUIsVUFBVSxvQkFBSSxJQUEwQjtBQWtCekQ7QUFBQSxTQUFRLFdBQVcsQ0FBK0IsSUFBTSxLQUFHLFFBQVE7QUFDakUsVUFBSSxJQUFpQjtBQUNyQixhQUFPLElBQUksTUFBcUI7QUFDOUIsWUFBSTtBQUFHLHVCQUFhLENBQUM7QUFDckIsWUFBSSxPQUFPLFdBQVcsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUU7QUFBQSxNQUMxQztBQUFBLElBQ0Y7QUFFQSxTQUFRLFlBQVksS0FBSyxTQUFTLENBQUMsU0FBaUI7QUFDbEQsV0FBSyxRQUFRLFFBQVEsUUFBTSxHQUFHLElBQUksQ0FBQztBQUFBLElBQ3JDLEdBQUcsR0FBRztBQXpCSixTQUFLLE1BQU07QUFDWCxTQUFLLGlCQUFpQjtBQUN0QixTQUFLLHFCQUFxQjtBQUFBLEVBQzVCO0FBQUEsRUFkQSxXQUFXLElBQUk7QUFBRSxXQUFPLFVBQVM7QUFBQSxFQUFRO0FBQUEsRUFFcEMsS0FBSyxNQUFjO0FBQ3hCLFNBQUssVUFBVSxJQUFJO0FBQUEsRUFDckI7QUFBQTtBQUFBLEVBYUUsT0FBTyxLQUFLLEtBQVU7QUFDcEIsUUFBSSxDQUFDLFVBQVM7QUFBTyxnQkFBUyxRQUFRLElBQUksVUFBUyxHQUFHO0FBQUEsRUFDeEQ7QUFBQTtBQUFBLEVBR0EsR0FBRyxJQUEyQjtBQUFFLFNBQUssUUFBUSxJQUFJLEVBQUU7QUFBQSxFQUFHO0FBQUEsRUFDdEQsSUFBSSxJQUEwQjtBQUFFLFNBQUssUUFBUSxPQUFPLEVBQUU7QUFBQSxFQUFHO0FBQUE7QUFBQSxFQWdCakQsbUJBQW1CO0FBQ3pCLFVBQU0sSUFBSSxLQUFLLElBQUk7QUFDbkIsS0FBQyxVQUFTLFVBQVMsVUFBUyxRQUFRLEVBQUU7QUFBQSxNQUFRLENBQUMsT0FDN0MsRUFBRSxHQUFHLElBQVcsQ0FBQyxNQUFtQjtBQUNsQyxZQUFJLGFBQWE7QUFBTyxlQUFLLFVBQVUsQ0FBQztBQUFBLE1BRzFDLENBQUM7QUFBQSxJQUNIO0FBR0EsU0FBSyxJQUFJLGNBQWMsR0FBRyxZQUFZLE1BQU0sS0FBSyxVQUFVLENBQUM7QUFBQSxFQUM5RDtBQUFBLEVBRVEsdUJBQXVCO0FBRTdCLFNBQUssSUFBSSxVQUFVLEdBQUcsaUJBQWlCLE1BQU0sS0FBSyxVQUFVLENBQUM7QUFHN0QsU0FBSyxJQUFJLFVBQVU7QUFBQSxNQUFHO0FBQUEsTUFBc0IsTUFDMUMsV0FBVyxNQUFNLEtBQUssVUFBVSxHQUFHLEdBQUc7QUFBQTtBQUFBLElBQ3hDO0FBQUEsRUFDRjtBQUFBO0FBQUEsRUFFRixhQUFhLE1BQWM7QUFDekIsUUFBSSxFQUFFLDhCQUE4QjtBQUNwQyxTQUFLLFVBQVUsSUFBSTtBQUFBLEVBQ3JCO0FBQ0E7QUFyRU8sSUFBTSxXQUFOO0FBQU0sU0FDSSxRQUF5Qjs7O0FDc0MxQyxTQUFTQyxJQUFHLE1BQWMsS0FBYSxHQUFXO0FBN0NsRCxNQUFBQyxLQUFBO0FBOENFLFVBQU8sTUFBQUEsTUFBQSxXQUFXLElBQUksTUFBTSxHQUFHLE1BQXhCLGdCQUFBQSxJQUE0QixPQUE1QixZQUFrQztBQUMzQztBQUNBLFNBQVNDLElBQUcsTUFBYyxLQUFhLEdBQVcsR0FBUTtBQUd4RCxRQUFNLE9BQVEsV0FBbUIsUUFBUSxJQUFJLEdBQUc7QUFDaEQsUUFBTSxPQUFPLDZCQUFPO0FBQ3BCLE1BQUksTUFBTTtBQUNSLFVBQU0sU0FBUyxDQUFDLENBQUUsS0FBYTtBQUMvQixlQUFXLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLE1BQU07QUFDOUM7QUFBQSxFQUNGO0FBQ0EsUUFBTSxNQUFNLGVBQWUsU0FBUztBQUNwQyxNQUFJO0FBQ0YsVUFBTSxPQUFPLEtBQUssTUFBTSxhQUFhLFFBQVEsR0FBRyxLQUFLLElBQUk7QUFDekQsU0FBSyxDQUFDLElBQUk7QUFDVixpQkFBYSxRQUFRLEtBQUssS0FBSyxVQUFVLElBQUksQ0FBQztBQUFBLEVBQ2hELFNBQVEsR0FBTjtBQUNBLGlCQUFhLFFBQVEsS0FBSyxLQUFLLFVBQVUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUFBLEVBQ3REO0FBQ0Y7QUFFQSxTQUFTLFdBQW1CO0FBQzFCLFFBQU0sSUFBSSxvQkFBSSxLQUFLO0FBQ25CLFFBQU0sSUFBSSxFQUFFLFlBQVk7QUFDeEIsUUFBTSxJQUFJLEVBQUUsU0FBUyxJQUFJO0FBQ3pCLFFBQU0sS0FBSyxFQUFFLFFBQVE7QUFDckIsU0FBTyxHQUFHLEtBQUssSUFBSSxLQUFLLE1BQU0sS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLEtBQUs7QUFDL0Q7QUFFQSxTQUFTLGNBQWMsTUFBZ0I7QUE1RXZDLE1BQUFELEtBQUE7QUE4RUEsTUFBSSxDQUFDLEtBQUssV0FBVyxLQUFLLFlBQVksS0FBSztBQUN6QyxVQUFNO0FBQUE7QUFBQSxPQUVKLHdCQUFBQSxNQUFBLEtBQUssU0FBTCxnQkFBQUEsSUFBVyxTQUFYLG1CQUFpQixjQUFqQiw2Q0FDQSxzQkFBSyxTQUFMLG1CQUFXLFVBQVgsbUJBQWtCLGNBQWxCLGdDQURBO0FBQUE7QUFBQSxRQUdDLFNBQU8sVUFBSyxTQUFMLG1CQUFXLFdBQVUsV0FDekIsV0FBVyxLQUFLLEtBQUssS0FBSyxJQUMxQixTQUFTO0FBQUE7QUFBQTtBQUVmLFdBQU87QUFBQSxNQUNMLEdBQUc7QUFBQSxNQUNILFNBQVM7QUFBQSxNQUNULGFBQWEsRUFBRSxHQUFHLEtBQUssYUFBYSxTQUFTLEtBQUs7QUFBQSxJQUNwRDtBQUFBLEVBQ0Y7QUFDQSxTQUFPO0FBRVA7QUFHQSxTQUFTLFdBQVcsSUFBb0I7QUFDdEMsUUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO0FBQ3JCLFFBQU0sSUFBSSxFQUFFLFlBQVk7QUFDeEIsUUFBTSxJQUFJLEVBQUUsU0FBUyxJQUFJO0FBQ3pCLFFBQU0sS0FBSyxFQUFFLFFBQVE7QUFDckIsU0FBTyxHQUFHLEtBQUssSUFBRSxLQUFHLE1BQUksS0FBSyxLQUFLLEtBQUcsS0FBRyxNQUFJLEtBQUs7QUFDbkQ7QUFLTyxJQUFNLDZCQUFOLE1BQWlDO0FBQUE7QUFBQTtBQUFBLEVBV3RDLFlBQTZCLEtBQVU7QUFBVjtBQU43QixTQUFRLFNBQXFELG9CQUFJLElBQUk7QUFDckUsU0FBUSxhQUFnQjtBQUN4QixTQUFRLGVBQStCO0FBQ3ZDO0FBQUEsU0FBUSxpQkFBZ0I7QUE4RjFCO0FBQUE7QUFBQTtBQUFBLFNBQVEsMEJBQTBCLENBQUMsTUFBd0I7QUFFekQsWUFBTSxTQUFVLEVBQUUsT0FDZixRQUFRLGdDQUFnQztBQUMzQyxVQUFJLENBQUM7QUFBUTtBQUdiLGVBQVMsaUJBQThCLG1CQUFtQixFQUFFLFFBQVEsUUFBTTtBQUN4RSxjQUFNLE1BQU0sR0FBRyxRQUFRO0FBRXZCLFlBQUksS0FBSyxPQUFPLElBQUksR0FBRyxHQUFHO0FBQ3hCLGVBQUssU0FBUyxNQUFNLEdBQUc7QUFDdkI7QUFBQSxRQUNGO0FBSUEsY0FBTSxNQUFNLENBQUMsR0FBRyxLQUFLLE9BQU8sT0FBTyxDQUFDLEVBQUUsS0FBSyxPQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVztBQUN0RSxZQUFJO0FBQUssZUFBSyxTQUFTLE1BQU0sSUFBSSxRQUFRLENBQUM7QUFBQSxNQUM1QyxDQUFDO0FBQUEsSUFDSDtBQStYRSxTQUFpQixlQUFlO0FBQ2hDLFNBQWlCLGNBQWU7QUE3ZTlCLFNBQUssTUFBTSxJQUFJLGdCQUFnQixHQUFHO0FBSWxDLFVBQU0sUUFBUSxDQUFDLFNBQWlCLEtBQUssYUFBYSxJQUFJO0FBQ3RELGFBQVMsRUFBRSxHQUFHLEtBQUs7QUFFbkIsSUFBQyxLQUFhLG1CQUFtQixNQUFNLFNBQVMsRUFBRSxJQUFJLEtBQUs7QUFRM0QsU0FBSyxLQUFLO0FBQUE7QUFBQSxNQUVaLFVBQWVEO0FBQUEsTUFDZixVQUFlRTtBQUFBLE1BQ2YsZUFBZSxDQUFDLEdBQUcsTUFBTSxXQUFXLElBQUksR0FBRyxDQUFDO0FBQUE7QUFBQSxNQUd4QyxRQUFlLENBQUMsSUFBSSxTQUFTLEtBQUssSUFBSSxPQUFPLElBQUksSUFBSTtBQUFBLE1BQ3JELGNBQWUsQ0FBQyxNQUFNLEtBQUssSUFBSSxhQUFhLENBQUM7QUFBQSxNQUM3QyxjQUFlLENBQUMsTUFBTSxLQUFLLElBQUksYUFBYSxDQUFDO0FBQUEsTUFDN0MsY0FBZSxDQUFDLE1BQU0sS0FBSyxJQUFJLGFBQWEsQ0FBQztBQUFBLE1BQzdDLFdBQWUsQ0FBQyxTQUFTLEtBQUssSUFBSSxVQUFVLElBQUk7QUFBQTtBQUFBLE1BR3BELFVBQVcsWUFBWTtBQUFFLGNBQU0sS0FBSyxTQUFTLElBQUk7QUFBQSxNQUFHO0FBQUEsTUFDbEQsTUFBTSxPQUFPLE1BQU0sS0FBSyxLQUFLLFFBQVE7QUFDckMsUUFBQUEsSUFBRyxNQUFNLEtBQUssS0FBSyxHQUFHO0FBQ3RCLGNBQU0sS0FBSyxTQUFTLE1BQU0sR0FBRztBQUFBLE1BQy9CO0FBQUE7QUFBQSxNQUdBLFlBQVksWUFBWTtBQUFBLE1BQUM7QUFBQSxJQUN2QjtBQUdBLFNBQUssS0FBSyxJQUFJLFVBQVUsS0FBSyxLQUFLLEVBQUU7QUFPeEMsU0FBSyxJQUFJLFVBQVUsWUFBWTtBQUFBLE1BQzdCO0FBQUEsTUFDQSxDQUFDLFFBQVE7QUFDUCxZQUFJLENBQUUsSUFBSSxPQUNILFFBQVEsZ0NBQWdDO0FBQUc7QUFHbEQsbUJBQVcsTUFBTTtBQWpMckIsY0FBQUQsS0FBQTtBQWtMTSxnQkFBTSxRQUFPLGtCQUFBQSxNQUFBLEtBQUssSUFBSSxVQUFVLGVBQW5CLGdCQUFBQSxJQUErQixTQUEvQixtQkFDVCxnQkFEUyxtQkFDSSxrQkFESiw0QkFDb0I7QUFDakMsY0FBSSxDQUFDO0FBQU07QUFFWCxnQkFBTSxNQUFPLEtBQUssUUFBUTtBQUMxQixnQkFBTSxRQUFRLDRCQUFLLElBQUksVUFBVSxlQUFuQixtQkFBK0IsU0FBL0IsbUJBQTZDLFNBQTdDLG1CQUFtRCxTQUFuRCxZQUEyRDtBQUd6RSxlQUFLLEdBQUc7QUFBQSxZQUNOO0FBQUE7QUFBQSxZQUNBO0FBQUE7QUFBQTtBQUFBLFlBRUEsYUFBYTtBQUFBO0FBQUEsWUFDYjtBQUFBLFVBQ0Y7QUFBQSxRQUNGLEdBQUcsR0FBRztBQUFBLE1BQ1I7QUFBQSxNQUNBO0FBQUE7QUFBQSxJQUNGO0FBQUEsRUFXRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUE0Q0EsTUFBYSxlQUNYLElBQ0EsWUFBa0MsQ0FBQyxHQUNuQyxLQUNBLFNBQ0EsVUFBWSxPQUNaO0FBalFKLFFBQUFBLEtBQUE7QUFrUUksVUFBTSxXQUErQixFQUFFLEdBQUcsVUFBVTtBQUd0RCxRQUFJLFNBQVMsV0FBVyxNQUFNO0FBQzVCLFlBQU0sYUFDSCxNQUFBQSxNQUFBLFVBQWtCLGlCQUFpQixNQUFuQyxPQUFBQSxNQUNBLFVBQWtCLG9CQURsQixZQUVBLFVBQWtCO0FBQ3JCLFVBQUksYUFBYTtBQUFNLGlCQUFTLFVBQVUsT0FBTyxTQUFTLEtBQUs7QUFBQSxJQUNqRTtBQUNFLFVBQU0sSUFBSTtBQUNWLFVBQU0sWUFBVywyQkFBSyxlQUFjO0FBRXBDLFFBQUksS0FBSztBQUFZO0FBQ3JCLFNBQUssYUFBZTtBQUNwQixRQUFJO0FBQVMsV0FBSyxpQkFBaUI7QUFFbkMsUUFBSSxRQUFzQztBQUUxQyxRQUFJO0FBR0YsVUFBSSxFQUFDLDJCQUFLLGVBQWMsQ0FBQztBQUFTO0FBR3hDLFVBQUksQ0FBQyxRQUFRLFFBQVEsVUFBVTtBQUM3QixnQkFBUSxRQUFRLFdBQVcsT0FBTyxXQUFXO0FBQzdDLGlCQUFTLGNBQWM7QUFBQSxNQUN6QixPQUFPO0FBQ0wsaUJBQVMsY0FBYztBQUFBLE1BQ3pCO0FBQ0EsZUFBUyxXQUFZLFFBQVEsUUFBUTtBQUNyQyxlQUFTLFlBQVksSUFBSTtBQUN6QixjQUFRLFFBQVEsZ0JBQWdCLEtBQUssVUFBVSxRQUFRO0FBR3ZELFlBQU0sZUFBZUQsSUFBRyxVQUFVLFNBQVMsVUFBVyxTQUFTO0FBQy9ELFVBQUksT0FBTyxpQkFBaUIsWUFBWSxlQUFlLEdBQUc7QUFDeEQsaUJBQVMsVUFBVTtBQUFBLE1BQ3JCO0FBTUMsWUFBTSxVQUFTLGNBQVMsU0FBVCxZQUNBLElBQUksV0FBVyxVQUFVLEdBQUcsSUFBSSxXQUFXLFlBQVksR0FBRyxDQUFDO0FBRzFFLFlBQU0sVUFBVSxHQUFHLE1BQU0sRUFDdEIsTUFBTSxDQUFDLE1BQVEsRUFBRSxLQUFLLFdBQVMsTUFBTSxFQUNyQyxNQUFNLENBQUMsTUFBUSxDQUFDLEtBQUssYUFBYSxDQUFDLENBQUMsRUFDckMsSUFBSSxDQUFDLE1BQU07QUF0VGQsWUFBQUM7QUFzVGlCLDZCQUFjO0FBQUE7QUFBQSxVQUMzQixHQUFHO0FBQUEsVUFDSCxNQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVUEsTUFBQSxFQUFFLEtBQUssYUFBUCxPQUFBQSxNQUFtQixFQUFFLEtBQUssS0FBSztBQUFBLFFBQzdELENBQUM7QUFBQSxPQUFDLEVBQ0EsTUFBTTtBQUdWLFlBQU0sY0FBYyxLQUFLLElBQUksTUFBTSxTQUFTLEVBQ3pDLE9BQU8sT0FBSyxFQUFFLGNBQWMsWUFBWSxFQUFFLEtBQUssV0FBVyxTQUFTLEdBQUcsQ0FBQyxFQUN2RSxJQUFJLE9BQUs7QUFDUixjQUFNLFFBQVEsV0FBVyxFQUFFLEtBQUssS0FBSztBQUNyQyxlQUFPO0FBQUEsVUFDTCxNQUFhLEVBQUUsTUFBSyxFQUFFLE1BQU0sTUFBSyxHQUFHLFNBQVMsRUFBRSxJQUFJLEdBQUcsUUFBUSxVQUFTLEVBQUUsU0FBUztBQUFBLFVBQ2xGLGFBQWEsRUFBRSxPQUFPLEVBQUUsU0FBUztBQUFBLFVBQ2pDLFNBQWE7QUFBQTtBQUFBLFVBQ2IsTUFBYTtBQUFBLFFBQ2Y7QUFBQSxNQUNGLENBQUM7QUFHSCxZQUFNLGNBQWMsS0FBSyxJQUFJLE1BQU0sU0FBUyxFQUN6QyxPQUFPLE9BQUssRUFBRSxjQUFjLFFBQ2hCLEVBQUUsU0FBUyxTQUFTLGFBQWEsS0FDakMsRUFBRSxLQUFLLFdBQVcsU0FBUyxHQUFHLENBQUMsRUFDM0MsSUFBSSxPQUFLO0FBQ1IsY0FBTSxRQUFRLFdBQVcsRUFBRSxLQUFLLEtBQUs7QUFDckMsZUFBTztBQUFBLFVBQ0wsTUFBYSxFQUFFLE1BQUssRUFBRSxNQUFNLE1BQUssR0FBRyxTQUFTLEVBQUUsSUFBSSxHQUFHLFFBQVEsVUFBUyxFQUFFLFNBQVM7QUFBQSxVQUNsRixhQUFhLEVBQUUsT0FBTyxFQUFFLFNBQVMsUUFBUSxpQkFBaUIsRUFBRSxFQUFFO0FBQUEsVUFDOUQsU0FBYTtBQUFBO0FBQUEsVUFDYixNQUFhO0FBQUEsUUFDZjtBQUFBLE1BQ0YsQ0FBQztBQUdGLFlBQU0sV0FBVyxDQUFDLEdBQUcsYUFBYSxHQUFHLFNBQVMsR0FBRyxXQUFXO0FBSXZELFlBQU0sWUFBdUIsRUFBRSxNQUFLLGFBQWtCLE1BQUssU0FBVSxRQUFPLE9BQU8sUUFBTyxNQUFNLFFBQU8sT0FBTztBQUM5RyxZQUFNLFdBQXVCLEVBQUUsTUFBSyxRQUFjLE1BQUssUUFBVSxRQUFPLE9BQU8sUUFBTyxNQUFNLFFBQU8sT0FBTztBQUUxRyxZQUFNLFNBQVcsTUFBTSxRQUFRLFNBQVMsS0FBSyxJQUFJLFNBQVMsUUFBUSxDQUFDO0FBQ25FLFlBQU0sVUFBdUI7QUFBQSxRQUMzQjtBQUFBLFFBQ0EsR0FBRyxPQUNBLE9BQU8sQ0FBQyxNQUFpQixDQUFDLENBQUMsY0FBYSxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUNoRSxJQUFJLE9BQUU7QUFyV2pCLGNBQUFBLEtBQUFFLEtBQUFDO0FBcVdxQjtBQUFBLFlBQUUsR0FBRztBQUFBLFlBQ2QsU0FBU0gsTUFBQSxFQUFFLFdBQUYsT0FBQUEsTUFBYTtBQUFBLFlBQ3RCLFNBQVNFLE1BQUEsRUFBRSxXQUFGLE9BQUFBLE1BQVk7QUFBQSxZQUNyQixTQUFVQyxNQUFBLEVBQVUsV0FBVixPQUFBQSxNQUFvQjtBQUFBLFVBQ2hDO0FBQUEsU0FBRTtBQUFBLFFBQ0o7QUFBQSxNQUNGO0FBR04sZUFBUyxpQkFBaUIsT0FBTyxJQUFJLFVBQVU7QUFDN0MsY0FBTSxLQUFLLGVBQWUsSUFBSSxVQUFVLEtBQUssU0FBUyxDQUFDO0FBQUEsTUFDekQ7QUFDTSxjQUFRLElBQUk7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxNQUNGO0FBR04sY0FBUSxhQUFhLG1CQUFtQixNQUFNLFFBQVEsQ0FBQztBQUN2RCxXQUFLLE9BQU8sSUFBSSxNQUFNLFFBQVEsR0FBRyxLQUFLO0FBRWhDLFlBQU0sTUFBTSxRQUFRLE9BQU87QUFHM0IsWUFBTSxlQUFlLFFBQ2xCLE9BQU8sQ0FBQUMsT0FBS0EsR0FBRSxNQUFNLEVBQ3BCLElBQUksQ0FBQUEsT0FBSztBQUNSLGNBQU0sT0FBTyxDQUFDLEdBQUcsSUFBSTtBQUFBLFVBQ25CLE1BQU8sYUFBYSxJQUFJLE9BQUs7QUFyWXpDLGdCQUFBSjtBQXNZYyxrQkFBTSxNQUFNLEtBQUssSUFBSSxPQUFPLEdBQUdJLEdBQUUsSUFBSTtBQUNyQyxvQkFBUUEsR0FBRSxRQUFRO0FBQUEsY0FDaEIsS0FBSyxRQUFRO0FBQ1gsc0JBQU0sTUFBTSxNQUFPLGFBQWEsR0FBRztBQUNuQyx1QkFBTyxvQkFBTztBQUFBLGNBQ2hCO0FBQUEsY0FDQSxLQUFLLFFBQVE7QUFDWCxzQkFBTSxJQUFJLE9BQU8sUUFBUSxXQUNyQixPQUFPLEdBQUcsS0FDVkosTUFBQSxPQUFPLEdBQUcsRUFBRSxNQUFNLE9BQU8sTUFBekIsZ0JBQUFBLElBQTZCO0FBQ2pDLHVCQUFPLGdCQUFLO0FBQUEsY0FDZDtBQUFBLGNBQ0E7QUFDRSx1QkFBTyxPQUFPLG9CQUFPLEdBQUc7QUFBQSxZQUM1QjtBQUFBLFVBQ0YsQ0FBQztBQUFBLFFBQ0gsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFFLE1BQUksT0FBTyxDQUFDLEVBQUUsY0FBYyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2pELGVBQU8sRUFBRSxNQUFNSSxHQUFFLE1BQU0sTUFBTUEsR0FBRSxNQUFNLFFBQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxFQUFFO0FBQUEsTUFDL0QsQ0FBQztBQUVILFlBQU0saUJBQWlCLE1BQU07QUFDM0IsY0FBTSxNQUFNLG9CQUFJLElBQVk7QUFDNUIsY0FBTSxhQUFhO0FBQUEsVUFBUSxPQUFFO0FBNVpyQyxnQkFBQUosS0FBQUUsS0FBQUM7QUE2WkcsMEJBQU0sU0FBUUgsTUFBQSxFQUFFLFNBQUYsZ0JBQUFBLElBQVEsSUFBSSxJQUFJLEVBQUUsS0FBTSxPQUNwQyxNQUFNLFFBQVEsRUFBRSxJQUFJLElBQVMsRUFBRSxPQUMvQixFQUFDRyxPQUFBRCxNQUFBLEVBQUUsU0FBRixnQkFBQUEsSUFBUSxTQUFSLE9BQUFDLE1BQWdCLEVBQUUsSUFBSSxHQUN4QixRQUFRLENBQUMsTUFBVyxJQUFJLElBQUksQ0FBQyxDQUFDO0FBQUE7QUFBQSxRQUMxQjtBQUNBLGVBQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUk7QUFBQSxNQUNsRCxHQUFHO0FBR0gsWUFBTSxZQUFZLFFBQ2YsT0FBTyxDQUFBQyxPQUFLQSxHQUFFLE1BQU0sRUFDcEIsSUFBSSxDQUFBQSxPQUFLO0FBQ1IsY0FBTSxPQUFPLENBQUMsR0FBRyxJQUFJO0FBQUEsVUFDbkIsTUFBTyxhQUFhLElBQUksUUFBTTtBQTFhMUMsZ0JBQUFKO0FBMmFjLGtCQUFNLE1BQU0sS0FBSyxJQUFJLE9BQU8sSUFBSUksR0FBRSxJQUFJO0FBQ3RDLG9CQUFRQSxHQUFFLFFBQVE7QUFBQSxjQUNoQixLQUFLLFFBQVE7QUFDWCxzQkFBTSxNQUFNLE1BQU8sYUFBYSxHQUFHO0FBQ25DLHVCQUFPLG9CQUFPO0FBQUEsY0FDaEI7QUFBQSxjQUNBLEtBQUssUUFBUTtBQUNYLHNCQUFNLElBQUksT0FBTyxRQUFRLFdBQ3JCLE9BQU8sR0FBRyxLQUNWSixNQUFBLE9BQU8sR0FBRyxFQUFFLE1BQU0sT0FBTyxNQUF6QixnQkFBQUEsSUFBNkI7QUFDakMsdUJBQU8sZ0JBQUs7QUFBQSxjQUNkO0FBQUEsY0FDQTtBQUNFLHVCQUFPLE9BQU8sb0JBQU8sR0FBRztBQUFBLFlBQzVCO0FBQUEsVUFDRixDQUFDO0FBQUEsUUFDSCxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUUsTUFBSSxPQUFPLENBQUMsRUFBRSxjQUFjLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDaEQsZUFBTyxFQUFFLE1BQU1JLEdBQUUsTUFBTSxNQUFNQSxHQUFFLE1BQU0sUUFBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLEVBQUU7QUFBQSxNQUNoRSxDQUFDO0FBR0gsWUFBTSxTQUFTLG9CQUFJLElBQVk7QUFDL0IsWUFBTSxhQUFhLFFBQVEsUUFBTTtBQWpjdkMsWUFBQUosS0FBQUUsS0FBQUM7QUFrY1EsVUFBQ0EsT0FBQUQsT0FBQUYsTUFBQSxHQUFHLFNBQUgsZ0JBQUFBLElBQVMsU0FBVCxPQUFBRSxNQUFpQixHQUFHLFNBQXBCLE9BQUFDLE1BQTRCLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBYyxPQUFPLElBQUksQ0FBQyxDQUFDO0FBQUEsTUFDdkUsQ0FBQztBQUNELFlBQU0sWUFBWSxPQUFPLE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLE1BQU0sRUFBRSxLQUFLLENBQUMsSUFBSTtBQUlqRSxZQUFNLFdBQVcsS0FBSyxhQUFhLFNBQVMsV0FBWSxNQUFNLFFBQVEsQ0FBQztBQUN2RSxZQUFNLEtBQUssR0FBRztBQUFBLFFBQ1o7QUFBQSxRQUNBLFNBQVM7QUFBQSxRQUNULE1BQU0sUUFBUTtBQUFBLFFBQ2QsTUFBTTtBQUFBLFFBQ047QUFBQSxTQUNBLGNBQVMsWUFBVCxZQUFvQjtBQUFBLFFBQ3BCLE1BQU07QUFBQSxRQUNOO0FBQUEsVUFDRSx1QkFBOEIsY0FBUyx5QkFBVCxZQUF3QztBQUFBLFVBQ3RFLG9CQUE4QixjQUFTLHNCQUFULFlBQXdDO0FBQUEsVUFDdEUsc0JBQThCLGNBQVMsd0JBQVQsWUFBaUM7QUFBQTtBQUFBLFVBQy9ELHNCQUE4QixjQUFTLHdCQUFULFlBQXdDO0FBQUEsVUFDdEUsOEJBQThCLGNBQVMsZ0NBQVQsWUFBd0M7QUFBQSxVQUN0RSxnQkFBOEIsY0FBUyxrQkFBVCxZQUF3QztBQUFBLFVBQ3RFLG9CQUE4QixjQUFTLHNCQUFULFlBQXdDO0FBQUEsVUFDdEUsYUFBOEIsY0FBUyxTQUFULFlBQWlCO0FBQUEsUUFDakQ7QUFBQSxRQUNBO0FBQUE7QUFBQSxRQUNBO0FBQUE7QUFBQSxRQUNBO0FBQUE7QUFBQSxNQUNGO0FBQUEsSUFDRixVQUFFO0FBQ0EsV0FBSyxpQkFBaUI7QUFDdEIsV0FBSyxhQUFpQjtBQUFBLElBQ3hCO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsTUFBYyxTQUFTLFVBQVUsT0FBTyxLQUFjO0FBeGV4RCxRQUFBSCxLQUFBO0FBeWVJLFFBQUksRUFBRSxpQkFBaUIsb0JBQU8sMEJBQXFCLFNBQVM7QUFDNUQsV0FBTyxLQUFLLFlBQVk7QUFDdEIsWUFBTSxJQUFJLFFBQVEsT0FBSyxXQUFXLEdBQUcsRUFBRSxDQUFDO0FBQUEsSUFDMUM7QUFLSixRQUFJLFFBQTJDLE1BQ3pDLEtBQUssT0FBTyxJQUFJLEdBQUcsS0FDbEIsTUFBTTtBQW5mYixVQUFBQSxLQUFBRTtBQW9mUSxZQUFNLFFBQVFBLE9BQUFGLE1BQUEsK0JBQU8sV0FBUCxnQkFBQUEsSUFBK0IsWUFBL0IsZ0JBQUFFLElBQUEsS0FBQUYsS0FBeUM7QUFDdkQsWUFBTSxPQUFPLE9BQVEsS0FBcUIsUUFBUSxZQUFZO0FBQzlELGFBQU8sT0FBTyxLQUFLLE9BQU8sSUFBSSxJQUFJLElBQ3BCLENBQUMsR0FBRyxLQUFLLE9BQU8sT0FBTyxDQUFDLEVBQUUsSUFBSTtBQUFBLElBQzlDLEdBQUc7QUFHVCxRQUFJLENBQUMsU0FBUyxLQUFLO0FBQ2pCLFlBQU0sT0FBTyxTQUFTO0FBQUEsUUFDUixxQkFBcUI7QUFBQSxNQUFPO0FBQzFDLFVBQUksTUFBTTtBQUVSLGNBQU0sU0FBUyxZQUFBQSxNQUFBLEtBQUssSUFDSCxZQURGLGdCQUFBQSxJQUNXLFlBRFgsbUJBQ29CLGFBRHBCLG1CQUM4QjtBQUM3QyxZQUFJLE9BQU87QUFFVCxnQkFBTSxLQUFVLEtBQUssSUFBSTtBQUN6QixjQUFJLENBQUMsR0FBRyxVQUFVO0FBQ2hCLGtCQUFNLElBQUksUUFBYyxTQUFJO0FBdGdCcEMsa0JBQUFBO0FBc2dCdUMsc0JBQUFBLE1BQUEsR0FBRyxTQUFILGdCQUFBQSxJQUFBLFNBQVUsWUFBWTtBQUFBLGFBQUk7QUFBQSxVQUMzRDtBQUVBLGdCQUFNLEtBQUs7QUFBQSxZQUNUO0FBQUE7QUFBQSxZQUNBLEtBQUssUUFBUSxnQkFDVCxLQUFLLE1BQU0sS0FBSyxRQUFRLGFBQWEsSUFDckMsQ0FBQztBQUFBO0FBQUEsWUFDTDtBQUFBLGNBQUUsYUFDRyxzQkFBSyxRQUFRLHdCQUF3QixNQUFyQyxtQkFBZ0QsU0FBaEQsbUJBQXNELFNBQXRELFlBQThEO0FBQUEsWUFDbkU7QUFBQTtBQUFBLFlBQ0E7QUFBQTtBQUFBLFlBQ0E7QUFBQTtBQUFBLFVBQ0Y7QUFDQSxrQkFBUSxLQUFLLE9BQU8sSUFBSSxHQUFHO0FBQUEsUUFDN0I7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQU9FLFFBQUksT0FBTztBQUNULFlBQU0sS0FBS0QsSUFBRyxNQUFNLFVBQVUsRUFBRSxXQUFZLE1BQU0sUUFBUSxHQUFHLFNBQVM7QUFDdEUsVUFBSSxPQUFPLE9BQU8sWUFBWSxLQUFLO0FBQUcsY0FBTSxVQUFVLEVBQUUsVUFBVTtBQUFBLElBQ3BFO0FBR0EsUUFBSSxTQUFTLENBQUMsU0FBUyxLQUFLLFNBQVMsTUFBTSxNQUFNLENBQUMsR0FBRztBQUVuRCxZQUFNLFFBQVEsU0FBUztBQUFBLFFBQ3JCLHFCQUFxQixNQUFNLFFBQVE7QUFBQSxNQUNyQztBQUVBLFVBQUksT0FBTztBQUNULFFBQUMsTUFBYyxNQUFNLElBQUk7QUFBQSxNQUMzQixPQUFPO0FBQ0wsYUFBSyxPQUFPLE9BQU8sTUFBTSxRQUFRLENBQUM7QUFDbEMsZ0JBQVE7QUFBQSxNQUNWO0FBQUEsSUFDRjtBQUNBLFFBQUksQ0FBQyxPQUFPO0FBQ1YsVUFBSSxFQUFFLCtDQUEwQztBQUNoRDtBQUFBLElBQ0Y7QUFFRSxRQUFJLEtBQUssdUJBQXVCLEtBQUs7QUFDckMsVUFBTSxNQUFNLFFBQVEsT0FBTztBQUMzQixVQUFNLEtBQUs7QUFBQSxNQUNULE1BQU0sSUFBSTtBQUFBLE1BQ1YsTUFBTSxVQUFVO0FBQUEsTUFDaEIsTUFBTSxLQUFLO0FBQUEsTUFDWCxNQUFNLE1BQU07QUFBQSxNQUNaO0FBQUEsSUFDRjtBQUNBLFFBQUksUUFBUSx1QkFBdUIsS0FBSztBQUc1QyxVQUFNLFVBQVUsTUFBTSxRQUFRO0FBSTlCLGVBQVcsTUFBTTtBQUNmLFdBQUssT0FBTyxRQUFRLENBQUMsR0FBRyxPQUFPO0FBQzdCLFlBQUksT0FBTztBQUFTO0FBQ3BCLFlBQUksQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFLElBQUk7QUFBRyxlQUFLLE9BQU8sT0FBTyxFQUFFO0FBQUEsTUFDNUQsQ0FBQztBQUFBLElBQ0gsR0FBRyxHQUFHO0FBQUEsRUFHSjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPSyxPQUFPLE1BQVcsTUFBbUI7QUFybEI1QyxRQUFBQyxLQUFBO0FBdWxCRSxRQUFJLFNBQVMsYUFBYTtBQUV4QixZQUFNLFdBQVUsTUFBQUEsTUFBQSw2QkFBTSxnQkFBTixnQkFBQUEsSUFBbUIsVUFBbkIsWUFBNEIsNkJBQU07QUFDbEQsVUFBSSxXQUFXLE9BQU8sT0FBTyxFQUFFLEtBQUssTUFBTTtBQUFJLGVBQU87QUFHckQsWUFBTSxRQUFPLHdDQUFNLFNBQU4sbUJBQVksYUFBWixZQUF3QjtBQUNyQyxhQUFPLEtBQUssUUFBUSxpQkFBaUIsRUFBRTtBQUFBLElBQ3pDO0FBR0EsV0FBTyxLQUFLLFdBQVcsT0FBTyxJQUMxQixLQUFLLE1BQU0sR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLE1BQU0sdUJBQUksSUFBSSxJQUFJLElBQzdDLEtBQUssSUFBSTtBQUFBLEVBQ2Y7QUFBQSxFQUtVLGFBQWEsS0FBYTtBQUNoQyxRQUFJLE9BQU8sUUFBUTtBQUFVLGFBQU87QUFDcEMsVUFBTSxJQUFJLElBQUksTUFBTSxLQUFLLFlBQVk7QUFDckMsUUFBSSxDQUFDO0FBQUcsYUFBTztBQUNmLFVBQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ3JDLFFBQUksSUFBRSxPQUFNLElBQUUsUUFBTSxLQUFHLEtBQUcsS0FBRyxNQUFJLElBQUUsS0FBRyxJQUFFO0FBQUksYUFBTztBQUNuRCxXQUFPLElBQUksS0FBSyxHQUFHLEtBQUcsR0FBRyxDQUFDO0FBQUEsRUFDNUI7QUFBQSxFQUVRLFlBQVksS0FBYTtBQUMvQixRQUFJLE9BQU8sUUFBUTtBQUFVLGFBQU87QUFDcEMsVUFBTSxJQUFJLElBQUksTUFBTSxLQUFLLFdBQVc7QUFDcEMsUUFBSSxDQUFDO0FBQUcsYUFBTztBQUNmLFVBQU0sS0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUcsQ0FBQyxFQUFFLENBQUM7QUFDdkIsUUFBSSxLQUFHLE1BQUksS0FBRztBQUFJLGFBQU87QUFDekIsVUFBTSxLQUFHLG9CQUFJLEtBQUs7QUFBRyxPQUFHLFNBQVMsSUFBRyxJQUFHLEdBQUUsQ0FBQztBQUFHLFdBQU87QUFBQSxFQUN0RDtBQUFBLEVBRVEsYUFBYSxHQUFRO0FBQzNCLFFBQUksS0FBSztBQUFNLGFBQU87QUFDdEIsVUFBTSxJQUFJLEtBQUssYUFBYSxPQUFPLENBQUMsQ0FBQztBQUNyQyxRQUFJLENBQUM7QUFBRyxhQUFPLE9BQU8sQ0FBQztBQUN2QixVQUFNLElBQUUsRUFBRSxZQUFZLEdBQUcsSUFBRSxFQUFFLFNBQVMsSUFBRSxHQUFHLEtBQUcsRUFBRSxRQUFRO0FBQ3hELFdBQU8sR0FBRyxLQUFLLElBQUUsS0FBRyxNQUFJLEtBQUssS0FBSyxLQUFHLEtBQUcsTUFBSSxLQUFLO0FBQUEsRUFDbkQ7QUFBQSxFQUVRLGFBQWEsR0FBUTtBQUMzQixRQUFJLEtBQUc7QUFBTSxhQUFPO0FBQ3BCLFVBQU0sSUFBSSxPQUFPLE1BQUksV0FBUyxJQUFFLE9BQU8sQ0FBQztBQUN4QyxVQUFNLElBQUksS0FBSyxhQUFhLENBQUMsS0FBSyxLQUFLLFlBQVksQ0FBQztBQUNwRCxRQUFJO0FBQUcsYUFBTyxFQUFFLFFBQVE7QUFDeEIsVUFBTSxJQUFJLFdBQVcsQ0FBQztBQUN0QixXQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsWUFBWSxJQUFJO0FBQUEsRUFDdEM7QUFBQSxFQUVBLE1BQWMsVUFBVSxRQUF3QztBQUU5RCxXQUFPLEtBQUssSUFBSSxVQUFVLE1BQU07QUFBQSxFQUNsQztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS00sYUFBYSxHQUFRO0FBcnBCN0IsUUFBQUEsS0FBQTtBQXNwQkUsVUFBTSxJQUFJLHVCQUFHO0FBQ2IsUUFBSSxFQUFDLHVCQUFHLFNBQVEsRUFBRSxVQUFVO0FBQU0sYUFBTztBQUd6QyxVQUFNLFFBQU9BLE1BQUEsRUFBRSxhQUFGLE9BQUFBLE1BQWMsRUFBRSxLQUFLO0FBQUEsTUFDaEMsRUFBRSxLQUFLLFlBQVksR0FBRyxJQUFJO0FBQUEsTUFDMUIsRUFBRSxLQUFLLFlBQVksR0FBRztBQUFBLElBQ3hCO0FBR0EsVUFBTSxjQUFhLE9BQUUsT0FBTyxNQUFNLEdBQUcsRUFBRSxJQUFJLE1BQXhCLFlBQTZCO0FBRWhELFdBQU8sU0FBUztBQUFBLEVBQ2xCO0FBQUE7QUFBQSxFQUlRLGFBQWEsTUFBYyxLQUErQjtBQUNoRSxXQUFPO0FBQUEsTUFDTCxHQUFHLEtBQUs7QUFBQTtBQUFBLE1BQ1osVUFBVyxPQUFPLEtBQUssTUFBTSxLQUFLLFFBQVE7QUFDeEMsY0FBTSxLQUFLLFNBQVMsTUFBTSxFQUFFO0FBQUEsTUFDOUI7QUFBQSxNQUNJLE1BQVcsT0FBTyxHQUFHLElBQUksS0FBSyxRQUFRO0FBQ3BDLFFBQUFDLElBQUcsTUFBTSxLQUFLLEtBQUssR0FBRztBQUN0QixjQUFNLEtBQUssU0FBUyxNQUFNLEdBQUc7QUFBQSxNQUMvQjtBQUFBLE1BQ0EsVUFBVyxDQUFDLEdBQUcsR0FBRyxNQUFNRixJQUFHLGdCQUFLLE1BQU0sZ0JBQUssS0FBSyxDQUFDO0FBQUEsTUFDakQsVUFBVyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVFFLElBQUcsZ0JBQUssTUFBTSxnQkFBSyxLQUFLLEdBQUcsR0FBRztBQUFBLElBQzdEO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsYUFBYSxNQUFjO0FBenJCbkMsUUFBQUQsS0FBQTtBQTJyQkUsVUFBTSxrQkFBa0IsTUFBTTtBQUM1QixVQUFJLEtBQUs7QUFBYyxxQkFBYSxLQUFLLFlBQVk7QUFDckQsV0FBSyxlQUFlLE9BQU8sV0FBVyxNQUFNO0FBQzFDLGFBQUssT0FBTyxRQUFRLENBQUMsR0FBRyxRQUFRLEtBQUssU0FBUyxNQUFNLEdBQUcsQ0FBQztBQUN4RCxhQUFLLGVBQWU7QUFBQSxNQUN0QixHQUFHLEVBQUU7QUFBQSxJQUNQO0FBSUEsUUFBSSxRQUFRLEtBQUssT0FBTyxNQUFNO0FBQzVCLFlBQU0sUUFBUSxLQUFLLE9BQU8sT0FBTyxFQUFFLEtBQUssRUFBRTtBQUUxQyxVQUFJLE9BQU87QUFDVCxjQUFNLFVBQVNBLE1BQUEsTUFBTSxVQUFVLEVBQUUsU0FBbEIsT0FBQUEsTUFDQSxNQUFNLEtBQUssRUFBRSxXQUFXLFFBQVEsWUFBWSxFQUFFO0FBQzdELFlBQUksQ0FBQyxLQUFLLEtBQUssV0FBVyxTQUFTLEdBQUc7QUFBRztBQUFBLE1BQzNDO0FBQUEsSUFDRjtBQUdBLFFBQUksQ0FBQyxLQUFLLE9BQU8sTUFBTTtBQUNyQixlQUNHLGlCQUFpQixtQkFBbUIsRUFDcEMsUUFBUSxDQUFDLE1BQU07QUFDZCxjQUFNLE1BQU8sRUFBa0IsUUFBUTtBQUN2QyxZQUFJLENBQUMsS0FBSyxPQUFPLElBQUksR0FBRyxHQUFHO0FBQUEsUUFHM0I7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNMO0FBR0EsUUFBSSxNQUFNO0FBQ1IsWUFBTSxLQUFVLEtBQUssSUFBSTtBQUN6QixZQUFNLFdBQVUsUUFBRyxhQUFhLElBQUksTUFBcEIsbUJBQXVCLGdCQUFlO0FBRXRELFVBQUksQ0FBQyxRQUFRO0FBRVgsY0FBTSxNQUFNLEdBQUcsR0FBRyxZQUFZLE1BQU07QUFDbEMsYUFBRyxPQUFPLEdBQUc7QUFDYiwwQkFBZ0I7QUFBQSxRQUNsQixDQUFDO0FBQ0Q7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUdBLG9CQUFnQjtBQUFBLEVBQ2xCO0FBRUE7OztBQ3p0Qk8sSUFBTSxlQUF5QjtBQUFBLEVBQ3BDO0FBQUEsRUFBVztBQUFBLEVBQVc7QUFBQSxFQUFXO0FBQUEsRUFBVztBQUFBLEVBQzVDO0FBQUEsRUFBVztBQUFBLEVBQVc7QUFBQSxFQUFXO0FBQUEsRUFBVztBQUFBLEVBQzVDO0FBQUEsRUFBVztBQUFBLEVBQVc7QUFBQSxFQUFXO0FBQUEsRUFBVztBQUFBLEVBQzVDO0FBQUEsRUFBVztBQUFBLEVBQVc7QUFBQSxFQUFXO0FBQUEsRUFBVztBQUM5QztBQUdPLElBQU0sZ0JBQTBCO0FBQUEsRUFDckM7QUFBQSxFQUFXO0FBQUEsRUFBVztBQUFBLEVBQVc7QUFBQSxFQUFXO0FBQUEsRUFDNUM7QUFBQSxFQUFXO0FBQUEsRUFBVztBQUFBLEVBQVc7QUFBQSxFQUFXO0FBQUEsRUFDNUM7QUFBQSxFQUFXO0FBQUEsRUFBVztBQUFBLEVBQVc7QUFBQSxFQUFXO0FBQUEsRUFDNUM7QUFBQSxFQUFXO0FBQUEsRUFBVztBQUFBLEVBQVc7QUFBQSxFQUFXO0FBQzlDO0FBc0JPLFNBQVMsWUFDZCxRQUNBLE9BQXdCLENBQUMsR0FDZjtBQTVEWixNQUFBSyxLQUFBO0FBNkRFLFFBQU0sRUFBRSxjQUFjLGtCQUFrQixrQkFBa0IsSUFBSTtBQUc5RCxNQUFJLFFBQVE7QUFDVixhQUNFQSxNQUFBLDhDQUNBLGlCQURBLE9BQUFBLE1BRUEsY0FDQSxNQUFNO0FBQUEsRUFDVjtBQUdBLFdBQ0UscURBQ0EsaUJBREEsWUFFQSxlQUNBLE1BQU07QUFDVjtBQVNPLElBQU0sZUFBTixNQUFtQjtBQUFBLEVBSXhCLFlBQTZCLFNBQW1CO0FBQW5CO0FBSDdCLFNBQWlCLGVBQThELENBQUM7QUFDaEYsU0FBUSxXQUFXO0FBQUEsRUFFOEI7QUFBQTtBQUFBLEVBR2pELE9BQU8sTUFBb0I7QUFDekIsUUFBSSxLQUFLLGFBQWEsSUFBSTtBQUFHO0FBQzdCLFFBQUksS0FBSyxRQUFRLFdBQVcsR0FBRztBQUM3QixXQUFLLGFBQWEsSUFBSSxJQUFJLEVBQUUsWUFBWSxLQUFLO0FBQzdDO0FBQUEsSUFDRjtBQUNBLFVBQU0sTUFBTSxLQUFLLFdBQVcsS0FBSyxRQUFRO0FBQ3pDLFNBQUssYUFBYSxJQUFJLElBQUksRUFBRSxZQUFZLElBQUk7QUFDNUMsU0FBSztBQUFBLEVBQ1A7QUFBQTtBQUFBLEVBR0EsUUFBUSxNQUFzQjtBQUM1QixVQUFNLFFBQVEsS0FBSyxhQUFhLElBQUk7QUFDcEMsUUFBSSxDQUFDLFNBQVMsTUFBTSxjQUFjO0FBQU0sYUFBTztBQUMvQyxXQUFPLEtBQUssUUFBUSxNQUFNLFVBQVU7QUFBQSxFQUN0QztBQUFBO0FBQUEsRUFHQSxTQUFpQztBQUMvQixVQUFNLE1BQThCLENBQUM7QUFDckMsV0FBTyxLQUFLLEtBQUssWUFBWSxFQUFFLFFBQVEsVUFBUTtBQUM3QyxVQUFJLElBQUksSUFBSSxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQy9CLENBQUM7QUFDRCxXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUEsRUFHQSxRQUFjO0FBQ1osU0FBSyxXQUFXO0FBQ2hCLFdBQU8sS0FBSyxLQUFLLFlBQVksRUFBRSxRQUFRLE9BQUssT0FBTyxLQUFLLGFBQWEsQ0FBQyxDQUFDO0FBQUEsRUFDekU7QUFDRjs7O0FDekRPLElBQU0sYUFBTixNQUFpQjtBQUFBO0FBQUEsRUFVdEIsWUFDRSxLQUNBLElBQ0EsV0FBMEIsQ0FBQyxHQUUzQixLQUNBO0FBckZKLFFBQUFDLEtBQUE7QUF1RkksS0FBQUEsTUFBQSxTQUFTLGdCQUFULE9BQUFBLE1BQUEsU0FBUyxjQUFvQjtBQUM3QixtQkFBUyxvQkFBVCxxQkFBUyxrQkFBb0I7QUFDN0IsbUJBQVMsZ0JBQVQscUJBQVMsY0FBb0I7QUFDN0IsbUJBQVMsZUFBVCxxQkFBUyxhQUFvQjtBQUM3QixtQkFBUyxhQUFULHFCQUFTLFdBQW9CO0FBRTdCLFNBQUssTUFBVztBQUNoQixTQUFLLEtBQVc7QUFDaEIsU0FBSyxXQUFXO0FBR2hCLFNBQUssU0FBUyxTQUFTLEtBQUssVUFBVSxTQUFTLFlBQVk7QUFHM0QsU0FBSyxVQUFZLFlBQVksS0FBSyxRQUFRLFFBQVE7QUFDbEQsU0FBSyxXQUFZLElBQUksYUFBYSxLQUFLLE9BQU87QUFHOUMsUUFBSSxHQUFDLFFBQUcsWUFBSCxpQ0FBa0IsMkJBQUs7QUFDMUIsTUFBQyxHQUFXLFVBQVUsTUFBTSxHQUFHLEtBQUssSUFBSSxVQUFVO0FBQUEsRUFDdEQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLFVBQXlCO0FBQ3ZCLFVBQU0sRUFBRSxPQUFPLE1BQU0sT0FBTyxZQUFZLElBQUksS0FBSyxhQUFhO0FBQzlELFVBQU0sU0FBUyxLQUFLLFNBQVMsT0FBTztBQUVwQyxXQUFPO0FBQUEsTUFDTDtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBLFNBQWMsQ0FBQyxHQUFHLEtBQUssT0FBTztBQUFBO0FBQUEsTUFDOUIsWUFBYyxLQUFLLFNBQVM7QUFBQSxNQUM1QixVQUFjLEtBQUssU0FBUztBQUFBLElBQzlCO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1EsZUFBZTtBQW5JekIsUUFBQUEsS0FBQTtBQXFJSSxVQUFNLE1BQWMsb0JBQUksS0FBSztBQUM3QixVQUFNLE9BQWMsSUFBSSxZQUFZO0FBQ3BDLFVBQU0sUUFBYyxJQUFJLFNBQVM7QUFDakMsVUFBTSxjQUFjLElBQUksS0FBSyxNQUFNLFFBQVEsR0FBRyxDQUFDLEVBQUUsUUFBUTtBQUd6RCxVQUFNLE9BQVEsTUFBQUEsTUFBQSxLQUFLLElBQUcsWUFBUix3QkFBQUE7QUFDZCxVQUFNLE9BQWMsTUFBTSxRQUFRLEtBQUssU0FBUyxXQUFXLElBQ3ZELEtBQUssU0FBUyxjQUNkLEtBQUssU0FBUyxPQUNaLEtBQUssR0FBRyxNQUFNLElBQUksS0FBSyxTQUFTLE9BQU8sRUFBRSxNQUFNLEtBQy9DLDJCQUFLLFFBQ0gsS0FBSyxHQUFHLE1BQU0sRUFBRTtBQUFBLE1BQU0sQ0FBQyxNQUNyQixFQUFFLEtBQUssV0FBVyxJQUFJLEtBQUssVUFBVSxFQUFFLEtBQUssU0FBUyxJQUFJLEtBQUs7QUFBQSxJQUNoRSxFQUFFLE1BQU0sSUFDUixDQUFDO0FBR1QsVUFBTSxPQUFTLEtBQUssU0FBUztBQUM3QixVQUFNLFFBQVMsS0FBSyxTQUFTLGdCQUFpQixZQUFZO0FBQzFELFVBQU0sT0FBUyxLQUFLLFNBQVMsZ0JBQWdCO0FBQzdDLFVBQU0sU0FBUyxLQUFLLFNBQVM7QUFDN0IsVUFBTSxTQUFTLEtBQUssU0FBUztBQUk3QixVQUFNLFFBQVEsS0FBSyxPQUFPLENBQUMsTUFBVztBQS9KMUMsVUFBQUEsS0FBQUM7QUFrS00sWUFBSUQsTUFBQSxFQUFFLFNBQUYsZ0JBQUFBLElBQVEsZUFBYztBQUFVLGVBQU87QUFHM0MsVUFBSSxNQUFNO0FBQ1IsY0FBTSxTQUFRQyxNQUFBLEVBQUUsSUFBSSxNQUFOLE9BQUFBLE1BQVcsSUFBSSxTQUFTLEVBQUUsWUFBWTtBQUNwRCxZQUFJLFNBQVM7QUFBTyxpQkFBTztBQUFBLE1BQzdCO0FBRUEsYUFBTyxDQUFDLENBQUMsRUFBRSxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUUsTUFBTTtBQUFBLElBQ2xDLENBQUM7QUFHRCxVQUFNLFFBQVEsUUFBTTtBQTlLeEIsVUFBQUQ7QUErS00sWUFBTSxRQUFRLEdBQUcsV0FBU0EsTUFBQSxHQUFHLFNBQUgsZ0JBQUFBLElBQVMsU0FBUTtBQUMzQyxXQUFLLFNBQVMsT0FBTyxLQUFLO0FBQUEsSUFDNUIsQ0FBQztBQUVELFdBQU8sRUFBRSxPQUFPLE1BQU0sT0FBTyxZQUFZO0FBQUEsRUFDM0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFVQSxTQUFTLE1BQWMsS0FBYSxNQUFvQztBQTlMMUUsUUFBQUEsS0FBQTtBQStMSSxVQUFNLEVBQUUsT0FBTyxNQUFNLE9BQU8sWUFBWSxTQUFTLElBQUk7QUFDckQsVUFBTSxLQUFLLE1BQU0sS0FBSyxPQUFFO0FBaE01QixVQUFBQTtBQWdNZ0MsZ0JBQUUsV0FBU0EsTUFBQSxFQUFFLFNBQUYsZ0JBQUFBLElBQVEsU0FBUSxnQkFBZ0I7QUFBQSxLQUFJO0FBQzNFLFFBQUksQ0FBQztBQUFJLGFBQU87QUFFaEIsVUFBTSxTQUFRQSxNQUFBLEtBQUssR0FBRyxLQUFLLEdBQUcsVUFBVSxDQUFDLE1BQTNCLGdCQUFBQSxJQUE4QjtBQUM1QyxVQUFNLFNBQVEsVUFBSyxHQUFHLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBekIsbUJBQTRCO0FBQzFDLFFBQUksQ0FBQyxTQUFTLENBQUM7QUFBTyxhQUFPO0FBRzdCLFVBQU0sTUFBTSxJQUFJLEtBQUssTUFBTSxPQUFPLEdBQUc7QUFDckMsUUFBSSxPQUFPLFNBQVMsT0FBTztBQUN6QixhQUFPLEtBQUssU0FBUyxRQUFRLElBQUk7QUFFbkMsV0FBTztBQUFBLEVBQ1Q7QUFDRjs7O0FDMU1PLElBQU0saUJBQU4sTUFBcUI7QUFBQTtBQUFBLEVBRTFCLFdBQ0UsTUFDQSxZQUNBLFdBQ0EsUUFDQSxhQUFhLE1BQ2IsY0FBYyxPQUNEO0FBQ2IsVUFBTSxPQUFPLFNBQVMsY0FBYyxLQUFLO0FBQ3pDLFNBQUssWUFBWTtBQUdqQixVQUFNLElBQUksU0FBUyxjQUFjLEtBQUs7QUFDdEMsTUFBRSxZQUFZO0FBQ2QsTUFBRSxjQUFjO0FBQ2hCLFNBQUssWUFBWSxDQUFDO0FBR2xCLFVBQU0sWUFBWSxTQUFTLGNBQWMsS0FBSztBQUM5QyxjQUFVLFlBQVk7QUFDdEIsY0FBVSxZQUFZO0FBQ3RCLFNBQUssWUFBWSxTQUFTO0FBRzFCLFFBQUksWUFBWTtBQUNkLFlBQU0sS0FBSyxTQUFTLGNBQWMsS0FBSztBQUN2QyxTQUFHLFlBQVk7QUFDZixhQUFPLFFBQVEsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNO0FBQ2hELGNBQU0sT0FBTyxTQUFTLGNBQWMsS0FBSztBQUN6QyxhQUFLLFlBQVk7QUFFakIsY0FBTSxLQUFLLFNBQVMsY0FBYyxNQUFNO0FBQ3hDLFdBQUcsWUFBWTtBQUNmLFdBQUcsTUFBTSxhQUFhO0FBQ3RCLGFBQUssWUFBWSxFQUFFO0FBRW5CLGNBQU0sTUFBTSxTQUFTLGNBQWMsTUFBTTtBQUN6QyxZQUFJLGNBQWM7QUFDbEIsYUFBSyxZQUFZLEdBQUc7QUFFcEIsV0FBRyxZQUFZLElBQUk7QUFBQSxNQUNyQixDQUFDO0FBQ0QsV0FBSyxZQUFZLEVBQUU7QUFBQSxJQUNyQjtBQUlBLFNBQUssWUFBWSxJQUFJO0FBQ3JCLFdBQU87QUFBQSxFQUNUO0FBQUE7QUFBQSxFQUdGLFNBQ0UsSUFDQSxRQUNBO0FBQ0EsYUFDRyxpQkFBdUMsNEJBQTRCLEVBQ25FLFFBQVEsUUFBTTtBQUNiLFlBQU0sT0FBTyxHQUFHLFFBQVE7QUFDeEIsWUFBTSxNQUFPLE9BQU8sR0FBRyxRQUFRLEdBQUc7QUFHbEMsWUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHO0FBQ3hCLFVBQUksS0FBSztBQUVQLFdBQUcsTUFBTSxZQUFZLGlCQUFpQixHQUFHO0FBQ3pDLFdBQUcsVUFBVSxJQUFJLFdBQVc7QUFBQSxNQUM5QixPQUFPO0FBRUwsV0FBRyxVQUFVLE9BQU8sV0FBVztBQUMvQixXQUFHLE1BQU0sZUFBZSxlQUFlO0FBQUEsTUFDekM7QUFHQSxZQUFNLE9BQU8sT0FBTyxNQUFNLEdBQUc7QUFDN0IsVUFBSTtBQUFNLFdBQUcsVUFBVSxJQUFJLFNBQVMsTUFBTTtBQUFBLElBQzVDLENBQUM7QUFBQSxFQUNMO0FBQUE7QUFBQSxFQUtFLGlCQUFpQjtBQUNmLFVBQU0sS0FBSSxvQkFBSSxLQUFLLEdBQUUsUUFBUTtBQUM3QixhQUNHLGlCQUF1Qyw2QkFBNkIsS0FBSyxFQUN6RSxRQUFRLENBQUMsT0FBTyxHQUFHLFVBQVUsSUFBSSxVQUFVLENBQUM7QUFBQSxFQUNqRDtBQUNGOzs7QUN2RU8sSUFBTSxrQkFBTixNQUFzQjtBQUFBLEVBSzNCLFlBQTZCLEtBQVU7QUFBVjtBQUo3QixTQUFpQixLQUFLLElBQUksZUFBZTtBQUN6QyxTQUFRLGFBQWE7QUFJbkIsU0FBSyxRQUFRLEtBQUssYUFBYSxLQUFLLElBQUk7QUFDeEMsYUFBUyxFQUFFLEdBQUcsS0FBSyxLQUFLO0FBQ3hCLElBQUMsS0FBYSxtQkFBbUIsTUFBTSxTQUFTLEVBQUUsSUFBSSxLQUFLLEtBQUs7QUFBQSxFQUNsRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVVBLE1BQWEsV0FDWCxJQUNBLFdBQTJCLENBQUMsR0FDNUIsS0FDQSxTQUNlO0FBaERuQixRQUFBRSxLQUFBO0FBaURJLFFBQUksS0FBSztBQUFZO0FBQ3JCLFNBQUssYUFBYTtBQUVsQixRQUFJO0FBRUYsT0FBQUEsTUFBQSxTQUFTLDJCQUFULE9BQUFBLE1BQUEsU0FBUyx5QkFBMkI7QUFDcEMscUJBQVMsZUFBVCxxQkFBUyxhQUEyQjtBQUNwQyxxQkFBUywwQkFBVCxxQkFBUyx3QkFBMkI7QUFDcEMsVUFBSSxTQUFTO0FBQXVCLGlCQUFTLHlCQUF5QjtBQUl0RSxZQUFNLFVBQ0gsb0JBQWlCLGlCQUFpQixNQUFsQyxZQUNBLFNBQWlCLG9CQURqQixZQUVBLFNBQWlCO0FBQ3BCLFVBQUksVUFBVSxNQUFNO0FBQ2xCLHVCQUFTLHVCQUFULHFCQUFTLHFCQUF1QixDQUFDO0FBQ2pDLFlBQUssU0FBUyxtQkFBMkIsV0FBVztBQUNsRCxVQUFDLFNBQVMsbUJBQTJCLFVBQVUsT0FBTyxNQUFNLEtBQUs7QUFBQSxNQUNyRTtBQVFBLFVBQUksT0FBTSxRQUFHLFlBQUg7QUFDVixXQUFLLENBQUMsT0FBTyxDQUFDLElBQUksVUFBUywyQkFBSztBQUFZLGNBQU0sR0FBRyxLQUFLLElBQUksVUFBVTtBQUN4RSxVQUFJLEVBQUMsMkJBQUssT0FBTTtBQUNkLFlBQUksRUFBRSw2Q0FBd0M7QUFDOUM7QUFBQSxNQUNGO0FBR0EsWUFBTSxjQUFjLEdBQUc7QUFDdkIsTUFBQyxHQUFXLFVBQVUsTUFBTTtBQUc1QixZQUFNLFFBQVEsSUFBSSxXQUFXLEtBQUssS0FBSyxJQUFJLFVBQVUsR0FBRztBQUN4RCxZQUFNLE9BQVEsTUFBTSxRQUFRO0FBRzVCLFVBQUk7QUFDSixVQUFJLFNBQVM7QUFFWCxnQkFBUSxNQUFNO0FBQ2QsZ0JBQVEsVUFBVSxJQUFJLGlCQUFpQjtBQUN2QyxlQUFPO0FBQUEsTUFDVCxPQUFPO0FBRUwsZUFBTyxHQUFHO0FBQUEsTUFDWjtBQUdBLFlBQU0sWUFBWSxJQUFJLEtBQUssZUFBZSxNQUFNO0FBQUEsUUFDOUMsT0FBTztBQUFBLE1BQ1QsQ0FBQyxFQUFFLE9BQU8sSUFBSSxLQUFLLEtBQUssTUFBTSxLQUFLLE9BQU8sQ0FBQyxDQUFDO0FBQzVDLFlBQU0sYUFBYSxHQUFHLGFBQWEsS0FBSztBQUd4QyxZQUFNLE9BQU8sS0FBSyxHQUFHO0FBQUEsUUFDbkI7QUFBQSxRQUNBO0FBQUEsUUFDQSxLQUFLLGVBQWUsSUFBSTtBQUFBLFFBQ3hCLEtBQUs7QUFBQSxTQUNKLGNBQVMsZUFBVCxZQUF1QjtBQUFBLFFBQ3hCLFNBQVM7QUFBQTtBQUFBLE1BQ1g7QUFNQSxNQUFDLEtBQWEsYUFBYSxLQUFLLE1BQU0sS0FBSyxVQUFVLFFBQVEsQ0FBQztBQUc5RCxXQUFLLEdBQUc7QUFBQSxRQUNOLENBQUMsT0FBTyxNQUFNLE1BQU0sU0FBUyxPQUFPLEdBQUcsSUFBSTtBQUFBLFFBQzNDLENBQUMsT0FBTyxNQUFNO0FBQ1osZ0JBQU0sRUFBRSxZQUFZLFVBQVUsT0FBTyxNQUFNLE1BQU0sSUFBSTtBQUNyRCxnQkFBTSxLQUFLLE1BQU0sS0FBSyxPQUFFO0FBbklsQyxnQkFBQUE7QUFtSXNDLHNCQUFFLFdBQVNBLE1BQUEsRUFBRSxTQUFGLGdCQUFBQSxJQUFRLFdBQVU7QUFBQSxXQUFLO0FBQzlELGNBQUksQ0FBQztBQUFJLG1CQUFPO0FBRTFCLGdCQUFNLE1BQU0sR0FBRyxLQUFLLEdBQUcsVUFBVSxDQUFDO0FBQ2xDLGdCQUFNLE1BQU0sR0FBRyxLQUFLLEdBQUcsUUFBUSxDQUFDO0FBR2hDLGNBQUksT0FBTyxJQUFJLFNBQVMsUUFBUSxJQUFJLFFBQVEsTUFBTSxTQUFTLElBQUksUUFBUTtBQUNyRSxtQkFBTztBQUNULGNBQUksT0FBTyxJQUFJLFNBQVMsUUFBUSxJQUFJLFFBQVEsTUFBTSxTQUFTLElBQUksUUFBUTtBQUNyRSxtQkFBTztBQUNULGlCQUFPO0FBQUEsUUFDQztBQUFBLE1BQ0Y7QUFFQSxXQUFLLEdBQUcsZUFBZTtBQUd2QixVQUFJLFNBQVMsd0JBQXdCO0FBQ25DLGNBQU0sVUFBVSxZQUFlLGVBQWYsbUJBQTJCO0FBQzNDLFlBQUksUUFBUTtBQU9WLGdCQUFNLFVBQVUsS0FBSyxVQUFVLEVBQUUsS0FBSyxjQUFjLENBQUM7QUFDckQsZ0JBQU0sUUFBTyxjQUFTLHVCQUFULFlBQStCLENBQUM7QUFDN0MsY0FBSSxTQUFTLFNBQVMsS0FBSyxTQUFTO0FBQ2xDLFlBQUMsS0FBYSxRQUFRLFNBQVM7QUFFakMsY0FBSSxLQUFLLFdBQVcsTUFBTTtBQUN4QixrQkFBTSxhQUNILGdCQUFhLGlCQUFpQixNQUE5QixZQUNBLEtBQWEsb0JBRGIsWUFFQSxLQUFhO0FBQ2hCLGdCQUFJLGFBQWE7QUFBTSxtQkFBSyxVQUFVLE9BQU8sU0FBUyxLQUFLO0FBQUEsVUFDN0Q7QUFHQSxrQkFBUSxRQUFRLGdCQUFnQixLQUFLLFVBQVUsSUFBSTtBQUNuRCxjQUFJO0FBQ0Ysa0JBQU0sT0FBTztBQUFBLGNBQ1g7QUFBQSxjQUNBO0FBQUEsY0FDQTtBQUFBLGNBQ0E7QUFBQSxZQUNGO0FBQUEsUUFDSjtBQUFBLE1BQ0Y7QUFHQSxVQUFJLFNBQVMsYUFBYTtBQUN4QixjQUFNLE1BQU0sS0FBSyxTQUFTLE9BQU8sRUFBRSxLQUFLLGNBQWMsQ0FBQztBQUN2RCxZQUFJLFlBQVksS0FBSyxVQUFVLEtBQUssUUFBUSxNQUFNLENBQUM7QUFBQSxNQUNyRDtBQUdBLE1BQUMsR0FBVyxVQUFVO0FBQUEsSUFDeEIsVUFBRTtBQUNBLFdBQUssYUFBYTtBQUFBLElBQ3BCO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNUSxlQUFlLE1BQTZCO0FBQ2xELFVBQU0sRUFBRSxPQUFPLFlBQVksSUFBSTtBQUcvQixVQUFNLFdBQVcsTUFBTTtBQUFBLE1BQUssRUFBRSxRQUFRLFlBQVk7QUFBQSxNQUFHLENBQUMsR0FBRyxNQUN2RCw2QkFBNkIsT0FBTyxJQUFJLENBQUMsRUFBRSxTQUFTLEdBQUcsR0FBRztBQUFBLElBQzVELEVBQUUsS0FBSyxFQUFFO0FBQ1QsVUFBTSxRQUFRLGdEQUFnRDtBQUc5RCxRQUFJLFFBQVE7QUFDWixVQUFNLFFBQVEsUUFBTTtBQW5OeEIsVUFBQUE7QUFvTk0sWUFBTSxRQUFRLEdBQUcsV0FBU0EsTUFBQSxHQUFHLFNBQUgsZ0JBQUFBLElBQVMsU0FBUTtBQUMzQyxlQUFTLGtDQUFrQztBQUMzQyxlQUFTLElBQUksR0FBRyxLQUFLLGFBQWEsS0FBSztBQUNyQyxpQkFBUyxxQ0FBcUMsb0JBQW9CO0FBQUEsTUFDcEU7QUFDQSxlQUFTO0FBQUEsSUFDWCxDQUFDO0FBQ0QsYUFBUztBQUVULFdBQU8sOEJBQThCLFFBQVE7QUFBQSxFQUMvQztBQUFBLEVBRU0sYUFBYSxNQUFjO0FBaE9uQyxRQUFBQSxLQUFBO0FBaU9FLFFBQUksS0FBSztBQUFZO0FBSXRCLFNBQUksNkJBQU0sZUFBYztBQUFVO0FBR2pDLFVBQU0sTUFBTSxZQUFBQSxNQUFBLEtBQUssSUFBWSxZQUFqQixnQkFBQUEsSUFBMEIsWUFBMUIsbUJBQW1DLGFBQW5DLG1CQUE2QztBQUN6RCxRQUFJLENBQUMsSUFBSTtBQUNQLFVBQUksRUFBRSxxQ0FBcUM7QUFDM0M7QUFBQSxJQUNGO0FBRUEsVUFBTSxhQUFhLEtBQUssSUFBSSxVQUFVLGNBQWM7QUFDcEQsUUFBSSxDQUFDLGNBQWMsV0FBVyxjQUFjO0FBQVU7QUFDdEQsUUFBSSxDQUFDLFlBQVk7QUFDZixVQUFJLEVBQUUsK0JBQStCO0FBQ3JDO0FBQUEsSUFDRjtBQUdBLFFBQUksUUFBUSxLQUFLLFNBQVMsV0FBVztBQUFNO0FBRzNDLFVBQU0sb0JBQW9CLFNBQVMsY0FBYyxhQUFhO0FBQzlELFVBQU0sT0FBUSx1REFBMkI7QUFDekMsVUFBTSxXQUEwQixFQUFFLEdBQUcsS0FBSztBQUMxQyxtQkFBUywyQkFBVCxxQkFBUyx5QkFBMkI7QUFDcEMsbUJBQVMsZUFBVCxxQkFBUyxhQUFlO0FBRXhCLFFBQUksQ0FBQyxtQkFBbUI7QUFDdEIsVUFBSSxFQUFFLHlDQUF5QztBQUMvQztBQUFBLElBQ0Y7QUFFQSxVQUFNLE9BQU8sa0JBQWtCO0FBQy9CLFFBQUksQ0FBQyxNQUFNO0FBQ1QsVUFBSSxFQUFFLDhDQUE4QztBQUNwRDtBQUFBLElBQ0Y7QUFFQSxzQkFBa0IsT0FBTztBQUd6QixVQUFNLE1BQU07QUFBQSxNQUNWLFlBQVksV0FBVztBQUFBLE1BQ3ZCLGNBQWEsZ0JBQUssSUFBSSxjQUFjLGFBQWEsVUFBVSxNQUE5QyxtQkFBaUQsZ0JBQWpELFlBQWdFLENBQUM7QUFBQSxNQUM5RSxnQkFBZ0IsTUFBTTtBQUFBLE1BQ3RCLE9BQU87QUFBQTtBQUFBLE1BQ1AsVUFBVSxNQUFNO0FBQUE7QUFBQSxJQUNsQjtBQUVBLFNBQUssV0FBVyxJQUFJLFVBQVUsS0FBSyxJQUFJO0FBQUEsRUFDekM7QUFPQTs7O0FDeFJBLGtCQU1PO0FBQ1AsbUJBQWdDO0FBU2hDLFNBQVMsYUFBYSxLQUFpQjtBQUVyQyxRQUFNLFFBQVEsT0FBTyxLQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDdEMsTUFBSSxDQUFDO0FBQU8sV0FBTyxDQUFDO0FBQ3BCLFFBQU0sS0FBSyxJQUFJLE9BQU8sZ0NBQWdDLGFBQWE7QUFFbkUsUUFBTSxVQUFVLENBQUMsU0FBb0M7QUFDbkQsVUFBTSxVQUFVLElBQUksNkJBQTRCO0FBQ2hELFVBQU0sU0FBUyxLQUFLLE1BQU0sSUFBSTtBQUU5QixlQUFXLEVBQUUsTUFBTSxHQUFHLEtBQUssS0FBSyxlQUFlO0FBQzdDLFVBQUksTUFBTTtBQUNWLGFBQU8sT0FBTyxNQUFNLE1BQU0sUUFBUTtBQUNoQyxjQUFNLE9BQU8sS0FBSyxNQUFNLElBQUksT0FBTyxHQUFHO0FBQ3RDLGNBQU0sSUFBSSxHQUFHLEtBQUssS0FBSyxJQUFJO0FBQzNCLFlBQUksR0FBRztBQUNMLGdCQUFNLEtBQUssRUFBRSxDQUFDO0FBQ2Qsa0JBQVE7QUFBQSxZQUNOLEtBQUs7QUFBQSxZQUNMLEtBQUs7QUFBQSxZQUNMLHVCQUFXLEtBQUssRUFBRSxZQUFZLEVBQUUsT0FBTyxjQUFjLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQUFBLFVBQ2xGO0FBQUEsUUFDRjtBQUVBLFlBQUksS0FBSyxNQUFNO0FBQUs7QUFDcEIsY0FBTSxLQUFLLEtBQUs7QUFBQSxNQUNsQjtBQUFBLElBQ0Y7QUFDQSxXQUFPLFFBQVEsT0FBTztBQUFBLEVBQ3hCO0FBRUEsU0FBTyx1QkFBVztBQUFBLElBQ2hCLE1BQU07QUFBQSxNQUVKLFlBQVksTUFBa0I7QUFBRSxhQUFLLGNBQWMsUUFBUSxJQUFJO0FBQUEsTUFBRztBQUFBLE1BQ2xFLE9BQU8sR0FBZTtBQUNwQixZQUFJLEVBQUUsY0FBYyxFQUFFO0FBQWlCLGVBQUssY0FBYyxRQUFRLEVBQUUsSUFBSTtBQUFBLE1BQzFFO0FBQUEsSUFDRjtBQUFBLElBQ0EsRUFBRSxhQUFhLE9BQU0sRUFBVSxZQUFZO0FBQUEsRUFDN0M7QUFDRjtBQUtPLElBQU0scUJBQU4sTUFBeUI7QUFBQSxFQU05QixZQUFvQixRQUEwQjtBQUExQjtBQUxwQixTQUFRLFVBQW1DO0FBQzNDLFNBQVEsUUFBZSxDQUFDO0FBQ3hCLFNBQVEsWUFBaUM7QUFDekM7QUFBQSxTQUFRLE1BQWtCLENBQUM7QUFFcUIsU0FBSyxRQUFRO0FBQUEsRUFBRztBQUFBLEVBRWhFLFVBQVU7QUEzRVosUUFBQUM7QUE2RUksU0FBSyxNQUFNLENBQUM7QUFDZCxNQUFDQSxNQUFBLEtBQUssT0FBTyxTQUFTLGlCQUFyQixPQUFBQSxNQUFxQyxDQUFDLEdBQUc7QUFBQSxNQUN4QyxDQUFDLE1BQW9CLEtBQUssSUFBSSxFQUFFLElBQUksSUFBSTtBQUFBLElBQzFDO0FBR0UsU0FBSyxVQUFVO0FBR2YsUUFBSSxLQUFLLFdBQVc7QUFDbEIsV0FBSyxVQUFVO0FBQ2YsV0FBSyxZQUFZO0FBQUEsSUFDbkI7QUFDQSxTQUFLLFFBQVEsYUFBYSxLQUFLLEdBQUc7QUFDbEMsUUFBSSxLQUFLLE1BQU07QUFDYixXQUFLLE9BQU8sd0JBQXdCLEtBQUssS0FBSztBQUFBLEVBQ2xEO0FBQUE7QUFBQSxFQUdBLG1CQUFtQjtBQUFFLFdBQU8sS0FBSztBQUFBLEVBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFlMUMsZ0JBQXVDO0FBQ3JDLFdBQU8sUUFBTTtBQUNYLFVBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxHQUFHLEVBQUU7QUFBUTtBQUVuQyxTQUFHLGlCQUFnQyxJQUFJLEVBQUUsUUFBUSxRQUFNO0FBbkgzRCxZQUFBQTtBQW9ITSxjQUFNLE9BQU1BLE1BQUEsR0FBRyxnQkFBSCxPQUFBQSxNQUFrQjtBQUM5QixjQUFNLEtBQU0sSUFBSSxLQUFLLEVBQUUsT0FBTyxDQUFDO0FBQy9CLFlBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtBQUFHO0FBR25CLGNBQU0sWUFBWSxHQUFHO0FBQUEsVUFDbkI7QUFBQSxRQUNGO0FBR0EsWUFBSTtBQUNKLFlBQUksV0FBVztBQUNiLHNCQUFZO0FBQUEsUUFDZCxPQUFPO0FBRUwsZ0JBQU0sTUFBTSxJQUFJLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRSxLQUFLO0FBQ3JDLHNCQUFZLFNBQVMsZUFBZSxPQUFPLEdBQUc7QUFBQSxRQUNoRDtBQUdBLFdBQUcsZ0JBQWdCO0FBQ25CLGNBQU0sT0FBTyxTQUFTLGNBQWMsTUFBTTtBQUMxQyxhQUFLLFlBQVk7QUFDakIsYUFBSyxZQUFZLFNBQVM7QUFDMUIsV0FBRyxZQUFZLElBQUk7QUFFbkIsV0FBRyxVQUFVLElBQUksaUJBQWlCO0FBQ2xDLFdBQUcsYUFBYSxxQkFBcUIsRUFBRTtBQUd2QyxZQUFJLFdBQVc7QUFDYixhQUFHLGlCQUFpQixZQUFZLE1BQU07QUFDcEMsZ0JBQUksQ0FBQyxHQUFHLFFBQVEsd0JBQXdCO0FBQUc7QUFDM0Msc0JBQVU7QUFBQSxjQUNSLElBQUksV0FBVyxTQUFTLEVBQUUsU0FBUyxNQUFNLFlBQVksTUFBTSxNQUFNLE9BQU8sQ0FBQztBQUFBLFlBQzNFO0FBQUEsVUFDRixDQUFDO0FBQUEsUUFDSDtBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0g7QUFBQSxFQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNUSxZQUFZO0FBQ2xCLFFBQUksQ0FBQyxLQUFLLFNBQVM7QUFDakIsV0FBSyxVQUFVLFNBQVMsY0FBYyxPQUFPO0FBQzdDLFdBQUssUUFBUSxLQUFLO0FBQ2xCLGVBQVMsS0FBSyxZQUFZLEtBQUssT0FBTztBQUFBLElBQ3hDO0FBR0EsUUFBSSxNQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBMENWLGVBQVcsTUFBTSxLQUFLLEtBQUs7QUFDekIsWUFBTSxJQUFJLEtBQUssSUFBSSxFQUFFO0FBQ3JCLGFBQU87QUFBQSx5Q0FDOEI7QUFBQSxtQkFDdEIsRUFBRTtBQUFBLGNBQ1AsRUFBRTtBQUFBO0FBQUEseUNBRXlCO0FBQUEsbUJBQ3RCLEVBQUU7QUFBQSxjQUNQLEVBQUU7QUFBQTtBQUFBLDRDQUU0QjtBQUFBO0FBQUE7QUFBQSxJQUsxQztBQUdBLFNBQUssUUFBUSxjQUFjO0FBQUEsRUFDN0I7QUFNQTs7Ozs7O0FDck9PLElBQU0saUJBQU4sTUFBb0I7QUFBQSxFQVF6QixZQUFZLEtBQVMsV0FBaUM7QUFQdEQsU0FBaUIsT0FBUyxTQUFTO0FBUWpDLFNBQUssTUFBTTtBQUNYLFNBQUssU0FBUztBQUNkLFFBQUksVUFBVSxHQUFHLGNBQWMsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQ3REO0FBQUEsRUFFQSxXQUFlO0FBQ2IsVUFBTSxFQUFFLFFBQVEsVUFBVSxJQUFJLEtBQUssSUFBSTtBQUN2QyxVQUFNLE9BQU8sU0FBUyxLQUFLLFVBQVUsU0FBUyxZQUFZLElBQUksU0FBTztBQUdyRSxpQkFBYSxNQUFNLDBCQUFVLGNBQWM7QUFHM0MsU0FBSyxZQUFZLGVBQWMsTUFBTSxZQUFjO0FBR25ELFNBQUssWUFBWSxlQUFjLFFBQVEsYUFBYSxFQUFFO0FBQUEsRUFDeEQ7QUFBQTtBQUFBLEVBR1EsWUFBWSxJQUFXLEtBQVc7QUFDeEMsUUFBSSxLQUFLLFNBQVMsZUFBZSxFQUFFO0FBQ25DLFFBQUcsQ0FBQyxNQUFNLEtBQUk7QUFDWixXQUFLLE9BQU8sT0FBTyxTQUFTLGNBQWMsT0FBTyxHQUFFLEVBQUUsR0FBRyxDQUFDO0FBQ3pELGVBQVMsS0FBSyxZQUFZLEVBQUU7QUFBQSxJQUM5QjtBQUNBLFFBQUc7QUFBSSxTQUFHLGNBQWM7QUFBQSxFQUMxQjtBQUNGO0FBckNPLElBQU0sZ0JBQU47QUFBQTtBQUFNLGNBS0ksT0FBUTtBQUxaLGNBTUksU0FBUTs7O0FDWGxCLFNBQVMsdUJBQXVCLEtBQVU7QUFDL0MsUUFBTSxNQUFNLFNBQVMsZ0JBQWdCLE1BQU07QUFDM0MsUUFBTSxjQUFjLFNBQVMsZ0JBQWdCO0FBQzdDLFFBQU0sY0FBYyxTQUFTLEtBQUs7QUFDaEMsUUFBTSxXQUFXO0FBQUEsSUFDakI7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsRUFDRjtBQUVBLE1BQUksVUFBVSxpQkFBaUIsQ0FBQyxTQUF3QjtBQWhCMUQsUUFBQUMsS0FBQTtBQWlCSSxVQUFNLE9BQU0sTUFBQUEsTUFBQSxLQUFLLFNBQUwsZ0JBQUFBLElBQVcsZ0JBQVgsbUJBQXdCO0FBQ3BDLFFBQUksT0FBTyxRQUFRLFVBQVU7QUFDM0IsVUFBSSxnQkFBZ0IsTUFBTSxVQUFVO0FBQ3BDLFVBQUksZ0JBQWdCLFlBQVk7QUFDaEMsVUFBSSxLQUFLLFlBQVk7QUFFckIsaUJBQVcsTUFBTSxVQUFVO0FBQ3pCLGNBQU0sUUFBUSxTQUFTLGVBQWUsRUFBRTtBQUN4QyxZQUFJLENBQUM7QUFBTztBQUVaLFlBQUksT0FBTyxJQUFJLGVBQWUsRUFBRTtBQUNoQyxZQUFJLENBQUMsTUFBTTtBQUNULGlCQUFPLElBQUksY0FBYyxPQUFPO0FBQ2hDLGVBQUssS0FBSztBQUNWLGNBQUksS0FBSyxZQUFZLElBQUk7QUFBQSxRQUMzQjtBQUNBLGFBQUssY0FBYyxNQUFNO0FBQUEsTUFDM0I7QUFBQSxJQUdGO0FBQUEsRUFDRixDQUFDO0FBQ0g7OztBNUJ2Q0E7QUFBQSxDQWdEQSxZQUFPLGVBQVAsbUJBQU8sYUFBZSxDQUFDO0FBQ3ZCLElBQU0sS0FBSyxPQUFPO0FBakRsQixJQUFBQztBQUFBLENBb0RBQSxNQUFBLEdBQUcsa0JBQUgsT0FBQUEsTUFBQSxHQUFHLGdCQUFrQixPQUFPLFVBQVUsUUFBVTtBQUM5QyxRQUFNLEtBQUssS0FBSyxJQUFJO0FBQ3BCLFNBQU8sS0FBSyxJQUFJLElBQUksS0FBSyxTQUFTO0FBQ2hDLFFBQUksR0FBRztBQUFRLGFBQU8sR0FBRztBQUN6QixVQUFNLElBQUksUUFBUSxPQUFLLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFBQSxFQUMxQztBQUNBLFFBQU0sSUFBSSxNQUFNLHlDQUFvQztBQUN0RDtBQU9BLElBQXFCLG9CQUFyQixjQUE4Qyx3QkFBTztBQUFBLEVBQXJEO0FBQUE7QUFRRSxTQUFRLGtCQUEyQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVVuRCw0QkFBa0M7QUFDaEMsVUFBTSxLQUFLLGtCQUFpQjtBQUM1QixRQUFJLE1BQU0sU0FBUyxlQUFlLEVBQUU7QUFFcEMsUUFBSSxLQUFLLFNBQVMsaUJBQWlCO0FBQ2pDLFVBQUksQ0FBQyxLQUFLO0FBQ1IsY0FBTSxTQUFTLGNBQWMsT0FBTztBQUNwQyxZQUFJLEtBQUs7QUFDVCxZQUFJLGNBQWM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFVbEIsaUJBQVMsS0FBSyxZQUFZLEdBQUc7QUFBQSxNQUMvQjtBQUFBLElBQ0YsT0FBTztBQUNMLGlDQUFLO0FBQUEsSUFDUDtBQUFBLEVBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0Ysb0JBQTBCO0FBQ3hCLFFBQUksQ0FBQyxLQUFLLGlCQUFpQjtBQUN6QixXQUFLLGtCQUFrQixTQUFTLGNBQWMsT0FBTztBQUNyRCxXQUFLLGdCQUFnQixLQUFLO0FBQzFCLFdBQUssZ0JBQWdCLGNBQWM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTW5DLGVBQVMsS0FBSyxZQUFZLEtBQUssZUFBZTtBQUFBLElBQ2hEO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFFLE1BQU0sU0FBUztBQUNiLGFBQVMsS0FBSyxLQUFLLEdBQUc7QUFHdEIsUUFBSSxFQUFFLDZCQUF3QjtBQUU5QixRQUFJO0FBRUYsWUFBTSxPQUNKLEtBQUssSUFBSSxNQUFNLG1CQUFtQixxQ0FDN0IsS0FBSyxJQUFJLE1BQU0sUUFBOEIsWUFBWSxJQUMxRDtBQUdOLFlBQU0sWUFBWSxLQUFLLFNBQVMsT0FBTztBQUN2QyxZQUFNLGNBQVUsa0JBQUssTUFBTSxXQUFXLFdBQVc7QUFFakQsWUFBTSxjQUFVLHdCQUFhLFNBQVMsTUFBTTtBQUM1QyxZQUFNLE1BQU0sU0FBUyxjQUFjLE9BQU87QUFDMUMsVUFBSSxLQUFLO0FBQ1QsVUFBSSxjQUFjO0FBQ2xCLGVBQVMsS0FBSyxZQUFZLEdBQUc7QUFFN0IsV0FBSyxTQUFTLE1BQU0sSUFBSSxPQUFPLENBQUM7QUFDaEMsVUFBSSxFQUFFLDhDQUF5QztBQUFBLElBQ2pELFNBQVMsR0FBUDtBQUNBLFVBQUksRUFBRSw0Q0FBNEMsQ0FBQztBQUFBLElBQ3JEO0FBT0EsUUFBSSxDQUFDLEdBQUc7QUFBcUIsU0FBRyxTQUFTLElBQUksMkJBQWlCLEtBQUssR0FBRztBQUN0RSxRQUFJLENBQUMsR0FBRztBQUFxQixTQUFHLGtCQUFrQixJQUFJLGdCQUFnQixLQUFLLEdBQUc7QUFFOUUsT0FBRyxXQUFXLEVBQUUsaUNBQVEsK0JBQU8sNENBQWE7QUFHN0MsVUFBTSxLQUFLLGFBQWE7QUFDeEIsUUFBSSxTQUFTLEtBQUssU0FBUyxRQUFRO0FBR2xDLFFBQUk7QUFDRixZQUFNLEtBQUssSUFBSSxxQkFBcUIsS0FBSyxLQUFLLElBQUk7QUFDbEQsV0FBSyxjQUFjLEVBQUU7QUFDckIsVUFBSSxFQUFFLDBEQUErQjtBQUFBLElBQ3ZDLFNBQVMsR0FBUDtBQUNBLFVBQUksRUFBRSxnREFBdUIsQ0FBQztBQUM5QixVQUFJLHdCQUFPLDJIQUFnRDtBQUFBLElBQzdEO0FBRUEsU0FBSywwQkFBMEI7QUFDL0IsU0FBSyxrQkFBa0I7QUFHdkIsU0FBSyxlQUFlLElBQUksbUJBQW1CLElBQUk7QUFDL0MsU0FBSyx3QkFBd0IsS0FBSyxhQUFhLGlCQUFpQixDQUFDO0FBQ2pFLFNBQUssOEJBQThCLEtBQUssYUFBYSxjQUFjLEdBQUcsR0FBTTtBQUdoRixTQUFLLFNBQVMsSUFBSSxjQUFjLEtBQUssS0FBSyxNQUFNLEtBQUssUUFBUTtBQUl6RCxVQUFNLG1CQUEyQztBQUFBLE1BQy9DLFFBQVE7QUFBQSxNQUNSLE9BQU87QUFBQSxNQUNQLFFBQVE7QUFBQSxNQUNSLFNBQVM7QUFBQSxNQUNULFFBQVE7QUFBQSxNQUNSLE1BQU07QUFBQSxNQUNOLFFBQVE7QUFBQSxJQUNWO0FBQ0EsVUFBTSxvQkFBNEM7QUFBQSxNQUNoRCxRQUFRO0FBQUEsTUFDUixPQUFPO0FBQUEsTUFDUCxRQUFRO0FBQUEsTUFDUixTQUFTO0FBQUEsTUFDVCxRQUFRO0FBQUEsTUFDUixNQUFNO0FBQUEsTUFDTixRQUFRO0FBQUEsSUFDVjtBQUVBLFVBQU0sZUFBZTtBQUNyQixVQUFNLG1CQUFtQixDQUFDLE1BQWdCLGFBQWE7QUFDckQsWUFBTSxRQUFrQixDQUFDO0FBQ3pCLGlCQUFXLEtBQUssT0FBTyxLQUFLLGdCQUFnQixHQUFHO0FBQzdDLGNBQU0sT0FBTyxpQkFBaUIsQ0FBQztBQUMvQixjQUFNLFFBQVEsa0JBQWtCLENBQUM7QUFDakMsY0FBTTtBQUFBLFVBQ0osZ0JBQWdCLGFBQWE7QUFBQSxVQUM3QixvQ0FBb0Msd0NBQXdDLGtCQUFrQixxQkFBcUI7QUFBQSxVQUNuSCxvQ0FBb0MsOERBQThEO0FBQUEsVUFDbEcsNkRBQTZELGFBQWE7QUFBQSxVQUMxRSw2QkFBNkIsYUFBYTtBQUFBLFVBQzFDLGlEQUFpRCxxREFBcUQsa0JBQWtCLHNCQUFzQjtBQUFBLFVBQzlJLGlEQUFpRCwyRUFBMkU7QUFBQSxVQUM1SCwwRUFBMEUsYUFBYTtBQUFBLFFBQ3pGO0FBQUEsTUFDRjtBQUNBLFVBQUksS0FBSyxJQUFJLGVBQWUsWUFBWTtBQUN4QyxVQUFJLENBQUMsSUFBSTtBQUNQLGFBQUssSUFBSSxjQUFjLE9BQU87QUFDOUIsV0FBRyxLQUFLO0FBQ1IsWUFBSSxLQUFLLFlBQVksRUFBRTtBQUFBLE1BQ3pCO0FBQ0EsU0FBRyxjQUFjLE1BQU0sS0FBSyxJQUFJO0FBQUEsSUFDbEM7QUFFQSxVQUFNLHVCQUF1QixNQUFNO0FBQ2pDLGVBQVMsaUJBQThCLG9CQUFvQixFQUFFLFFBQVEsQ0FBQyxNQUFNO0FBQzFFLGNBQU0sSUFBSSxFQUFFLGNBQStCLGlDQUFpQztBQUM1RSxZQUFJLENBQUM7QUFBRztBQUNSLGNBQU0sUUFBUSxFQUFFLGVBQWU7QUFDL0IsVUFBRSxhQUFhLGNBQWMsS0FBSztBQUFBLE1BQ3BDLENBQUM7QUFBQSxJQUNIO0FBRUEscUJBQWlCO0FBQ2pCLHlCQUFxQjtBQUNyQixVQUFNLGlCQUFpQixJQUFJLGlCQUFpQixNQUFNO0FBQ2hELDJCQUFxQjtBQUNyQix1QkFBaUI7QUFBQSxJQUNuQixDQUFDO0FBQ0QsbUJBQWUsUUFBUSxTQUFTLE1BQU0sRUFBRSxXQUFXLE1BQU0sU0FBUyxLQUFLLENBQUM7QUFDeEUsU0FBSyxTQUFTLE1BQU0sZUFBZSxXQUFXLENBQUM7QUFDL0MsMkJBQXVCLEtBQUssR0FBRztBQVEvQixTQUFLO0FBQUEsTUFDSCxPQUFPLElBQWlCLFFBQXNDO0FBN1FwRSxZQUFBQTtBQThRUSxjQUFNLFFBQVEsR0FBRztBQUFBLFVBQ2Y7QUFBQSxRQUNGO0FBQ0EsWUFBSSxNQUFNLFdBQVc7QUFBRztBQUV4QixjQUFNLEtBQ0gsT0FBZSxlQUNmLE9BQWUsZUFDZixPQUFlO0FBQ2xCLFlBQUksQ0FBQyxJQUFJO0FBQ1AsY0FBSSxFQUFFLHNDQUFzQztBQUM1QztBQUFBLFFBQ0Y7QUFDQSxjQUFNLEdBQUcsY0FBYztBQUd2QixtQkFBVyxRQUFRLE1BQU0sS0FBSyxLQUFLLEdBQUc7QUFDcEMsY0FBSTtBQUNGLGtCQUFNLE9BQVksS0FBSyxNQUFNLEtBQUssZUFBZSxJQUFJO0FBQ3JELGtCQUFNLFlBQVksS0FBSztBQUd2QixnQkFBSSxLQUFLLFNBQVMsU0FBUztBQUN6QixlQUFBQSxNQUFBLEtBQUssMkJBQUwsT0FBQUEsTUFBQSxLQUFLLHlCQUEyQjtBQUNoQyxvQkFBTSxHQUFHLGdCQUFnQixXQUFXLElBQUksTUFBTSxLQUFLLFNBQVM7QUFDNUQ7QUFBQSxZQUNGO0FBR0EsZ0JBQUk7QUFDRixvQkFBTSxHQUFHLE9BQU8sZUFBZSxJQUFJLE1BQU0sS0FBSyxTQUFTO0FBQUEsVUFDM0QsU0FBUyxHQUFQO0FBQ0EsZ0JBQUksRUFBRSwrQkFBK0IsQ0FBQztBQUFBLFVBQ3hDO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBRUEsUUFBSSxFQUFFLGtDQUE2QjtBQUl2QyxXQUFPLGlCQUFpQixzQkFBc0IsQ0FBQyxPQUFPO0FBeFR0RCxVQUFBQTtBQTBURSxZQUFNLE1BQU0sU0FBT0EsTUFBQSxHQUFHLFdBQUgsZ0JBQUFBLElBQVcsWUFBVyxHQUFHLFVBQVUsRUFBRSxFQUFFLFlBQVk7QUFHdEUsVUFBSSxJQUFJLFNBQVMsZ0NBQWdDLEtBQzdDLElBQUksU0FBUyxVQUFVLEdBQUc7QUFDNUIsV0FBRyxlQUFlO0FBQ2xCO0FBQUEsTUFDRjtBQUVBLFVBQUksSUFBSSxTQUFTLGdCQUFnQixHQUFHO0FBQ2xDLFdBQUcsZUFBZTtBQUFBLE1BQ3BCO0FBQUEsSUFDRixDQUFDO0FBSUMsU0FBSztBQUFBLE1BQ0gsS0FBSyxJQUFJLFVBQVUsR0FBRyxpQkFBaUIsTUFBTTtBQUMzQywrQkFBdUIsS0FBSyxHQUFHO0FBQUEsTUFDakMsQ0FBQztBQUFBLElBQ0g7QUFDQSxTQUFLO0FBQUEsTUFDSCxLQUFLLElBQUksVUFBVSxHQUFHLGNBQWMsTUFBTTtBQUN4QywrQkFBdUIsS0FBSyxHQUFHO0FBQy9CLHlCQUFpQjtBQUFBLE1BQ25CLENBQUM7QUFBQSxJQUNIO0FBQ0EsU0FBSztBQUFBLE1BQ0gsS0FBSyxJQUFJLFVBQVUsR0FBRyxlQUFlLENBQUMsT0FBTyxRQUFRO0FBQ25ELCtCQUF1QixLQUFLLEdBQUc7QUFDL0IseUJBQWlCLElBQUksUUFBUTtBQUFBLE1BQy9CLENBQUM7QUFBQSxJQUNIO0FBQUEsRUFHQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFdBQVc7QUFDVCxRQUFJLEVBQUUsK0JBQTBCO0FBR2hDLGFBQVMsRUFBRSxJQUFJLEdBQUcsZ0JBQWdCLGFBQWEsS0FBSyxHQUFHLGVBQWUsQ0FBQztBQUFBLEVBQ3pFO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLQSxNQUFNLGVBQWU7QUFDbkIsVUFBTSxNQUFNLE1BQU0sS0FBSyxTQUFTO0FBQ2hDLFNBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQixHQUFHO0FBQUEsRUFFekQ7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNuQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFDakMsUUFBSSxTQUFTLEtBQUssU0FBUyxRQUFRO0FBQ25DLFNBQUssMEJBQTBCO0FBRS9CLFNBQUssb0JBQW9CO0FBRXpCLDJCQUF1QixLQUFLLEdBQUc7QUFBQSxFQUNqQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsc0JBQXNCO0FBQ3BCLFVBQU0sT0FBTyxLQUFLLElBQUksU0FBUyxNQUFNLGtCQUFrQixTQUFTO0FBQ2hFLFVBQU0sT0FBTyxTQUFTO0FBSXRCLFVBQU0sU0FBUztBQUNmLFFBQUksU0FBUyxTQUFTLGVBQWUsTUFBTTtBQUMzQyxRQUFJLENBQUMsUUFBUTtBQUNYLGVBQVMsU0FBUyxjQUFjLE9BQU87QUFDdkMsYUFBTyxLQUFLO0FBQ1osZUFBUyxLQUFLLFlBQVksTUFBTTtBQUFBLElBQ2xDO0FBQ0EsVUFBTSxPQUFPLEtBQUssU0FBUztBQUMzQixVQUFNLFlBQXNCLENBQUM7QUFDN0IsVUFBTSxZQUFzQixDQUFDO0FBQzdCLFdBQU8sUUFBUSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU07QUFDdkMsT0FBQyxFQUFFLFNBQVMsT0FBTyxJQUFJLFlBQVksV0FBVyxLQUFLLEdBQUcsS0FBSyxJQUFJO0FBQUEsSUFDakUsQ0FBQztBQUNELFdBQU8sY0FBYztBQUFBLGNBQ1gsVUFBVSxLQUFLLEVBQUU7QUFBQSxvQkFDWCxVQUFVLEtBQUssRUFBRTtBQUFBO0FBSWpDLFVBQU0sV0FBVztBQUNqQixRQUFJLFdBQVcsU0FBUyxlQUFlLFFBQVE7QUFDL0MsUUFBSSxDQUFDLFVBQVU7QUFDYixpQkFBVyxTQUFTLGNBQWMsT0FBTztBQUN6QyxlQUFTLEtBQUs7QUFDZCxlQUFTLEtBQUssWUFBWSxRQUFRO0FBQUEsSUFDcEM7QUFDQSxhQUFTLGNBQWMsS0FBSyxTQUFTLGFBQWE7QUFBQSxFQUNwRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPSyxzQkFBNEI7QUFFakMsUUFBSSxLQUFLLGNBQWM7QUFDckIsV0FBSyxhQUFhLFFBQVE7QUFBQSxJQUM1QjtBQUFBLEVBQ0Y7QUFBQSxFQUVPLGNBQW9CO0FBQUEsRUFDM0I7QUFDQTtBQW5YQSxJQUFxQixtQkFBckI7QUFBQTtBQUFxQixpQkFFSCx1QkFBdUI7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiIsICJfYSIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgIl9hIiwgIl9hIiwgIl9hIiwgIk1vZGFsIiwgIl9hIiwgIl9hIiwgImN1clByb3AiLCAiY3VyRGlyIiwgIl9hIiwgIl9hIiwgImltcG9ydF9vYnNpZGlhbiIsICJfYSIsICJNb2RhbCIsICJTdWdnZXN0TW9kYWwiLCAiX2EiLCAiZSIsICJfYSIsICJpbXBvcnRfb2JzaWRpYW4iLCAiZ3MiLCAiX2EiLCAic3MiLCAiX2IiLCAiX2MiLCAiYyIsICJfYSIsICJfYSIsICJfYiIsICJfYSIsICJfYSIsICJfYSIsICJfYSJdCn0K
