/*
 THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
 If you want to view the source, please visit:
 https://github.com/HammerfallGenesis/obsidian-cover-table-plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MiniTablePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/interactive_table.ts
var import_obsidian = require("obsidian");
var InteractiveTable = class {
  constructor() {
    // 정규표현식 캐싱 (날짜, 시간 파싱)
    this.dateYMDRegex = /^(\d{4})-(\d{1,2})-(\d{1,2})$/;
    this.timeHMRegex = /^(\d{1,2}):(\d{1,2})$/;
  }
  /* --------------------------------------------------------------------
     [A] 뷰 ID 생성
  -------------------------------------------------------------------- */
  resolveViewId(settings) {
    let id = settings["id"];
    if (!id || typeof id !== "string") {
      id = "auto-" + Date.now() + "-" + Math.random().toString(16).slice(2, 6);
    }
    return id;
  }
  /* --------------------------------------------------------------------
     [B] 로컬 스토리지 관련 (키 생성 헬퍼 포함)
  -------------------------------------------------------------------- */
  getStorageKey(notePath, viewId) {
    return `miniTableEngine::${notePath}::${viewId}`;
  }
  _getLocalState(notePath, viewId) {
    const key = this.getStorageKey(notePath, viewId);
    const dataString = localStorage.getItem(key);
    if (!dataString)
      return {};
    try {
      return JSON.parse(dataString);
    } catch (e) {
      return {};
    }
  }
  _setLocalState(notePath, viewId, obj) {
    const key = this.getStorageKey(notePath, viewId);
    localStorage.setItem(key, JSON.stringify(obj));
  }
  _getState(notePath, viewId, propName) {
    const localData = this._getLocalState(notePath, viewId);
    return localData.hasOwnProperty(propName) ? localData[propName] : null;
  }
  _setState(notePath, viewId, propName, val) {
    const localData = this._getLocalState(notePath, viewId);
    localData[propName] = val;
    this._setLocalState(notePath, viewId, localData);
  }
  /* --------------------------------------------------------------------
     refresh (다중 호출 코드 통합)
  -------------------------------------------------------------------- */
  refreshCommand(delay = 50) {
    setTimeout(() => {
      app.commands.executeCommandById("dataview:dataview-force-refresh-views");
    }, delay);
  }
  /* --------------------------------------------------------------------
     [C] 버튼들
  -------------------------------------------------------------------- */
  async viewFolderButton(relPath, container) {
    const btn = document.createElement("button");
    btn.className = "dvit-button folder-button";
    btn.append("\u21AA Open Folder");
    btn.onclick = async () => {
      try {
        const { shell } = window.require("electron");
        const pathMod = window.require("path");
        if (!shell) {
          new globalThis.miniTableGlobal.obsidian.Notice("Electron shell is undefined!");
          return;
        }
        const vaultBase = app.vault.adapter.basePath;
        const absolutePath = pathMod.resolve(vaultBase, relPath);
        const isFile = pathMod.extname(absolutePath) !== "";
        if (isFile) {
          shell.showItemInFolder(absolutePath);
        } else {
          shell.openPath(absolutePath);
        }
      } catch (e) {
        new globalThis.miniTableGlobal.obsidian.Notice(`Error:
${e.message}`);
      }
    };
    container.append(btn);
  }
  async newFolderButton(dv, args, container) {
    let { folderName } = args;
    if (!folderName)
      folderName = "New Folder";
    const btn = document.createElement("button");
    btn.className = "dvit-button folder-button";
    btn.append("+ \uC0C8 \uD3F4\uB354");
    btn.onclick = async () => {
      const inputName = await this.textInput(folderName);
      if (!inputName)
        return;
      const currentFolder = dv.current().file.folder || "";
      const finalPath = currentFolder ? `${currentFolder}/${inputName}` : inputName;
      try {
        await app.vault.createFolder(finalPath);
        new globalThis.miniTableGlobal.obsidian.Notice(`Folder created: ${finalPath}`);
      } catch (er) {
        new globalThis.miniTableGlobal.obsidian.Notice(`Error creating folder:
${finalPath}`);
      }
    };
    container.append(btn);
  }
  async refreshButton(container, notePath, viewId) {
    const btn = document.createElement("button");
    btn.className = "dvit-button";
    btn.style.marginRight = "8px";
    btn.append("\u21BA");
    btn.onclick = async () => {
      this._setState(notePath, viewId, `sort_${viewId}`, null);
      this._setState(notePath, viewId, `sort_direction_${viewId}`, "asc");
      this.refreshCommand(50);
    };
    container.append(btn);
  }
  /* --------------------------------------------------------------------
     [D] getVal: 중첩 프로퍼티 접근 최적화 (for 루프 사용)
  -------------------------------------------------------------------- */
  getVal(page, prop) {
    if (!page)
      return null;
    if (prop.startsWith("file.")) {
      const parts = prop.split(".");
      let v = page;
      for (let i = 0; i < parts.length; i++) {
        if (v && v[parts[i]] !== void 0) {
          v = v[parts[i]];
        } else {
          return null;
        }
      }
      return v;
    }
    return page[prop];
  }
  /* --------------------------------------------------------------------
     [E] 날짜/시간/숫자 정렬 & 포맷
  -------------------------------------------------------------------- */
  parseDateYMD(str) {
    if (typeof str !== "string")
      return null;
    const m = str.match(this.dateYMDRegex);
    if (m) {
      const y = parseInt(m[1], 10);
      const mo = parseInt(m[2], 10);
      const d = parseInt(m[3], 10);
      if (y < 1e3 || y > 9999 || mo < 1 || mo > 12 || d < 1 || d > 31)
        return null;
      return new Date(y, mo - 1, d);
    }
    const dt = new Date(str);
    return isNaN(dt.getTime()) ? null : dt;
  }
  parseTimeHM(str) {
    if (typeof str !== "string")
      return null;
    const m = str.match(this.timeHMRegex);
    if (!m)
      return null;
    const hh = parseInt(m[1], 10);
    const mm = parseInt(m[2], 10);
    if (hh > 23 || mm > 59)
      return null;
    const dt = /* @__PURE__ */ new Date();
    dt.setHours(hh);
    dt.setMinutes(mm);
    return dt;
  }
  getSortValue(value, _prop) {
    if (value === void 0 || value === null)
      return "";
    const s = typeof value === "string" ? value : String(value);
    let dt = this.parseDateYMD(s);
    if (!dt) {
      const dt2 = this.parseTimeHM(s);
      if (dt2)
        dt = dt2;
    }
    if (dt)
      return dt.getTime();
    const num = parseFloat(s);
    return !isNaN(num) ? num : s.toLowerCase();
  }
  formatAsYYYYMMDDIfDate(value) {
    if (value === void 0 || value === null)
      return "";
    const s = typeof value === "string" ? value : String(value);
    const dt = this.parseDateYMD(s);
    if (!dt)
      return s;
    const yy = dt.getFullYear();
    const mm = dt.getMonth() + 1;
    const dd = dt.getDate();
    const mmStr = mm < 10 ? "0" + mm : "" + mm;
    const ddStr = dd < 10 ? "0" + dd : "" + dd;
    return `${yy}-${mmStr}-${ddStr}`;
  }
  /* --------------------------------------------------------------------
     [F] 태그 필터
  -------------------------------------------------------------------- */
  async renderTagFilterButton(pages, container, notePath, viewId) {
    try {
      const currentTag = this._getState(notePath, viewId, "tagFilter") || "ALL";
      const btn = document.createElement("button");
      btn.className = "dvit-button tag-filter-button";
      btn.textContent = currentTag;
      btn.onclick = async () => {
        try {
          const allTags = /* @__PURE__ */ new Set();
          pages.forEach((pg) => {
            var _a;
            const tg = ((_a = pg == null ? void 0 : pg.file) == null ? void 0 : _a.tags) || (pg == null ? void 0 : pg.tags);
            if (!tg)
              return;
            if (Array.isArray(tg))
              tg.forEach((xx) => allTags.add(xx));
          });
          const arr = ["ALL", ...Array.from(allTags).sort()];
          const chosen = await this.suggester(arr);
          if (!chosen)
            return;
          this._setState(notePath, viewId, "tagFilter", chosen);
          this.refreshCommand(50);
        } catch (e) {
        }
      };
      container.appendChild(btn);
    } catch (e) {
    }
  }
  async applyTagFilter(pages, notePath, viewId) {
    const tg = this._getState(notePath, viewId, "tagFilter") || "ALL";
    if (tg === "ALL")
      return pages;
    return pages.filter((pg) => {
      var _a;
      const arr = ((_a = pg == null ? void 0 : pg.file) == null ? void 0 : _a.tags) || (pg == null ? void 0 : pg.tags);
      return Array.isArray(arr) && arr.includes(tg);
    });
  }
  /* --------------------------------------------------------------------
     [G] frontmatter 필터 + 검색
  -------------------------------------------------------------------- */
  async changePropFilter(p, pages, notePath, viewId) {
    const setOfVals = /* @__PURE__ */ new Set();
    for (const pg of pages) {
      let rawVal = this.getVal(pg, p.prop);
      let val = this.formatAsYYYYMMDDIfDate(rawVal);
      if (!val)
        val = "-";
      setOfVals.add(val);
    }
    let arrOfVals = Array.from(setOfVals);
    const hasDash = arrOfVals.includes("-");
    if (hasDash) {
      arrOfVals = arrOfVals.filter((v) => v !== "-");
    }
    arrOfVals.sort((a, b) => a.localeCompare(b));
    const uv = hasDash ? ["ALL", "-"].concat(arrOfVals) : ["ALL", ...arrOfVals];
    const chosen = await this.suggester(uv);
    if (!chosen)
      return;
    const fKey = `filter_${viewId}_${p.prop}`;
    this._setState(notePath, viewId, fKey, chosen);
    this.refreshCommand(50);
  }
  async filterByProp(p, pages, notePath, viewId) {
    const fKey = `filter_${viewId}_${p.prop}`;
    const val = this._getState(notePath, viewId, fKey);
    if (!val || val === "ALL")
      return pages;
    return pages.filter((pg) => {
      let rawV = this.getVal(pg, p.prop);
      let cmpV = this.formatAsYYYYMMDDIfDate(rawV);
      if (!cmpV)
        cmpV = "-";
      return cmpV === val;
    });
  }
  /**
   * file.link 검색 시 "frontmatter.title"만 검색 대상으로 사용
   */
  buildSearchTextMap(props, pages) {
    const tableProps = props.filter((c) => c.column);
    pages.forEach((pg) => {
      const buf = [];
      tableProps.forEach((col) => {
        let tv;
        if (col.prop === "file.link") {
          const aliasPart = pg.__fmTitle || "";
          tv = aliasPart;
        } else if (col.prop === "table") {
          tv = pg.__fmTable || "";
        } else {
          const rawVal = this.getVal(pg, col.prop);
          tv = rawVal == null ? "" : String(rawVal);
        }
        buf.push(tv.toLowerCase());
      });
      pg.__searchText = buf.join(" ");
    });
  }
  async filterProps(props, pages, notePath, viewId) {
    for (const p of props.filter((x) => x.filter)) {
      pages = await this.filterByProp(p, pages, notePath, viewId);
    }
    pages = await this.applyTagFilter(pages, notePath, viewId);
    const sr = this._getState(notePath, viewId, `search_ready_${viewId}`);
    if (sr) {
      let sVal = (this._getState(notePath, viewId, `search_${viewId}`) || "").trim();
      if (sVal.length > 0) {
        const ws = sVal.split(" ");
        this.buildSearchTextMap(props, pages);
        for (let w of ws) {
          w = w.trim().toLowerCase();
          if (w.length > 0) {
            pages = pages.filter((pg) => {
              const txt = pg.__searchText || "";
              return txt.includes(w);
            });
          }
        }
      }
    }
    return pages;
  }
  async searchInput(container, notePath, viewId) {
    const wrap = document.createElement("div");
    wrap.className = "dvit-search-wrapper";
    wrap.style.display = "flex";
    wrap.style.alignItems = "center";
    const sKey = `search_${viewId}`;
    const sVal = this._getState(notePath, viewId, sKey) || "";
    const wasFocused = this._getState(notePath, viewId, `search_focus_${viewId}`) === true;
    const input = document.createElement("input");
    input.className = "dvit-search-input";
    input.value = sVal;
    input.placeholder = "\uAC80\uC0C9...";
    input.style.marginRight = "8px";
    if (wasFocused) {
      setTimeout(() => input.focus(), 0);
    }
    input.addEventListener("focus", () => {
      this._setState(notePath, viewId, `search_focus_${viewId}`, true);
    });
    input.addEventListener("blur", () => {
      this._setState(notePath, viewId, `search_focus_${viewId}`, false);
    });
    input.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        this._setState(notePath, viewId, sKey, input.value);
        this._setState(notePath, viewId, `search_ready_${viewId}`, true);
        this.refreshCommand(80);
      }
    });
    wrap.appendChild(input);
    const btn = document.createElement("button");
    btn.className = "dvit-button dvit-search-button";
    btn.innerText = "\u2315";
    btn.onclick = async () => {
      this._setState(notePath, viewId, sKey, input.value);
      this._setState(notePath, viewId, `search_ready_${viewId}`, true);
      this.refreshCommand(80);
      setTimeout(() => input.focus(), 80);
    };
    wrap.appendChild(btn);
    container.appendChild(wrap);
  }
  /* --------------------------------------------------------------------
     [H] 페이지네이션
  -------------------------------------------------------------------- */
  paginate(arr, per, notePath, viewId) {
    const key = `pagination_${viewId}`;
    const totalPages = per > 0 ? Math.ceil(arr.length / per) : 1;
    let pageIdx = this._getState(notePath, viewId, key) || 0;
    if (pageIdx >= totalPages) {
      pageIdx = totalPages - 1;
      this._setState(notePath, viewId, key, pageIdx);
    }
    return per > 0 ? arr.slice(pageIdx * per, (pageIdx + 1) * per) : [...arr];
  }
  async paginationBlock(data, per, container, notePath, viewId) {
    const key = `pagination_${viewId}`;
    const totalPages = Math.ceil(data.length / per);
    const wrap = document.createElement("div");
    wrap.className = "pagination-block";
    const prv = await this.prevPageButton(totalPages, key, notePath, viewId);
    wrap.appendChild(prv);
    const curS = document.createElement("span");
    const cv = (this._getState(notePath, viewId, key) || 0) + 1;
    curS.textContent = `${cv} / ${totalPages}`;
    wrap.appendChild(curS);
    const nxt = await this.nextPageButton(totalPages, key, notePath, viewId);
    wrap.appendChild(nxt);
    container.appendChild(wrap);
  }
  async nextPageButton(totalPages, storeKey, notePath, viewId) {
    const cv = this._getState(notePath, viewId, storeKey) || 0;
    const canNext = cv + 1 < totalPages;
    const bClass = canNext ? "dvit-button" : "dvit-button button-gray";
    const btn = document.createElement("button");
    btn.className = bClass;
    btn.append(">>");
    btn.onclick = async () => {
      if (!canNext)
        return;
      this._setState(notePath, viewId, storeKey, cv + 1);
      this.refreshCommand(60);
    };
    return btn;
  }
  async prevPageButton(totalPages, storeKey, notePath, viewId) {
    const cv = this._getState(notePath, viewId, storeKey) || 0;
    const canPrev = cv > 0;
    const bClass = canPrev ? "dvit-button" : "dvit-button button-gray";
    const btn = document.createElement("button");
    btn.className = bClass;
    btn.append("<<");
    btn.onclick = async () => {
      if (!canPrev)
        return;
      this._setState(notePath, viewId, storeKey, cv - 1);
      this.refreshCommand(60);
    };
    return btn;
  }
  /* --------------------------------------------------------------------
     [I] 테이블 생성 (필터/정렬/페이지네이션 적용)
  -------------------------------------------------------------------- */
  async createTable(props, pages, container, notePath, viewId, entriesPerPage, settings) {
    pages.forEach((pg) => {
      var _a, _b, _c, _d;
      try {
        const dvPage = (_a = this.dv) == null ? void 0 : _a.page(pg.file.path);
        if (dvPage) {
          pg.__fmTitle = ((_b = dvPage == null ? void 0 : dvPage.frontmatter) == null ? void 0 : _b.title) || (dvPage == null ? void 0 : dvPage.title) || "";
        } else {
          pg.__fmTitle = ((_c = pg.frontmatter) == null ? void 0 : _c.title) || "";
        }
      } catch (e) {
        pg.__fmTitle = ((_d = pg.frontmatter) == null ? void 0 : _d.title) || "";
      }
    });
    let filtered = await this.filterProps(props, pages, notePath, viewId);
    const sKey = `sort_${viewId}`;
    const dKey = `sort_direction_${viewId}`;
    let curSort = this._getState(notePath, viewId, sKey);
    let curDir = this._getState(notePath, viewId, dKey) || "asc";
    if (!curSort) {
      filtered.sort((a, b) => a.__fmTitle.localeCompare(b.__fmTitle));
    } else {
      filtered = this.sortByProp(filtered, curSort, curDir);
    }
    const disp = entriesPerPage ? this.paginate(filtered, entriesPerPage, notePath, viewId) : [...filtered];
    const headers = [];
    props.forEach((col) => {
      const hd = document.createElement("div");
      if (col.prop === "file.link") {
        hd.classList.add("header-no-sort");
      } else {
        hd.classList.add("header-sorting-button");
        hd.setAttribute("data-prop", col.prop);
        hd.setAttribute("data-view-id", viewId);
      }
      hd.innerText = col.name || col.prop;
      headers.push(hd.outerHTML);
    });
    const rows = disp.map((pg) => {
      var _a, _b, _c, _d;
      const rowCells = [];
      for (const col of props) {
        let val = this.getVal(pg, col.prop);
        if (col.prop === "file.link") {
          const alias = pg.__fmTitle || "";
          if (typeof val === "object" && (val == null ? void 0 : val.path)) {
            const linkMarkup = alias.trim() === "" ? `[[${val.path}]]` : `[[${val.path}|${alias}]]`;
            rowCells.push(`<div class="edit-button" data-path="${((_a = pg.file) == null ? void 0 : _a.path) || ""}" data-prop="file.link">${linkMarkup}</div>`);
          } else {
            if (alias.trim() === "") {
              rowCells.push(`<div class="edit-button" data-path="${((_b = pg.file) == null ? void 0 : _b.path) || ""}" data-prop="file.link">[[${val && typeof val === "object" && (val == null ? void 0 : val.path) ? val.path : ""}]]</div>`);
            } else {
              rowCells.push(`<div class="edit-button" data-path="${((_c = pg.file) == null ? void 0 : _c.path) || ""}" data-prop="file.link">${alias}</div>`);
            }
          }
        } else {
          if (Array.isArray(val)) {
            if (col.prop === "tags") {
              const updated = [];
              for (const item of val) {
                item.split(/\s+/).forEach((tk) => {
                  if (tk && !tk.startsWith("#")) {
                    tk = "#" + tk;
                  }
                  updated.push(tk);
                });
              }
              val = updated.join(" ");
            } else {
              val = val.join(" ");
            }
          }
          if (col.prop === "published") {
            const dt = this.parseDateYMD(val);
            val = dt ? dt.getFullYear().toString() : val || "-";
          } else {
            val = this.formatAsYYYYMMDDIfDate(val);
            if (!val)
              val = "-";
          }
          rowCells.push(`<div class="edit-button" data-path="${((_d = pg.file) == null ? void 0 : _d.path) || ""}" data-prop="${col.prop}">${val}</div>`);
        }
      }
      return rowCells;
    });
    const mdTable = this.dv.markdownTable(headers, rows);
    const wrapP = this.dv.paragraph(mdTable);
    wrapP.classList.add("dv-table-wrapper", "table", "full-width");
    container.appendChild(wrapP);
    wrapP.querySelectorAll(".edit-button").forEach((btn) => {
      btn.addEventListener("click", async (e) => {
        if (e.target.localName === "a")
          return;
        const path = btn.getAttribute("data-path");
        const prop = btn.getAttribute("data-prop");
        if (path && prop)
          await this.editProp("text", path, prop);
      });
    });
    const hdrBtns = wrapP.querySelectorAll(".header-sorting-button");
    const applySortVisual = (sortProp, sortDir) => {
      hdrBtns.forEach((hb) => {
        hb.classList.remove("sorted-asc", "sorted-desc", "sorted-none");
      });
      hdrBtns.forEach((hb) => {
        const p = hb.getAttribute("data-prop") || "";
        if (!sortProp || sortProp !== p) {
          hb.classList.add("sorted-none");
        } else {
          hb.classList.add(sortDir === "asc" ? "sorted-asc" : "sorted-desc");
        }
      });
    };
    hdrBtns.forEach((hb) => {
      hb.addEventListener("click", async () => {
        let p = hb.getAttribute("data-prop") || "";
        const vId = hb.getAttribute("data-view-id") || "";
        const sKey2 = `sort_${vId}`;
        const dKey2 = `sort_direction_${vId}`;
        let curSort2 = this._getState(notePath, vId, sKey2);
        let curDir2 = this._getState(notePath, vId, dKey2) || "asc";
        if (curSort2 !== p) {
          curSort2 = p;
          curDir2 = "asc";
        } else {
          if (curDir2 === "asc")
            curDir2 = "desc";
          else if (curDir2 === "desc") {
            curSort2 = null;
            curDir2 = "asc";
          }
        }
        this._setState(notePath, vId, sKey2, curSort2);
        this._setState(notePath, vId, dKey2, curDir2);
        applySortVisual(curSort2, curDir2);
        this.refreshCommand(50);
      });
    });
    applySortVisual(curSort, curDir);
    return filtered;
  }
  /* --------------------------------------------------------------------
     [J] 편집 (데모)
  -------------------------------------------------------------------- */
  async editProp(type, path, prop) {
    var _a;
    const file = app.vault.getAbstractFileByPath(path);
    if (!file)
      return;
    if (type === "file name" && file instanceof import_obsidian.TFile) {
      const oldName = file.basename;
      const newName = await this.textInput(oldName);
      if (!newName)
        return;
      const folder = ((_a = file.parent) == null ? void 0 : _a.path) || "";
      const ext = file.extension;
      const newPath = folder ? `${folder}/${newName}.${ext}` : `${newName}.${ext}`;
      await app.vault.rename(file, newPath);
      this.refreshCommand(50);
      return;
    }
    this.refreshCommand(50);
  }
  /* --------------------------------------------------------------------
     [K] 텍스트 입력 모달 (데모)
  -------------------------------------------------------------------- */
  async textInput(defaultVal) {
    return new Promise((resolve) => {
      const { Modal: Modal2 } = globalThis.miniTableGlobal.obsidian;
      class MyModal extends Modal2 {
        constructor(app2) {
          super(app2);
          this.result = defaultVal;
        }
        onOpen() {
          const { contentEl } = this;
          contentEl.createEl("h1", { text: "Input" });
          const inp = contentEl.createEl("input");
          inp.value = this.result;
          inp.style.width = "100%";
          inp.addEventListener("keydown", (ev) => {
            if (ev.key === "Enter") {
              this.result = inp.value.trim();
              this.close();
              resolve(this.result);
            }
          });
          const okBtn = contentEl.createEl("button", { text: "OK" });
          okBtn.onclick = () => {
            this.result = inp.value.trim();
            this.close();
            resolve(this.result);
          };
        }
        onClose() {
          this.contentEl.empty();
        }
      }
      new MyModal(app).open();
    });
  }
  /* --------------------------------------------------------------------
     [L] Suggester
  -------------------------------------------------------------------- */
  async suggester(vals) {
    const { SuggestModal: SuggestModal2 } = globalThis.miniTableGlobal.obsidian;
    return new Promise((resolve) => {
      class MySugg extends SuggestModal2 {
        getSuggestions(q) {
          return vals.filter((x) => x.toLowerCase().includes(q.toLowerCase()));
        }
        renderSuggestion(val, el) {
          el.createEl("div", { text: val });
        }
        onChooseSuggestion(val) {
          resolve(val);
        }
      }
      new MySugg(app).open();
    }).catch(() => null);
  }
  /* --------------------------------------------------------------------
     [M] 정렬 (file.link은 별도 정렬하지 않음)
  -------------------------------------------------------------------- */
  sortByProp(pages, prop, dir) {
    if (!prop || prop === "file.link")
      return pages;
    dir = dir || "asc";
    return pages.sort((a, b) => {
      const A = this.getVal(a, prop);
      const B = this.getVal(b, prop);
      const sA = this.getSortValue(A, prop);
      const sB = this.getSortValue(B, prop);
      if (typeof sA === "number" && typeof sB === "number") {
        return dir === "asc" ? sA - sB : sB - sA;
      }
      const strA = String(sA);
      const strB = String(sB);
      return dir === "asc" ? strA.localeCompare(strB) : strB.localeCompare(strA);
    });
  }
  /* --------------------------------------------------------------------
     [N] DataviewJS 엔트리 포인트: renderView
  -------------------------------------------------------------------- */
  async renderView(settings, props, pages, dv) {
    var _a;
    const originalConsoleError = console.error;
    console.error = (...args) => {
      const msg = args[0] instanceof Error ? args[0].message : String(args[0]);
      if (msg.includes("Cannot read properties of undefined (reading 'file')")) {
        return;
      }
      originalConsoleError(...args);
    };
    try {
      if (!dv || !pages || !Array.isArray(pages))
        return;
      const curr = (_a = dv.current) == null ? void 0 : _a.call(dv);
      if (!curr || !curr.file || !curr.file.path)
        return;
      const notePath = curr.file.path;
      pages = pages.filter((pg) => {
        var _a2;
        return (_a2 = pg == null ? void 0 : pg.file) == null ? void 0 : _a2.path;
      });
      this.dv = dv;
      const id = this.resolveViewId(settings);
      const oldContainer = dv.container;
      if (settings.folding === true) {
        const detailsParent = dv.container.createEl("details");
        const summaryEl = detailsParent.createEl("summary");
        summaryEl.setText(settings.foldingTitle || "Dataview");
        const foldedDiv = detailsParent.createEl("div");
        dv.container = foldedDiv;
      }
      const containerDiv = document.createElement("div");
      containerDiv.classList.add(`dvit-view-id-${id}`);
      dv.container.append(containerDiv);
      const topRow = document.createElement("div");
      topRow.classList.add("dvit-top-row");
      topRow.style.display = "flex";
      topRow.style.justifyContent = "space-between";
      topRow.style.alignItems = "center";
      containerDiv.appendChild(topRow);
      const leftArea = document.createElement("div");
      leftArea.className = "dvit-left-area";
      const centerArea = document.createElement("div");
      centerArea.className = "dvit-center-area";
      const rightArea = document.createElement("div");
      rightArea.className = "dvit-right-area";
      topRow.append(leftArea, centerArea, rightArea);
      if (settings.path) {
        await this.viewFolderButton(settings.path, leftArea);
      }
      if (settings["add new folder button"]) {
        await this.newFolderButton(dv, { folderName: settings["new folder name"] || "NewFolder" }, leftArea);
      }
      await this.renderTagFilterButton(pages, leftArea, notePath, id);
      await this.refreshButton(rightArea, notePath, id);
      await this.searchInput(rightArea, notePath, id);
      const fmRow = document.createElement("div");
      fmRow.className = "frontmatter-filter-area";
      containerDiv.appendChild(fmRow);
      await this.filterButtonProps(props, pages, fmRow, notePath, id);
      const epp = settings["entries on page"] || 10;
      const finalFiltered = await this.createTable(props, pages, containerDiv, notePath, id, epp, settings);
      if (epp) {
        await this.paginationBlock(finalFiltered, epp, containerDiv, notePath, id);
      }
      dv.container = oldContainer;
    } catch (err) {
      console.warn("InteractiveTable renderView suppressed error:", err);
    } finally {
      setTimeout(() => {
        const allErrBlocks = document.querySelectorAll(".dataview-error, .dataview .error, .dv-render-error");
        allErrBlocks.forEach((elem) => {
          if (elem.textContent && elem.textContent.includes("Evaluation Error")) {
            elem.remove();
          }
        });
      }, 100);
      console.error = originalConsoleError;
    }
  }
  async filterButtonProps(props, pages, container, notePath, viewId) {
    const flt = props.filter((pp) => pp.filter);
    if (flt.length === 0)
      return;
    const wrap = document.createElement("div");
    wrap.className = "frontmatter-filter-area";
    for (const p of flt) {
      const b = await this.makeFilterButton(p, pages, notePath, viewId);
      wrap.appendChild(b);
    }
    container.appendChild(wrap);
  }
  async makeFilterButton(p, pages, notePath, viewId) {
    const btn = document.createElement("button");
    btn.className = "dvit-button";
    const nm = p.name || p.prop;
    btn.append(nm);
    btn.onclick = async () => {
      await this.changePropFilter(p, pages, notePath, viewId);
    };
    return btn;
  }
  /* --------------------------------------------------------------------
     renderAutoView (현재 노트 폴더의 md 문서 및 .canvas 파일 자동 수집)
  -------------------------------------------------------------------- */
  async renderAutoView(dv, settings = {}) {
    var _a;
    const currFile = (_a = dv.current()) == null ? void 0 : _a.file;
    if (!currFile) {
      console.warn("renderAutoView: No current file found.");
      return;
    }
    const mdPages = dv.pages().where((p) => p.file.folder === currFile.folder).where((p) => p.file.path !== currFile.path).array();
    const currentFolder = currFile.folder;
    const canvasFiles = app.vault.getFiles().filter((f) => f.extension === "canvas").filter((f) => {
      const parentFolder = f.path.substring(0, f.path.lastIndexOf("/")) || "";
      return parentFolder === currentFolder;
    });
    const canvasPages = canvasFiles.map((cf) => {
      return {
        file: {
          path: cf.path,
          link: dv.fileLink(cf.path),
          folder: currentFolder
        },
        frontmatter: {
          title: cf.basename
        },
        created: "",
        status: "",
        tags: "#\uCE94\uBC84\uC2A4"
      };
    });
    const pages = mdPages.concat(canvasPages);
    const defaultProps = [
      { prop: "file.link", name: "Title", filter: false, column: true },
      { prop: "created", name: "Created", filter: true, column: true },
      { prop: "status", name: "Status", filter: true, column: true }
    ];
    const finalProps = settings.props || defaultProps;
    await this.renderView(settings, finalProps, pages, dv);
  }
};

// src/gantt_table.ts
var GanttTable = class {
  constructor() {
    /**
     * (B) 다크/라이트 모드용 기본 팔레트
     */
    this.defaultDarkPalettes = [
      "#ff6363",
      "#ffa600",
      "#ffcf00",
      "#8aff80",
      "#2effd3",
      "#00ffff",
      "#25c6fc",
      "#3399ff",
      "#9975e2",
      "#cc66cc",
      "#ff66ff",
      "#ff66cc",
      "#ff6699",
      "#ff6666",
      "#f06b60",
      "#ed7732",
      "#de9f00",
      "#afff68",
      "#53ffb4",
      "#2f9eff"
    ];
    this.defaultLightPalettes = [
      "#ff9999",
      "#ffc04d",
      "#ffe680",
      "#b3ffb3",
      "#80fff2",
      "#80ffff",
      "#99daff",
      "#99c2ff",
      "#c2a3e8",
      "#df9edf",
      "#ff99ff",
      "#ff99e6",
      "#ff99c2",
      "#ff9999",
      "#f4a38c",
      "#f1b066",
      "#eec900",
      "#c5ff8a",
      "#84ffc9",
      "#74baff"
    ];
    this.noteColorMap = {};
    this.colorIndex = 0;
    this.legendData = {};
    this.isDarkMode = document.body.classList.contains("theme-dark");
    this.interactiveTable = null;
  }
  /**
   * (A) createResponsiveHR
   *    - Gantt 아래에 InteractiveTable을 붙일 때 시각적 구분선 사용
   *    - parentEl: 실제 DOM 컨테이너(예: dv.container)
   */
  createResponsiveHR(parentEl) {
    let hr = parentEl.createEl("hr");
    if (document.body.classList.contains("theme-dark")) {
      hr.style.border = "1px solid #fff";
    } else {
      hr.style.border = "1px solid #000";
    }
    hr.style.margin = "10px 0";
    return hr;
  }
  /**
   * (C) 노트 → 색상 인덱스 할당
   */
  assignColorToNote(noteTitle, colorPalette) {
    if (!this.noteColorMap[noteTitle]) {
      if (!Array.isArray(colorPalette) || colorPalette.length === 0) {
        this.noteColorMap[noteTitle] = { colorIndex: null };
      } else {
        const idx = this.colorIndex % colorPalette.length;
        this.noteColorMap[noteTitle] = { colorIndex: idx };
        this.colorIndex++;
      }
    }
  }
  getNoteColor(noteTitle, colorPalette) {
    const entry = this.noteColorMap[noteTitle];
    if (!entry || entry.colorIndex === null)
      return "#999";
    return colorPalette[entry.colorIndex];
  }
  /**
   * (D) 데이터 수집: 다크/라이트 모드별 팔레트 확정 + 페이지 필터링
   */
  gatherData(dv, settings) {
    var _a;
    this.isDarkMode = document.body.classList.contains("theme-dark");
    let finalColorPalette;
    if (this.isDarkMode) {
      if (Array.isArray(settings.colorPaletteDark) && settings.colorPaletteDark.length > 0) {
        finalColorPalette = settings.colorPaletteDark;
      } else if (Array.isArray(settings.colorPalette) && settings.colorPalette.length > 0) {
        finalColorPalette = settings.colorPalette;
      } else {
        finalColorPalette = this.defaultDarkPalettes;
      }
    } else {
      if (Array.isArray(settings.colorPaletteLight) && settings.colorPaletteLight.length > 0) {
        finalColorPalette = settings.colorPaletteLight;
      } else if (Array.isArray(settings.colorPalette) && settings.colorPalette.length > 0) {
        finalColorPalette = settings.colorPalette;
      } else {
        finalColorPalette = this.defaultLightPalettes;
      }
    }
    const curr = (_a = dv.current) == null ? void 0 : _a.call(dv);
    if (!(curr == null ? void 0 : curr.file)) {
      return {
        dv,
        allPages: [],
        year: 0,
        month: 0,
        totalDays: 0,
        finalColorPalette
      };
    }
    const currentFile = curr.file;
    let basePages = [];
    if (settings.customPages && Array.isArray(settings.customPages)) {
      basePages = settings.customPages;
    } else if (settings.path && typeof settings.path === "string") {
      basePages = dv.pages(`"${settings.path}"`).where((p) => p.file.path !== currentFile.path).array();
    } else {
      basePages = dv.pages().where((p) => p.file.folder === currentFile.folder).where((p) => p.file.path !== currentFile.path).array();
    }
    let allPages = basePages.filter((p) => {
      let s = p.situation;
      if (s === "\uC791\uC5C5\uC644\uB8CC")
        return false;
      if (!p.created || !p.end)
        return false;
      return true;
    });
    let now = /* @__PURE__ */ new Date();
    let year = now.getFullYear();
    let month = now.getMonth();
    let totalDays = new Date(year, month + 1, 0).getDate();
    return { dv, allPages, year, month, totalDays, finalColorPalette };
  }
  /**
   * (E) 간트 테이블 생성
   */
  buildGanttTable(settings, data) {
    const { allPages, totalDays } = data;
    let theadHTML = `
      <thead>
        <tr>
          <th class="gantt-corner-col"></th>
          ${Array.from({ length: totalDays }, (_, i) => {
      let d = i + 1;
      let dayStr = String(d).padStart(2, "0");
      return `<th class="gantt-day-col">${dayStr}</th>`;
    }).join("")}
        </tr>
      </thead>`;
    let tbodyHTML = "<tbody>";
    for (let page of allPages) {
      let fmTitle = page.title || page.file.name || "Untitled";
      let situation = page.situation || "";
      if (situation === "\uC77C\uC2DC\uC911\uC9C0") {
        this.noteColorMap[fmTitle] = { colorIndex: null };
      } else {
        this.assignColorToNote(fmTitle, data.finalColorPalette);
      }
      tbodyHTML += `<tr>`;
      tbodyHTML += `<td class="gantt-note-col">${fmTitle}</td>`;
      for (let d = 1; d <= totalDays; d++) {
        tbodyHTML += `
          <td class="gantt-cell"
              data-note-title="${fmTitle}"
              data-day="${d}"
              data-situation="${situation}"></td>`;
      }
      tbodyHTML += `</tr>`;
    }
    tbodyHTML += "</tbody>";
    return `<table class="gantt-table">${theadHTML}${tbodyHTML}</table>`;
  }
  /**
   * (F) 범례
   */
  getLegendColor(title, palette) {
    const entry = this.noteColorMap[title];
    if (!entry)
      return "#999";
    if (entry.colorIndex === null)
      return "#888";
    return palette[entry.colorIndex] || "#999";
  }
  buildLegendHTML(settings, data) {
    const palette = data.finalColorPalette;
    let noteTitles = Object.keys(this.noteColorMap);
    if (noteTitles.length === 0)
      return "";
    noteTitles.sort();
    let legendItems = noteTitles.map((title) => {
      let c = this.getLegendColor(title, palette);
      return `
        <div class="gantt-legend-item">
          <span class="gantt-legend-color" style="background-color:${c};"></span>
          <span class="gantt-legend-text">${title}</span>
        </div>`;
    }).join("");
    return `<div class="gantt-legend">${legendItems}</div>`;
  }
  buildLegendData(data) {
    const palette = data.finalColorPalette;
    let result = {};
    for (const title in this.noteColorMap) {
      const entry = this.noteColorMap[title];
      if (!entry) {
        result[title] = "#999";
        continue;
      }
      if (entry.colorIndex === null) {
        result[title] = "#888";
      } else {
        result[title] = palette[entry.colorIndex] || "#999";
      }
    }
    return result;
  }
  getLegendDataFromData(data) {
    return this.buildLegendData(data);
  }
  /**
   * (G) 렌더 함수
   */
  async renderView(dv, settings = {}) {
    var _a, _b, _c;
    if (!((_a = dv.current) == null ? void 0 : _a.call(dv)) || !((_b = dv.current()) == null ? void 0 : _b.file)) {
      console.warn("GanttTable: No current file - returning quietly.");
      return;
    }
    if (!settings["id"] || typeof settings["id"] !== "string") {
      settings["id"] = "gantt-auto-" + Date.now() + "-" + Math.random().toString(16).slice(2, 6);
    }
    this.isDarkMode = document.body.classList.contains("theme-dark");
    let now = /* @__PURE__ */ new Date();
    let monthName = new Intl.DateTimeFormat("en", { month: "long" }).format(now);
    dv.paragraph(`\u{1F5D3}\uFE0F **${monthName}**`);
    this.noteColorMap = {};
    this.colorIndex = 0;
    this.legendData = {};
    let data = this.gatherData(dv, settings);
    if (!data || data.year === 0 || data.totalDays === 0) {
      dv.paragraph("*(No Gantt data)*");
      return;
    }
    let tableHTML = this.buildGanttTable(settings, data);
    let legendHTML = settings.showLegend === false ? "" : this.buildLegendHTML(settings, data);
    const container = document.createElement("div");
    container.classList.add("gantt-container");
    container.innerHTML = tableHTML + legendHTML;
    dv.container.appendChild(container);
    this.applyNoteColors(container, data);
    this.highlightToday(container, data);
    this.legendData = this.buildLegendData(data);
    if (settings.debugLegend === true) {
      dv.paragraph("**[Legend Data]**");
      dv.paragraph(JSON.stringify(this.legendData, null, 2));
    }
    if (settings.renderInteractiveBelow === true) {
      this.createResponsiveHR(dv.container);
      const engine = (_c = globalThis.miniTableGlobal) == null ? void 0 : _c.engine;
      if (engine && typeof engine.renderAutoView === "function") {
        let itSettings = settings.interactiveOptions || {};
        await engine.renderAutoView(dv, itSettings);
      }
    }
  }
  /**
   * (H) applyNoteColors
   */
  applyNoteColors(container, data) {
    const { dv, allPages, year, month, finalColorPalette } = data;
    allPages.forEach((page) => {
      let fmTitle = page.title || page.file.name || "Untitled";
      let situation = page.situation || "";
      let noteColor = "#999";
      if (situation === "\uC77C\uC2DC\uC911\uC9C0")
        noteColor = "#888";
      else
        noteColor = this.getNoteColor(fmTitle, finalColorPalette);
      let startDV = dv.date(page.created);
      let endDV = dv.date(page.end);
      if (!startDV || !endDV)
        return;
      let startJS = startDV.toJSDate();
      let endJS = endDV.toJSDate();
      let tds = container.querySelectorAll(`td[data-note-title="${fmTitle}"]`);
      tds.forEach((td) => {
        let d = parseInt(td.getAttribute("data-day"), 10);
        let thisDay = new Date(year, month, d);
        if (thisDay >= startJS && thisDay <= endJS) {
          td.style.setProperty("background-color", noteColor, "important");
        }
      });
    });
  }
  /**
   * (I) highlightToday
   */
  highlightToday(container, data) {
    let now = /* @__PURE__ */ new Date();
    let todayDay = now.getDate();
    let dayCells = container.querySelectorAll(`td[data-day="${todayDay}"]`);
    dayCells.forEach((td) => td.classList.add("gantt-today-col"));
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  design: {
    dark: {
      buttonColor: "#3c3c3c",
      buttonHoverColor: "#555555",
      tableHeaderBgColor: "#444444",
      tableBorderColor: "#000000"
    },
    light: {
      buttonColor: "#cccccc",
      buttonHoverColor: "#dddddd",
      tableHeaderBgColor: "#bbbbbb",
      tableBorderColor: "#666666"
    }
  }
};
var MiniTablePlugin = class extends import_obsidian2.Plugin {
  constructor(app2, manifest) {
    super(app2, manifest);
  }
  async onload() {
    console.log("Mini Table Plugin onload()");
    if (!globalThis.miniTableGlobal) {
      globalThis.miniTableGlobal = {};
    }
    const originalConsoleError = console.error;
    console.error = (...args) => {
      try {
        if (args && args[0]) {
          let msg = args[0] instanceof Error ? args[0].message : String(args[0]);
          if (msg.includes("miniTableGlobal is not defined")) {
            return;
          }
        }
      } catch (e) {
      }
      originalConsoleError(...args);
    };
    await this.loadSettings();
    this.app.workspace.onLayoutReady(async () => {
      console.log("Mini Table Plugin onLayoutReady() - now applying settings & events.");
      this.applyDesignSettings();
      this.registerEvent(
        this.app.workspace.on("css-change", () => {
          this.applyDesignSettings();
        })
      );
      globalThis.miniTableGlobal.obsidian = {
        Notice: import_obsidian2.Notice,
        Modal: import_obsidian2.Modal,
        SuggestModal: import_obsidian2.SuggestModal
      };
      globalThis.miniTableGlobal.engine = new InteractiveTable();
      globalThis.miniTableGlobal.gantt = new GanttTable();
    });
    this.addSettingTab(new MiniTableSettingTab(this.app, this));
  }
  onunload() {
    console.log("Mini Table Plugin onunload()");
  }
  /**
   * 플러그인 설정 로드
   */
  async loadSettings() {
    const data = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
  }
  /**
   * 플러그인 설정 저장
   */
  async saveSettings() {
    await this.saveData(this.settings);
    this.applyDesignSettings();
  }
  /**
   * 디자인 설정(테마) 적용
   */
  applyDesignSettings() {
    const rootStyle = document.documentElement.style;
    const d = this.settings.design;
    const isDark = document.body.classList.contains("theme-dark");
    const c = isDark ? d.dark : d.light;
    rootStyle.setProperty("--mini-table-button-color", c.buttonColor);
    rootStyle.setProperty("--mini-table-button-hover-color", c.buttonHoverColor);
    rootStyle.setProperty("--mini-table-header-bg-color", c.tableHeaderBgColor);
    rootStyle.setProperty("--mini-table-border-color", c.tableBorderColor);
  }
};
var MiniTableSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Mini Table Plugin Settings" });
    containerEl.createEl("h3", { text: "Dark Mode Colors" });
    new import_obsidian2.Setting(containerEl).setName("Dark Button Color").addColorPicker(
      (cp) => cp.setValue(this.plugin.settings.design.dark.buttonColor).onChange(async (val) => {
        this.plugin.settings.design.dark.buttonColor = val;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Dark Button Hover Color").addColorPicker(
      (cp) => cp.setValue(this.plugin.settings.design.dark.buttonHoverColor).onChange(async (val) => {
        this.plugin.settings.design.dark.buttonHoverColor = val;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Dark Table Header BG").addColorPicker(
      (cp) => cp.setValue(this.plugin.settings.design.dark.tableHeaderBgColor).onChange(async (val) => {
        this.plugin.settings.design.dark.tableHeaderBgColor = val;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Dark Table Border Color").addColorPicker(
      (cp) => cp.setValue(this.plugin.settings.design.dark.tableBorderColor).onChange(async (val) => {
        this.plugin.settings.design.dark.tableBorderColor = val;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "Light Mode Colors" });
    new import_obsidian2.Setting(containerEl).setName("Light Button Color").addColorPicker(
      (cp) => cp.setValue(this.plugin.settings.design.light.buttonColor).onChange(async (val) => {
        this.plugin.settings.design.light.buttonColor = val;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Light Button Hover Color").addColorPicker(
      (cp) => cp.setValue(this.plugin.settings.design.light.buttonHoverColor).onChange(async (val) => {
        this.plugin.settings.design.light.buttonHoverColor = val;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Light Table Header BG").addColorPicker(
      (cp) => cp.setValue(this.plugin.settings.design.light.tableHeaderBgColor).onChange(async (val) => {
        this.plugin.settings.design.light.tableHeaderBgColor = val;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Light Table Border Color").addColorPicker(
      (cp) => cp.setValue(this.plugin.settings.design.light.tableBorderColor).onChange(async (val) => {
        this.plugin.settings.design.light.tableBorderColor = val;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
